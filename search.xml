<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[什么是？事件轮询和异步I/O]]></title>
      <url>http://ntscshen.com/2018/02/01/%E4%BB%80%E4%B9%88%E6%98%AF%EF%BC%9F%E4%BA%8B%E4%BB%B6%E8%BD%AE%E8%AF%A2%E5%92%8C%E5%BC%82%E6%AD%A5I-O.html</url>
      <content type="html"><![CDATA[<p>什么是？事件轮询和异步I/O</p>
<ol>
<li>事件驱动(事件轮询) 和 非阻塞的I/O处理(异步I/O),这些概念该如何理解?</li>
<li>浏览器,Node.js,JavaScript语言,说的是一个东西吗?</li>
<li>它们直接有什么关系?</li>
<li>浏览器真的是单线程吗?</li>
<li>既然是单线程可为什么：页面渲染和Ajax请求时并行的?</li>
</ol>
<h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><blockquote>
<p>同步：是程序发出调用的时候,一直等待直到返回结果,没有结果之前不会返回。也就是,同步是调用者主动等待调用的过程<br>异步：是程序发出调用之后,马上返回,但不会马上返回结果。调用者不必主动等待,当被调用者得到结果之后,会主动通知调用者</p>
</blockquote>
<h3 id="阻塞和非阻塞"><a href="#阻塞和非阻塞" class="headerlink" title="阻塞和非阻塞"></a>阻塞和非阻塞</h3><blockquote>
<p>阻塞(Blocking)：调用在等待的过程中,线程被”挂起”( CPU资源被分配到其他地方 )<br>非阻塞( Non-blocking )：调用在等待的过程中,CPU资源还在该线程中,线程还可以做其他事情</p>
</blockquote>
<h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><blockquote>
<p>进程(Process)：是系统资源分配和调度的单元。一个运行的程序就对应一个进程。一个进程包括了运行中的程序和程序所使用到的内存和系统资源<br>线程(Thread)：是进程下的执行者,一个进程至少会开启一个线程(主线程),也可以开启多个线程。</p>
</blockquote>
<h3 id="总结一下这些概念性的东西"><a href="#总结一下这些概念性的东西" class="headerlink" title="总结一下这些概念性的东西"></a>总结一下这些概念性的东西</h3><blockquote>
<p>只需要大概知道我们”<strong>通常所说的同步都是阻塞的</strong>“,主线程调用一个API时,要等待他的结果后才能往下执行<br>异步：”<strong>通常所说的是非阻塞的异步</strong>“</p>
</blockquote>
<h3 id="单线程的JavaScript"><a href="#单线程的JavaScript" class="headerlink" title="单线程的JavaScript"></a>单线程的JavaScript</h3><blockquote>
<p>JavaScript最大的特点是单线程,也就是说,同一时间内只能做一件事。<br>JavaScript的单线程设计,与它的用途有关,作为”<strong>浏览器脚本语言</strong>“,JavaScript的主要用于与用户互动和操作DOM。主要应用场景决定了其只能是单线程,否则会带来很复杂的同步问题。<br>e.g：假定JavaScript同时有两个进程,一个进程在某个DOM节点上添加内容,另一个线程删除了这个节点,此时浏览器应该以哪个线程为准? 为了避开这种并行处理的复杂情况,设计者们没有給这门脚本语言多线程的能力</p>
</blockquote>
<h4 id="我们说的单线程-主要指的是什么"><a href="#我们说的单线程-主要指的是什么" class="headerlink" title="我们说的单线程,主要指的是什么?"></a>我们说的单线程,主要指的是什么?</h4><blockquote>
<p>说到JS单线程还是多线程,得结合具体运行环境。<br>JS通常运行在浏览器中,具体由JS引擎去解析和运行,这里说的JS单线程主要是：JS的业务代码在单线程中执行(JS引擎)<br><strong>仅仅指的是,JS在执行的过程中是单线程的。</strong><br>但是,一个页面在浏览器中工作,实际上浏览器不止使用一个线程来运行它的任务( e.g：浏览器提供的WebAPI - XMLHttpRequest,SetTimeout,Promise等等 ),还是利用了多线程和操作系统的任务调度。</p>
</blockquote>
<h3 id="事件轮询-Event-Loop"><a href="#事件轮询-Event-Loop" class="headerlink" title="事件轮询(Event Loop)"></a>事件轮询(Event Loop)</h3><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><h3 id="Node-js的Event-Loop"><a href="#Node-js的Event-Loop" class="headerlink" title="Node.js的Event Loop"></a>Node.js的Event Loop</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Phaser开发H5小游戏(一)]]></title>
      <url>http://ntscshen.com/2017/06/20/Phaser%E5%BC%80%E5%8F%91H5%E5%B0%8F%E6%B8%B8%E6%88%8F(%E4%B8%80).html</url>
      <content type="html"><![CDATA[<blockquote>
<p>刚刚学习Phaser、在博客上记载一下学习过程。先从官方的小例子开始😁</p>
</blockquote>
<h5 id="需要本地Web服务器。"><a href="#需要本地Web服务器。" class="headerlink" title="需要本地Web服务器。"></a>需要本地Web服务器。</h5><ol>
<li><code>npm install http-server -g</code> 可以使用它来配置简单的http服务</li>
<li><code>browser-sync</code> 或 <code>browser-sync-webpack-plugin</code> 或 <code>devServer</code></li>
</ol>
<h5 id="下载Phaser-js"><a href="#下载Phaser-js" class="headerlink" title="下载Phaser.js"></a>下载Phaser.js</h5><p><a href="https://github.com/photonstorm/phaser-ce/tree/v2.8.0/build" target="_blank" rel="external">官网github下载</a></p>
<p><a href="http://occeqxmsk.bkt.clouddn.com/phaser.min.js" target="_blank" rel="external">个人线上地址</a></p>
<h5 id="再次-需要下载教程内的资源"><a href="#再次-需要下载教程内的资源" class="headerlink" title="再次 需要下载教程内的资源"></a>再次 <a href="https://github.com/photonstorm/phaser/raw/master/v2/resources/tutorials/02%20Making%20your%20first%20game/phaser_tutorial_02.zip" target="_blank" rel="external">需要下载教程内的资源</a></h5><h4 id="制作第一个小游戏-part1"><a href="#制作第一个小游戏-part1" class="headerlink" title="制作第一个小游戏(part1)"></a>制作第一个小游戏(part1)</h4><ul>
<li>创建游戏实例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> game = <span class="keyword">new</span> Phaser.Game(<span class="number">800</span>, <span class="number">600</span>, Phaser.AUTO, <span class="string">''</span>, &#123;</div><div class="line">  	<span class="attr">preload</span>: preload,</div><div class="line">  	<span class="attr">create</span>: create,</div><div class="line">  	<span class="attr">update</span>: update</div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">preload</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="comment">// 前两个参数是Phaser创建的游戏元素的宽高(您可以设置任何您喜欢的尺寸)</span></div><div class="line"><span class="comment">// 第三个参数(如何渲染游戏)可以是：Phaser.CANVAS,Phaser.WEBGL或Phaser.AUTO。 推荐参数是Phaser.AUTO, 它会自动尝试使用WebGL,如果浏览器或设备不支持,它将返回到Canvas</span></div><div class="line"><span class="comment">// 第四个参数, 创建的游戏元素需要插入的DOM元素的ID。 这个参数设置为空,它将会被依附到body身上。</span></div><div class="line"><span class="comment">// 最后的参数, 是Phaser基本功能的对象引用(不是必须的)、对于一个简单入门小游戏、使用这种方式、因为它方便快捷</span></div></pre></td></tr></table></figure>
<h4 id="制作第一个小游戏-part2"><a href="#制作第一个小游戏-part2" class="headerlink" title="制作第一个小游戏(part2)"></a>制作第一个小游戏(part2)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">preload</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    game.load.image(<span class="string">'sky'</span>, <span class="string">'assets/sky.png'</span>);</div><div class="line">    game.load.image(<span class="string">'ground'</span>, <span class="string">'assets/platform.png'</span>);</div><div class="line">    game.load.image(<span class="string">'star'</span>, <span class="string">'assets/star.png'</span>);</div><div class="line">    game.load.spritesheet(<span class="string">'dude'</span>, <span class="string">'assets/dude.png'</span>, <span class="number">32</span>, <span class="number">48</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// preload 预加载</span></div><div class="line"><span class="comment">// 加载需要的文件资源、通过game.add来执行这个操作</span></div><div class="line"><span class="comment">// 代码中加载了、三个图片和一个精灵图。第一个参数 - 称之为资产秘钥。此秘钥指向已加载资源的链接、可以在任何位置使用</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	game.add.sprite(<span class="number">0</span>, <span class="number">0</span>, <span class="string">'star'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 在游戏场景中添加一个精灵</span></div></pre></td></tr></table></figure>
<h4 id="制作第一个小游戏-part3"><a href="#制作第一个小游戏-part3" class="headerlink" title="制作第一个小游戏(part3)"></a>制作第一个小游戏(part3)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 构建背景</span></div><div class="line"><span class="keyword">var</span> platforms;<span class="comment">// 平台</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="comment">// 为游戏添加物理引擎 - Arcade(实现简单的碰撞、重力等效果最佳。适合移动浏览器)</span></div><div class="line">  	game.physics.startSystem(Phaser.Physics.ARCADE);</div><div class="line">  	<span class="comment">// 添加填空背景</span></div><div class="line">  	game.add.sprite(<span class="number">0</span>, <span class="number">0</span>, <span class="string">'sky'</span>);</div><div class="line">  	<span class="comment">// 平台组：包含地面和两个支撑平台</span></div><div class="line">  	platforms = game.add.group();</div><div class="line">  	<span class="comment">// 在platforms组中创建的对象 - 启用物理引擎</span></div><div class="line">  	platforms.enableBody = <span class="literal">true</span>;</div><div class="line">  	<span class="comment">// 创建地面</span></div><div class="line">  	<span class="keyword">var</span> ground = platforms.create(<span class="number">0</span>, game.world.height - <span class="number">64</span>, <span class="string">'ground'</span>);</div><div class="line">  	<span class="comment">// 缩放地面长度 - 以适应游戏大小</span></div><div class="line">  	ground.scale.setTo(<span class="number">2</span>, <span class="number">2</span>);</div><div class="line">  	<span class="comment">// 当你跳上去的时候、他会阻止当前平台掉下来</span></div><div class="line">  	ground.body.immovable = <span class="literal">true</span>;<span class="comment">// immovable: 不可动摇的</span></div><div class="line">  	<span class="comment">// 创建两个平台</span></div><div class="line">  	<span class="keyword">var</span> ledge = platforms.create(<span class="number">400</span>, <span class="number">400</span>, <span class="string">'ground'</span>);</div><div class="line">  	ledge.body.immovable = <span class="literal">true</span>;</div><div class="line">  	ledge = platforms.create(<span class="number">-150</span>, <span class="number">250</span>, <span class="string">'ground'</span>);</div><div class="line">  	ledge.body.immovable = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 如果不设置 ledge.body.immovable = true; 当玩家于其碰撞时,地面会跟随其移动</span></div></pre></td></tr></table></figure>
<h4 id="制作第一个小游戏-part4"><a href="#制作第一个小游戏-part4" class="headerlink" title="制作第一个小游戏(part4)"></a>制作第一个小游戏(part4)</h4><blockquote>
<p>准备游戏人物</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">player = game.add.sprite(<span class="number">32</span>, game.world.height - <span class="number">150</span>, <span class="string">'dude'</span>);</div><div class="line">game.physics.arcade.enable(player);</div><div class="line"><span class="comment">// 为精灵启动物理引擎、在组中启动物理引擎是 platforms.enableBody = true;</span></div><div class="line">player.body.bounce.y = <span class="number">0.2</span>;<span class="comment">// bounce:弹跳。給玩家轻微反弹</span></div><div class="line">player.body.gravity.y = <span class="number">300</span>;<span class="comment">// gravity:重力。这个值越高、物体感觉越重、下降越快</span></div><div class="line">player.body.collideWorldBounds = <span class="literal">true</span>;<span class="comment">// 超出世界的界限、将会碰撞回来</span></div><div class="line"><span class="comment">// Phaser独有的序列帧动画</span></div><div class="line">player.animations.add(<span class="string">'left'</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">10</span>, <span class="literal">true</span>);</div><div class="line">player.animations.add(<span class="string">'right'</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="number">10</span>, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
<p><img src="https://phaser.io/content/tutorials/making-your-first-phaser-game/dude.png" alt="https://phaser.io/content/tutorials/making-your-first-phaser-game/dude.png"></p>
<p>总共有9帧。面相用户的是第4个，左边4个、右边4个。定义了两个动画’left’、’right’ true参数告诉Phaser动画是循环播放的。’10’ 为毫秒的时间。10毫秒执行一次动画帧</p>
<h4 id="制作第一个小游戏-part5"><a href="#制作第一个小游戏-part5" class="headerlink" title="制作第一个小游戏(part5)"></a>制作第一个小游戏(part5)</h4><blockquote>
<p>打开part5.html (请开启服务)</p>
<p>你会发现游戏玩家、完全无视地面的存在。这是由于我们还没有添加地面和玩家之间的碰撞。</p>
<p>之前我们的代码只是创建地面并且告诉Phaser地面和平台都是不可以移动的( <code>ground.body.immovable = true;</code> )</p>
<p>因此我们需要在update中添加碰撞检测</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="keyword">var</span> hitPlatform = game.physics.arcade.collide(player, platforms);</div><div class="line">&#125;</div><div class="line"><span class="comment">// hit 碰撞 platform 平台</span></div><div class="line"><span class="comment">// collide(游戏人物, 平台);</span></div></pre></td></tr></table></figure>
<p>update参数添加完成后 - 如果注释了create() 中的 <code>ground.body.immovable = true;</code> 在去看看实际效果</p>
<h4 id="制作第一个小游戏-part6"><a href="#制作第一个小游戏-part6" class="headerlink" title="制作第一个小游戏(part6)"></a>制作第一个小游戏(part6)</h4><blockquote>
<p>用键盘控制游戏人物</p>
<p>玩家需要根据键盘的方向去移动。 Phaser有一个内置的键盘管理器</p>
<p><code>cursors = game.input.keyboard.createCursorKeys();</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	...</div><div class="line">    cursors = game.input.keyborad.createCursorKeys();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="comment">// 玩家和平台碰撞</span></div><div class="line">  	game.physics.arcade.collide(player, platforms);</div><div class="line">  	<span class="comment">// 重置玩家 - 速度(velocity)</span></div><div class="line">  	player.body.velocity.x = <span class="number">0</span>;</div><div class="line">  	<span class="keyword">if</span>(cursors.left.isDown)&#123;<span class="comment">// 键盘左</span></div><div class="line">      	player.body.velocity.x = <span class="number">-150</span>;</div><div class="line">      	player.animations.play(<span class="string">'left'</span>);<span class="comment">// 序列帧动画执行left</span></div><div class="line">  	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cursors.right.isDown)&#123;</div><div class="line">      	player.body.velocity.x = <span class="number">150</span>;</div><div class="line">      	player.animations.play(<span class="string">'right'</span>);</div><div class="line">  	&#125;<span class="keyword">else</span>&#123;<span class="comment">// 左右键不触发 - 则停止序列帧动画 - 显示第四帧</span></div><div class="line">      	player.animations.stop();</div><div class="line">      	player.frame = <span class="number">4</span>;</div><div class="line">  	&#125;</div><div class="line">  	<span class="keyword">if</span>(cursors.up.isDown &amp;&amp; player.body.touching.down)&#123;<span class="comment">// 玩家接触地面</span></div><div class="line">      	player.body.velocity.y = <span class="number">-200</span>;</div><div class="line">  	&#125;</div><div class="line">  	<span class="comment">// player.body.touching.down 如果不设置这段、则游戏会出现Bug。玩家在半空中跳跃</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="制作第一个小游戏-part7"><a href="#制作第一个小游戏-part7" class="headerlink" title="制作第一个小游戏(part7)"></a>制作第一个小游戏(part7)</h4><blockquote>
<p>前面6个part已经完成了主体部分</p>
<p>part7来添加一些星星✨、让玩家收集它们。辣么多的星星、需要添加星星组。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	...</div><div class="line">    <span class="comment">// 创建星星组</span></div><div class="line">    starts = game.add.group();</div><div class="line">    <span class="comment">// 为组内的创建的元素、启动物理引擎</span></div><div class="line">    starts.enableBody = <span class="literal">true</span>;</div><div class="line">    <span class="comment">// 均匀创建12个隔断</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">12</span>; i++)&#123;</div><div class="line">        <span class="keyword">var</span> star = stars.create(i*<span class="number">70</span>, <span class="number">0</span>, <span class="string">'star'</span>);</div><div class="line">        star.body.gravity.y = <span class="number">300</span>;</div><div class="line">        <span class="comment">// 随机添加弹跳系数</span></div><div class="line">        star.body.bounce.y = <span class="number">0.7</span> + <span class="built_in">Math</span>.random() * <span class="number">0.2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="comment">// 人物和地面 碰撞</span></div><div class="line">  	game.physics.arcade.collide(player, platforms);</div><div class="line">  	<span class="comment">// 星星和地面 碰撞</span></div><div class="line">  	game.physics.arcade.collide(stars, platforms);</div><div class="line">  	<span class="comment">// 检测玩家是否和星星碰撞、如果碰撞则调用collectStar函数</span></div><div class="line">  	game.physics.arcade.overlap(player, stars, collectStar, <span class="literal">null</span>, <span class="keyword">this</span>)</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">collectStar</span>(<span class="params">player, star</span>) </span>&#123;</div><div class="line">      	star,kill();<span class="comment">// 杀死星星</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="制作第一个小游戏-part8"><a href="#制作第一个小游戏-part8" class="headerlink" title="制作第一个小游戏(part8)"></a>制作第一个小游戏(part8)</h4><blockquote>
<p>最后完善</p>
<ol>
<li>添加分数</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> score = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> scoreText;</div><div class="line">...</div><div class="line">function create() &#123;</div><div class="line">  	scoreText = game.add.text(<span class="number">16</span>, <span class="number">16</span>, <span class="string">'Score:0'</span>, &#123;</div><div class="line">      	<span class="attr">fontSize</span>: <span class="string">'32px'</span>,</div><div class="line">      	<span class="attr">fill</span>: <span class="string">'#000'</span></div><div class="line">  	&#125;);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	...</div><div class="line">    function collectStar(player, star) &#123;</div><div class="line">      	star,kill();</div><div class="line">      	<span class="comment">// 添加更新的分数</span></div><div class="line">      	score += <span class="number">10</span>;</div><div class="line">      	scoreText.text = <span class="string">'Score: '</span> + score;</div><div class="line">      	<span class="comment">// 跟新具体的变量、需要获取对应的值进行改变...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>官方的第一个游戏用例、里面的知识都非常、非常的基础和重要。</p>
<ol>
<li>基础的生命周期概念(create、update、play、over)</li>
<li>物理引擎 Arcade</li>
<li>game.add.group()组的概念</li>
<li>Phaser内置的键盘</li>
<li>序列正动画</li>
</ol>
</blockquote>
<h5 id="物理引擎-Arcade"><a href="#物理引擎-Arcade" class="headerlink" title="物理引擎 Arcade"></a>物理引擎 Arcade</h5><ul>
<li><code>game.physics.startSystem(Phaser.Physics.ARCADE)</code> 为游戏启动Arcade引擎</li>
<li><code>game.physics.arcade.enable(player);</code> // 为指定的元素添加引擎 <code>game.physics.enable(player, Phaser.Physics.ARCADE);</code> 这两个意思是相等的</li>
<li><code>platforms.enableBody = true;</code> 将为组中创建的任何对象 - 启动物理引擎</li>
<li><code>ground.body.immovable = true</code>  为当前元素添加了immovable之后、相当于一个地面平台。不会随着其他重力物体的碰撞而随之改变位置。( 我心如铁、坚不可摧😀 )</li>
<li><code>player.body.bounce.y = 0.2</code> 弹跳系数。 TODO：随机弹跳系数 <code>player.body.bounce.y = 0.2 + Math.random() * 0.2</code></li>
<li><code>player.body.gravity.y = 300;</code> 重力系数</li>
<li><code>player.body.collideWorldBounds = true;</code>  超出游戏世界范围、将会被弹回来</li>
</ul>
<h5 id="game-add-group-组的概念"><a href="#game-add-group-组的概念" class="headerlink" title="game.add.group()组的概念"></a>game.add.group()组的概念</h5><ul>
<li>将类似的对象组合在一起、并将其全部控制为一个单独的单元体。</li>
<li>组和组可以进行碰撞、组合精灵可碰撞。但是组合图片无法碰撞</li>
<li>在组中创建元素 <code>stars = game.add.group(); stars.create(0, 0, &#39;star&#39;);</code></li>
<li><code>stars.enableBody = true</code> 为组中创建的任何对象 - 启动物理引擎</li>
<li><code>image</code> 无法实现逐帧动画、无法添加物理属性</li>
</ul>
<h5 id="Phaser内置的键盘"><a href="#Phaser内置的键盘" class="headerlink" title="Phaser内置的键盘"></a>Phaser内置的键盘</h5><ul>
<li><code>game.input.keyboard.createCursorKeys();</code></li>
<li>keyboard：监视键盘输入和调度键盘事件。</li>
<li>createCursorKeys()：创建并返回一个包含上、下、左、右4个热键的对象</li>
<li>事件的触发需要在update中执行</li>
</ul>
<h5 id="序列帧动画"><a href="#序列帧动画" class="headerlink" title="序列帧动画"></a>序列帧动画</h5><ul>
<li>首先序列帧动画 <code>game.load.spritesheet(&#39;xxx&#39;,&#39;xxx.png&#39;,32,32);</code> 必须使用 <code>spritesheet加载</code> 而且后面的参数是一个序列帧的宽高。必须的(如果你想使用序列帧动画的话)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1、资源加载 - preload</span></div><div class="line">game.load.spritesheet(<span class="string">'dude'</span>,<span class="string">'xxx.png'</span>,<span class="number">32</span>,<span class="number">32</span>);</div><div class="line"><span class="comment">// 2、创建元素 - create</span></div><div class="line"><span class="keyword">var</span> player = game.add.sprite(<span class="number">32</span>, game.width.height, <span class="string">'dude'</span>);</div><div class="line"><span class="comment">// 3、添加序列动画</span></div><div class="line">player.animations.add(<span class="string">'sky'</span>);</div><div class="line">player.animations.play(<span class="string">'sky'</span>, <span class="number">10</span>, <span class="literal">true</span>);</div><div class="line"><span class="comment">// 这个'sky'，相当于资源加载力的key值。</span></div></pre></td></tr></table></figure>
<p>一个正常的序列帧动画、一套动作、执行时间的长短、是否循环。本质的动作下来是一套gif动画的话、可以像上面怎么写↑↑</p>
<p>如果类似于Phaser官网的第一个小游戏那样话( 在特定的条件下、执行这段动画的特定区域 )</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> player;</div><div class="line"><span class="comment">// 1、资源加载 - preload</span></div><div class="line">game.load.spritesheet(<span class="string">'dude'</span>,<span class="string">'xxx.png'</span>,<span class="number">32</span>,<span class="number">32</span>);</div><div class="line"><span class="comment">// 2、创建元素 - create</span></div><div class="line">player = game.add.sprite(<span class="number">32</span>, game.width.height, <span class="string">'dude'</span>);</div><div class="line">player.animations.add(<span class="string">'left'</span>,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">20</span>,<span class="literal">true</span>);</div><div class="line">player.animations.add(<span class="string">'right'</span>,[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],<span class="number">20</span>,<span class="literal">true</span>);</div><div class="line"><span class="comment">// 3、更新 - update</span></div><div class="line"><span class="keyword">if</span>(xxx)&#123;</div><div class="line">  	player.animations.play(<span class="string">'left'</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  	player.animations.play(<span class="string">'right'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://segmentfault.com/a/1190000009212221" target="_blank" rel="external">Phaser中文教程传送门</a></p>
<p>脑壳痛：现在是<em>知其然</em> 而不 <em>知其所以然</em></p>
<p>哎、期望不辜负这大好时光~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Phaser开发H5小游戏]]></title>
      <url>http://ntscshen.com/2017/06/01/%E4%BD%BF%E7%94%A8Phaser-js%E5%BC%80%E5%8F%91%E5%B0%8F%E6%B8%B8%E6%88%8F.html</url>
      <content type="html"><![CDATA[<h3 id="Phaser"><a href="#Phaser" class="headerlink" title="Phaser"></a>Phaser</h3><blockquote>
<p>Phaser一款HTML5游戏框架,旨在帮助开发人员快速制作出强大的跨浏览器的HTML5游戏、与其他游戏框架不同的是,Phaser已经完成了与移动浏览器的融合、唯一的要求就是支持 <code>Canvas</code></p>
</blockquote>
<h3 id="游戏相关的概念"><a href="#游戏相关的概念" class="headerlink" title="游戏相关的概念"></a>游戏相关的概念</h3><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><blockquote>
<p><strong>一个完整的游戏分场景(整个游戏的生命周期)：</strong></p>
<ul>
<li>加载：进度条、加载游戏资源</li>
<li>开始：开始按钮</li>
<li>游戏：游戏中、主体逻辑</li>
<li>结束：得分、排名</li>
</ul>
</blockquote>
<h5 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h5><blockquote>
<p>游戏中生成非常多的元素，我们需要一个对象池来维护他们。</p>
<ol>
<li>尽可能的复用对象，可以减少内存的开销。例如已经移除可视区的对象，重新设置他们的位置，而不是重新创建</li>
<li>如果有确定要销毁的对象，记得显示调用 <code>distroy</code> 方法( 一般的游戏框架不会被销毁killed的对象，他们还可能被”复活” )</li>
</ol>
</blockquote>
<h3 id="正式开始-一"><a href="#正式开始-一" class="headerlink" title="正式开始(一)"></a>正式开始(一)</h3><h5 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> game = <span class="keyword">new</span> Phaser.Game(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight, Phaser.AUTO, <span class="string">''</span>, &#123;</div><div class="line">  <span class="attr">preload</span>: preload,</div><div class="line">  <span class="attr">create</span>: create,</div><div class="line">  <span class="attr">update</span>: update</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 话说是每个场景的本体的生命周期。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">preload</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="comment">// 前两个参数对应画布宽高</span></div><div class="line"><span class="comment">// 第三个参数可以是：Phaser.CANVAS, Phaser.WEBGL, Phaser.AUTO 推荐使用Phaser.AUTO 它会自动尝试使用WebGL, 如果浏览器不支持它,它将使用Canvas</span></div><div class="line"><span class="comment">// 第四个参数：插入Phaser创建的Canvas元素的DOM节点的ID、如果留空,则会依附到body上</span></div><div class="line"><span class="comment">// 最终的参数：包含Phasers基本功能的的引用，他们不是必须的。</span></div></pre></td></tr></table></figure>
<h5 id="定义场景"><a href="#定义场景" class="headerlink" title="定义场景"></a>定义场景</h5><ul>
<li>定义每个场景的内容</li>
<li>将创建添加到游戏实例中 <code>game.state.add</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> states = &#123;</div><div class="line">  <span class="attr">preload</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="comment">// 加载场景</span></div><div class="line">  created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="comment">// 开始场景</span></div><div class="line">  play: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="comment">// 游戏场景</span></div><div class="line">  over: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;<span class="comment">// 结束场景</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">Object</span>.keys(states).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</div><div class="line">  game.state.add(key,states[key])</div><div class="line">&#125;);</div><div class="line"><span class="comment">// Object.keys() 返回的是一个对象属性数组</span></div></pre></td></tr></table></figure>
<h5 id="场景串通"><a href="#场景串通" class="headerlink" title="场景串通"></a>场景串通</h5><ul>
<li>具体定义每个场景的生命周期</li>
<li>从一个场景切换到另一个场景</li>
<li>启动游戏</li>
</ul>
<h6 id="每个场景都有自己的生命周期"><a href="#每个场景都有自己的生命周期" class="headerlink" title="每个场景都有自己的生命周期"></a>每个场景都有自己的生命周期</h6><blockquote>
<ul>
<li><code>preload(加载)：</code> 尽管有预加载场景,如果你希望能缩短进入页面时加载的时间,可以分摊一些到其他场景,只需要在其他场景加入 preload 方法即可</li>
<li><code>create(创建)：</code> 如果存在preload方法,则会在加载完毕后执行此方法；否则将在进入该场景时直接执行此方法</li>
<li><code>update(更新)：</code> 跟新周期自动执行的方法</li>
<li><code>render(渲染完成)：</code> 渲染完毕后执行的方法</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 独立的应用场景</span></div><div class="line"><span class="keyword">var</span> states = &#123;</div><div class="line">  	<span class="comment">// 预加载</span></div><div class="line">  	preload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      	<span class="keyword">this</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          	game.stage.backgroundColor = <span class="string">'#000'</span>;<span class="comment">// 设置背景色</span></div><div class="line">          	game.add.text(<span class="number">32</span>, <span class="number">32</span>, <span class="string">'内容信息...'</span>, &#123;<span class="comment">// 设置字体内容</span></div><div class="line">              	fontSize: <span class="string">'32px'</span>,</div><div class="line">              	<span class="attr">fill</span>: <span class="string">'#efe0ce'</span></div><div class="line">          	&#125;);</div><div class="line">          	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">              	game.state.start(<span class="string">'created'</span>);<span class="comment">// 3S后切换到开始场景</span></div><div class="line">          	&#125;,<span class="number">3000</span>);</div><div class="line">      	&#125;</div><div class="line">  	&#125;,</div><div class="line">  	<span class="comment">// 创建完毕后的开始按钮场景</span></div><div class="line">  	created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">  	<span class="comment">// 主流程：游戏场景</span></div><div class="line">  	play: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">  	<span class="comment">// 结束</span></div><div class="line">  	over: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 将对于的场景、添加到游戏中</span></div><div class="line"><span class="built_in">Object</span>.keys(states).forEach(key)&#123;</div><div class="line">  	game.state.add(key, states[key])</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 启动游戏</span></div><div class="line">game.state.start(<span class="string">'preload'</span>);</div></pre></td></tr></table></figure>
<h3 id="正式开始-二-资源加载"><a href="#正式开始-二-资源加载" class="headerlink" title="正式开始(二) 资源加载"></a>正式开始(二) 资源加载</h3><h5 id="物理"><a href="#物理" class="headerlink" title="物理"></a>物理</h5><ul>
<li>开启Arcade物理系统  <code>game.physics.startSystem(Phaser.Physics.ARCADE);</code></li>
<li>添加组 <code>platforms = game.add.group();</code></li>
<li><code>platforms.enableBody = true;</code> 为组中的任何对象启动物理引擎</li>
<li><code>ground1 = platforms.create(window.innerWidth - 600, 400, &#39;ground&#39;);</code> 在组中添加内容</li>
<li><code>ground3.scale.setTo(3.5, 3);</code> 缩放以适应游戏大小</li>
<li><code>game.physics.arcade.enable(player);</code>  启用物理引擎</li>
<li><code>player.body.collideworldBounds = true;</code>  如果这是真实的，一个物体可以被设置为与世界范围的碰撞和反弹回这个世界。否则它会离开这个世界。</li>
<li><code>player.animations.add(&#39;left&#39;,[0,1,2,3],10,true)</code>  序列帧动画、在update中使用 <code>player.animations.play(&#39;left&#39;)</code> 启动</li>
<li>碰撞检测必加在update中 <code>game.physics.arcade.collide(player, platforms)</code></li>
</ul>
<p>1、按钮</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6数组的扩展]]></title>
      <url>http://ntscshen.com/2017/05/05/ES6%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95.html</url>
      <content type="html"><![CDATA[<h1 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h1><p>Array.from被设计的初衷就是快速便捷的基于其他对象创建新数组</p>
<blockquote>
<ul>
<li><strong>MDN：</strong> 从一个类数组或可迭代的对象中创建一个新的数组实例</li>
<li><strong>人话：</strong> 只要对象是”类数组” 或 有迭代器( 能够被遍历 ), <code>Array.from</code> 就能把它变成一个数组( 返回新数组,不改变原对象 )</li>
</ul>
</blockquote>
<p>语法: <em>Array.from(arrayLike,[, mapFn[, thisArg]])`</em></p>
<ul>
<li><code>arrayLike</code> ( <strong>必选</strong> ): 类数组对象</li>
<li><code>mapFn</code> ( 可选 ): 加工函数,新生成的数组会经过该函数的加工在返回</li>
<li><code>thisArg</code> ( 可选 ): 执行mapFn函数时的this值</li>
<li>返回值：一个新的Array实例</li>
</ul>
<blockquote>
<ol>
<li>类数组对象 ( 拥有一个length属性和若干索引属性的任意对象 )</li>
<li>可遍历对象 ( 你可以从它身上迭代出若干个元素的对象 )</li>
<li>拥有迭代器的对象: obj对象、String、arguments、Set、Map等</li>
</ol>
<p>注：可选参数 <code>mapFn</code> ,让你可以在最后生成的数组上再执行一次 <code>map</code> 方法后再返回。也就是说 <code>Array.from(obj, mapFn, thisArg)</code> 就相当于 <code>Array.from(obj).map(mapFn, thisArg)</code> 。</p>
</blockquote>
<p>我们来看看具体的用法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String</span></div><div class="line"><span class="built_in">Array</span>.from(<span class="string">'foo'</span>);<span class="comment">// ["f", "o", "o"]</span></div><div class="line"><span class="comment">// NodeList对象</span></div><div class="line"><span class="keyword">let</span> oP = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</div><div class="line"><span class="built_in">Array</span>.from(oP).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(el);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// arguments: 天生的类数组对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">// [1, 2, 3]</span></div><div class="line"><span class="comment">// 类数组</span></div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">    <span class="string">"0"</span>: <span class="string">"a"</span>,</div><div class="line">    <span class="string">"1"</span>: <span class="string">"b"</span>,</div><div class="line">    <span class="string">"2"</span>: <span class="string">"c"</span>,</div><div class="line">    <span class="attr">length</span>: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(obj);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'转换前的数据类型：'</span> + <span class="built_in">Object</span>.prototype.toString.call(obj));</div><div class="line"></div><div class="line"><span class="keyword">let</span> ary = <span class="built_in">Array</span>.from(obj);</div><div class="line"><span class="built_in">console</span>.log(ary);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'转换后的数据类型：'</span> + <span class="built_in">Object</span>.prototype.toString.call(ary));</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.from(obj, <span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(value, index, <span class="keyword">this</span>, <span class="built_in">arguments</span>.length);</div><div class="line">	<span class="keyword">return</span> value * index; <span class="comment">// 必须指定返回值,否则返回undefined</span></div><div class="line">&#125;, obj);</div><div class="line"><span class="comment">// 如果不用指定this,mapFn完全可以使用箭头函数代替</span></div><div class="line"><span class="built_in">Array</span>.from(obj, (value, index) =&gt; <span class="built_in">console</span>.log(value, index));</div></pre></td></tr></table></figure>
<p>扩展一个重要的场景,比如生成一个从0到指定数字的新数组,Array.from可以轻易做到</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: <span class="number">10</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> index;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// Array.from(&#123;length: 10&#125;, (value, index) =&gt; index);</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Chrome</th>
<th>Firefox(Gecko)</th>
<th>Edge</th>
<th>IE</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td>45</td>
<td>32</td>
<td>Yes</td>
<td>未实现</td>
<td>Yes</td>
<td>9.0</td>
</tr>
</tbody>
</table>
<p>如需更好的支持低版本浏览器,请参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Polyfill" target="_blank" rel="external">polyfill</a> </p>
<h1 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h1><blockquote>
<p>用来判断一个变量是否数组类型</p>
</blockquote>
<h1 id="Array方法"><a href="#Array方法" class="headerlink" title="Array方法"></a>Array方法</h1><blockquote>
<p>数组原型提供的方法非常多,主要分成三种：</p>
</blockquote>
<ul>
<li>一种会改变自身值( <strong>9</strong> )</li>
<li>一种不会改变自身( <strong>9</strong> )</li>
<li>一种是遍历方法( <strong>12</strong> )</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.getOwnPropertyNames(<span class="built_in">Array</span>.prototype);<span class="comment">// 获取Array.prototype上的所有方法</span></div></pre></td></tr></table></figure>
<h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><p>forEach、every、some、filter、map、reduce、reduceRight</p>
<p>ES6新增：entries、find、findIndex、keys、values</p>
<h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><blockquote>
<p>forEach() 方法指定数组的每项元素都执行一次传入的函数,返回值为undefined</p>
</blockquote>
<p>语法：arr.forEach(fn, thisArg);</p>
<p>fn表示在数组每一项上执行的函数,接受三个参数：</p>
<ul>
<li>value 当前正在被处理的元素的值</li>
<li>index 当前元素的数组索引</li>
<li>array 数组本身</li>
</ul>
<p>forEach将为数组中每一项执行一次fn函数,那些已删除,新增或者从未复制的项将被跳过( 但不包括值为undefined的项 )</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">'shen'</span>&#125;;</div><div class="line"><span class="keyword">var</span> sReturn = array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>)</span>&#123;</div><div class="line">  	array[index] = value * value;</div><div class="line">  	<span class="comment">// console.log(this.name);</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(array); <span class="comment">// [1, 9, 25] 原数组被改变</span></div><div class="line"><span class="built_in">console</span>.log(sReturn); <span class="comment">// undefined 返回值</span></div></pre></td></tr></table></figure>
<p>使用forEach循环 需要注意的几点</p>
<ul>
<li>forEach无法直接遍历对象 ( <strong>通过call方式遍历类数组对象</strong> ) </li>
<li>forEach无法再IE中使用,只是在Firefox和Chrome中实现了该方法</li>
<li>forEach无法使用break、continue跳出循环,使用return时,效果和在for循环中使用continue一致</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oFunction = &#123;</div><div class="line">  	<span class="number">0</span>:<span class="number">1</span>,</div><div class="line">  	<span class="number">1</span>:<span class="number">3</span>,</div><div class="line">  	<span class="number">2</span>:<span class="number">5</span>,</div><div class="line">  	<span class="attr">length</span>: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">Array</span>.prototype.forEach.call(oFunction,<span class="function"><span class="keyword">function</span>(<span class="params">value, index, obj</span>)</span>&#123;</div><div class="line">  	<span class="built_in">console</span>.log(value,index,obj);</div><div class="line">  	obj[index] = value * value;</div><div class="line">&#125;,oFunction);</div></pre></td></tr></table></figure>
<p>兼容写法请参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#兼容旧环境（Polyfill）" target="_blank" rel="external">Polyfill</a>。</p>
<h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><blockquote>
<p>map() 方法遍历数组,使用传入函数处理每个元素,并返回函数的返回值组成的新数组</p>
<p>只支持数组</p>
<p><strong>参数介绍同 forEach 方法的参数介绍。</strong></p>
</blockquote>
<p>语法：arr.map(fn, thisArg); map方法使用其提供函数的每次返回结果生成一个新的数组</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var array = [1, 4, 9];</div><div class="line">var roots = array.map(function(num)&#123;</div><div class="line">    return num * 2;</div><div class="line">&#125;);</div><div class="line"># 鸭式辨型</div><div class="line">// NodeList</div><div class="line">var elems = document.querySelectorAll('select option:checked');</div><div class="line">var values = Array.prototype.map.call(elems, function(obj)&#123;</div><div class="line">  	return obj.value;</div><div class="line">&#125;);</div><div class="line">// 字符串处理</div><div class="line">var map = Array.prototype.map;</div><div class="line">var array = map.call('Hello 中国',function(x)&#123;</div><div class="line">  	return x.charCodeAt(0);</div><div class="line">&#125;);</div><div class="line">console.log(array);</div><div class="line">// 字符串反转</div><div class="line">var str = '12345';</div><div class="line">var output = Array.prototype.map.call(str, function(x)&#123;</div><div class="line">  	return x;</div><div class="line">&#125;).reverse().join('/');</div><div class="line">console.log(output);</div></pre></td></tr></table></figure>
<p>兼容写法请参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Compatibility" target="_blank" rel="external">Polyfill</a>。</p>
<h4 id="forEach和map-区别"><a href="#forEach和map-区别" class="headerlink" title="forEach和map 区别"></a>forEach和map 区别</h4><blockquote>
<p><strong>map()</strong> 方法返回：原数组中的每个元素调用一个指定方法后返回值组成的新数组。返回一个新的Array</p>
<p><strong>forEach</strong> 为数组中的每个元素执行一次回调函数,返回值 “ <strong>undefined</strong> ”。没有返回值,只是针对每个元素调用func</p>
</blockquote>
<h5 id="every"><a href="#every" class="headerlink" title="every"></a>every</h5><blockquote>
<p>array.every(callback[, thisArg]) </p>
<p><strong>every方法用于检验数组中的每一项是否符合某个条件,若符合则返回true,反之返回false。</strong></p>
<p>只要其中一个函数返回值为false,那么该方法的结果为false,如果全部返回true,那么该方法的结果才为true</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function isBigEnough(element, index, array)&#123;</div><div class="line">  	return element &gt;= 10;</div><div class="line">&#125;</div><div class="line">[12, 5, 8, 120, 45].every(isBigEnough);// false</div><div class="line">[12, 54, 18, 289, 98].every(isBigEnough);// true</div><div class="line"># 简写</div><div class="line">[12, 5, 8, 120, 45].every(elem =&gt; elem &gt;= 10);</div><div class="line">[12, 54, 18, 289, 98].every(elem =&gt; elem &gt;= 10);</div><div class="line"># 鸭式辨型</div><div class="line">var oFunction = &#123;</div><div class="line">  	0: 10,</div><div class="line">  	1: 8,</div><div class="line">  	2: 25,</div><div class="line">  	length: 3</div><div class="line">&#125;;</div><div class="line">var bool = Array.prototype.every.call(oFunction,function(value, index)&#123;</div><div class="line">  	return value &gt;=  8;</div><div class="line">&#125;,oFunction);</div><div class="line">console.log(bool);</div></pre></td></tr></table></figure>
<p>兼容写法请参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every#Compatibility" target="_blank" rel="external">Polyfill</a>。</p>
<h5 id="some"><a href="#some" class="headerlink" title="some"></a>some</h5><blockquote>
<p>some() 方法刚好痛every() 方法相反,some测试数组元素时,只要有一个函数返回值为true,则返回true,若全部返回false,则方法返回false</p>
</blockquote>
<p>兼容写法请参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some#Compatibility" target="_blank" rel="external">Polyfill</a>。</p>
<h5 id="every和some区别"><a href="#every和some区别" class="headerlink" title="every和some区别"></a>every和some区别</h5><blockquote>
<p>every：返回一个boolean，判断每个元素是否符合func条件</p>
<p>some：返回一个boolean，判断是否有元素符合func条件</p>
</blockquote>
<h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><blockquote>
<p>返回一个符合func条件的元素数组</p>
<p>filter() 方法使用传入的函数测试所有元素,并返回所有通过测试的元素组成的新数组。<strong>它就好比一个过滤器,筛掉不符合条件的元素</strong></p>
<p>语法：arr.filter(fn, thisArg);</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">18</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">35</span>, <span class="number">99</span>];</div><div class="line"><span class="keyword">var</span> array2 = array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> value &gt; <span class="number">20</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(array2);</div></pre></td></tr></table></figure>
<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><blockquote>
<p>reduce() 方法接受一个方法作为累加器,数组中的每个值( 从左至右 )开始合并,最终为一个值</p>
<p>语法：arr.reduce(fn, initialValue);</p>
<p>fn表示在数组每一项上执行的函数,接受四个参数</p>
<ul>
<li>previousValue 上一次调动回调返回的值</li>
<li>value 数组中读取被处理元素的值</li>
<li>index 当前元素在数组中的索引</li>
<li>array 数组自身</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> s = array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previousValue, value, index, array</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> previousValue * value;</div><div class="line">&#125;,<span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(s);</div></pre></td></tr></table></figure>
<h5 id="find和findIndex-ES6"><a href="#find和findIndex-ES6" class="headerlink" title="find和findIndex(ES6)"></a>find和findIndex(ES6)</h5><blockquote>
<p>find() 返回数组中第一个满足条件的元素 ( 如果有的话 ),如果没有,则返回undefined</p>
<p>findIndex() 返回数组中第一个满足条件的元素的索引 ( 如果有的话 ),否则返回-1</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">value, index, array</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> value %<span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">value, index, array</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> value &gt; <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(array.find(f));<span class="comment">// 8</span></div><div class="line"><span class="built_in">console</span>.log(array.find(f2));<span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(array.findIndex(f));<span class="comment">// 4</span></div><div class="line"><span class="built_in">console</span>.log(array.findIndex(f2));<span class="comment">// -1</span></div></pre></td></tr></table></figure>
<h5 id="Kes-ES6"><a href="#Kes-ES6" class="headerlink" title="Kes( ES6 )"></a>Kes( ES6 )</h5><blockquote>
<p>keys() 方法返回一个数组索引的迭代器</p>
</blockquote>
<p><strong>Array.prototype</strong> 本身就是一个数组,并且他的长度为0</p>
<ul>
<li>Array.prototype.map、Array.prototype.every只支持数组和行似数组的对象</li>
<li>forEach不能退出循环,只能通过return来进入到下一个元素的遍历中( 相当于for循环的continue ),IE中没有实现该方法</li>
<li>for、forEach、do/while 只支持数组</li>
<li>for in , $.each,即支持对象也支持数组遍历</li>
<li>$.each循环只能通过 return false来退出循环,使用return 或 return true 将跳过一个元素,继续执行后面的循环</li>
</ul>
<h5 id="Array-prototype-共性"><a href="#Array-prototype-共性" class="headerlink" title="Array.prototype 共性"></a><code>Array.prototype</code> 共性</h5><ul>
<li>所有插入元素的方法,比如push、unshift,一律返回数组新的长度</li>
<li>所有删除元素的方法,比如pop、shift、splice一律返回删除的元素,或者返回删除的多个元素组成的数组</li>
<li>部分遍历方法,比如 <code>forEach</code> 、 <code>map</code> 、 <code>filter</code>  、 <code>find</code> 、 <code>findIndex</code> 、 <code>every</code>  ，都包含了 <code>function(value, index, array){}</code> 和 <code>thisArg</code> 这样两个形参</li>
<li>Array.prototype 的所有方法均具有鸭式辨型这种神奇的特性。它们不止可以用来处理数组对象,还可以处理类数组对象</li>
<li>Array.prototype本身就是一个数组，并且长度为0</li>
</ul>
<p>forEach</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</div><div class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>)</span>&#123;</div><div class="line">  	<span class="built_in">console</span>.log(<span class="string">'value值:'</span> + value);</div><div class="line">  	<span class="built_in">console</span>.log(<span class="string">'索引值:'</span> + index)</div><div class="line">  	<span class="built_in">console</span>.log(<span class="string">'数组:'</span> + array);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h6 id="map-创建新数组-其结果是该数组中的每个元素调用一个提供的函数"><a href="#map-创建新数组-其结果是该数组中的每个元素调用一个提供的函数" class="headerlink" title="map 创建新数组,其结果是该数组中的每个元素调用一个提供的函数"></a>map 创建新数组,其结果是该数组中的每个元素调用一个提供的函数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> doubles = array.map(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> num * <span class="number">2</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(doubles);</div><div class="line"><span class="comment">// 求数组中每个元素的平方根</span></div><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>];</div><div class="line"><span class="keyword">var</span> roots = numbers.map(<span class="built_in">Math</span>.sqrt);</div><div class="line"><span class="built_in">console</span>.log(roots);</div><div class="line"><span class="comment">// 使用map重新格式化数组中的对象</span></div><div class="line"><span class="comment">// 将一个包含对象的数组用以创建一个包含重新格式化对象的新数组</span></div><div class="line"><span class="keyword">var</span> ary = [&#123;</div><div class="line">  	<span class="attr">key</span>: <span class="number">1</span>,</div><div class="line">  	<span class="attr">value</span>: <span class="number">10</span></div><div class="line">&#125;,&#123;</div><div class="line">  	<span class="attr">key</span>: <span class="number">2</span>,</div><div class="line">  	<span class="attr">value</span>: <span class="number">20</span></div><div class="line">&#125;,&#123;</div><div class="line">  	<span class="attr">key</span>: <span class="number">3</span>,</div><div class="line">  	<span class="attr">value</span>: <span class="number">30</span></div><div class="line">&#125;];</div><div class="line"><span class="keyword">var</span> arys = ary.map(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  	<span class="keyword">var</span> rObj = &#123;&#125;;</div><div class="line">  	rObj[obj.key] = obj.value * <span class="number">2</span>;</div><div class="line">  	<span class="keyword">return</span> rObj</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arys);</div><div class="line"><span class="comment">// 获取和遍历 querySelectorAll 得到的动态对象集合</span></div><div class="line"><span class="keyword">var</span> elems = <span class="built_in">document</span>.querySelectorAll(<span class="string">'select option:checked'</span>);</div><div class="line"><span class="keyword">var</span> values = <span class="built_in">Array</span>.prototype.map.call(elems, <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> obj.value;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>filter</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>];</div><div class="line"><span class="keyword">var</span> array2 = array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> value &gt; <span class="number">5</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(array2);</div></pre></td></tr></table></figure>
<h6 id="find-返回数组中满足提供的测试函数的第一个元素的值。否则返回-undefined"><a href="#find-返回数组中满足提供的测试函数的第一个元素的值。否则返回-undefined" class="headerlink" title="find() 返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined"></a>find() 返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示例1</span></div><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">value, index, array</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> value % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">  	<span class="comment">// return value &gt;= 5</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(array.find(foo));</div><div class="line"><span class="comment">// 示例2:用对象的属性查找数组里的对象</span></div><div class="line"><span class="keyword">var</span> inventory = [</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">'apples'</span>, <span class="attr">quantity</span>: <span class="number">2</span>&#125;,</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">'bananas'</span>, <span class="attr">quantity</span>: <span class="number">0</span>&#125;,</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">'cherries'</span>, <span class="attr">quantity</span>: <span class="number">5</span>&#125;</div><div class="line">];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findCherries</span>(<span class="params">fruit</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> fruit.name === <span class="string">'apples'</span>;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(inventory.find(findCherries));</div></pre></td></tr></table></figure>
<h6 id="indexOf-找到一个元素的位置"><a href="#indexOf-找到一个元素的位置" class="headerlink" title="indexOf() 找到一个元素的位置"></a>indexOf() 找到一个元素的位置</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回在数组中可以找到給定元素的第一个索引,如果不存在,则返回 -1</span></div><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">if</span>(array.indexOf(<span class="number">7</span>) === <span class="number">-1</span>)&#123;</div><div class="line">  	alert(<span class="string">'哈哈、没有找到'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 找出指定元素出现的所在位置</span></div><div class="line"><span class="comment">// 返回在数组中可以找到給定元素的第一个索引,如果不存在,则返回 -1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>];</div><div class="line"><span class="keyword">var</span> indices = [];</div><div class="line"><span class="keyword">var</span> idx = array.indexOf(<span class="string">'a'</span>)</div><div class="line"><span class="keyword">while</span>(idx !== <span class="number">-1</span>)&#123;</div><div class="line">  	indices.push(idx);</div><div class="line">  	idx = array.indexOf(<span class="string">'a'</span>, idx + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(indices);</div></pre></td></tr></table></figure>
<h6 id="includes-判断一个元素是否存在于数组中"><a href="#includes-判断一个元素是否存在于数组中" class="headerlink" title="includes() 判断一个元素是否存在于数组中"></a>includes() 判断一个元素是否存在于数组中</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用来判断当前数组是否包含某个指定的值,如果是,则返回true,否则返回false</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>); <span class="comment">// true</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	<span class="built_in">console</span>.log([].include.call(<span class="built_in">arguments</span>, <span class="string">'a'</span>));</div><div class="line">&#125;)(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)；</div></pre></td></tr></table></figure>
<h6 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h6><ul>
<li>for( 只能遍历数组 )和do while( 只能遍历数组 )</li>
<li>forEach、map、every ( Array.prototype下的所有方法,它们不止可以用来处理数组对象,还可以处理类数组对象 )</li>
<li>$.each()</li>
<li>for in</li>
</ul>
<p>ECMAScript2015中Array引进的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#规范" target="_blank" rel="external">新方法</a> forEach()和map()</p>
<h6 id="数组内置遍历方法-forEach-和map"><a href="#数组内置遍历方法-forEach-和map" class="headerlink" title="数组内置遍历方法 forEach()和map()"></a>数组内置遍历方法 forEach()和map()</h6><blockquote>
<p>最近再扒数组中的API</p>
<p>forEach()和map()方法是ECMAScript5.1中Array引进的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#规范" target="_blank" rel="external">新方法</a> </p>
</blockquote>
<h6 id="forEach-遍历"><a href="#forEach-遍历" class="headerlink" title="forEach - 遍历"></a>forEach - 遍历</h6><p>forEach循环数组,对原数据进行操作,改变原数组</p>
<ul>
<li>总是返回 undefined、并且不可链式调用。</li>
<li>没有办法终止或者跳出forEach循环。如果你需要这样,那么使用forEach()方法是个错误的决定。</li>
<li>如果您正在测试一个数组里的元素是否符合某种条件,且需要返回一个布尔值的话,那么可以使用 <code>Array.every</code> 或 <code>Array.some</code> 。当然也可以使用ES6里的新方法 <code>find()</code> 或 <code>findIndex()</code> 他们也可被用于真值测试的提前终止。</li>
<li>forEach无法使用break, continue跳出循环,使用return时,效果等同于for循环的continue。</li>
<li>如果使用箭头函数表达式传入函数参数,thisArg参数会被忽略,因为箭头函数在词法上绑定了this值( 箭头函数绑定的this无法被修改 )</li>
<li>如果給forEach传递了thisArg参数,当调用时,它将被传给callback函数,作为它的this值。如果省略了thisArg参数,或者赋值为null或undefined,则this指向全局对象</li>
<li>forEach遍历的范围在第一次调用callback前就已经确定。调用forEach后添加到数组中的项不会被callback访问到。如果已经存在的值被改变,则传递給callback的值是forEach遍历到他们那一刻的值。已删除的项不会被遍历到。如果已访问的元素在迭代时被删除了,之后的元素将被跳过</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'原数组1：'</span> + ary);</div><div class="line"><span class="keyword">var</span> res = ary.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</div><div class="line">  	<span class="comment">// item: 数组当前项的值</span></div><div class="line">  	<span class="comment">// index: 数组当前项的索引</span></div><div class="line">  	<span class="comment">// array: 数组对象本身</span></div><div class="line">  	array[index] = item * <span class="number">10</span>;</div><div class="line">&#125;, ary);</div><div class="line"><span class="comment">// ary(可选)。当执行回调函数时用作this的值</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'返回值：'</span> + res);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'原数组2：'</span> + ary);</div></pre></td></tr></table></figure>
<p>兼容写法请参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#兼容旧环境（Polyfill）" target="_blank" rel="external">Polyfill</a>。</p>
<h6 id="map-映射"><a href="#map-映射" class="headerlink" title="map - 映射"></a>map - 映射</h6><p>创建新数组</p>
<ul>
<li>使用map方法处理数组时,数组元素的范围是在callback方法第一次调用之前就已经确定了。在map方法执行的过程中：原数组中新增加的元素将不会被callback访问到; 若已经存在的元素被改变或删除了，则他们的传递到callback的值是map方法遍历到它们的那一时刻的事件; 而被删除的元素将不会被访问到</li>
</ul>
<p>基本用法类似forEach、需要注意的是: <strong>回调函数需要有return值,否则新数组都是 undefined</strong> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];  </div><div class="line"><span class="keyword">var</span> res = ary.map(<span class="function"><span class="keyword">function</span> (<span class="params">item,index,input</span>) </span>&#123;  </div><div class="line">    <span class="keyword">return</span> item*<span class="number">10</span>;  </div><div class="line">&#125;)  </div><div class="line"><span class="built_in">console</span>.log(<span class="string">'新数组：'</span> + res);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'原数组：'</span> + ary);</div></pre></td></tr></table></figure>
<p>兼容写法请参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Compatibility" target="_blank" rel="external">Polyfill</a>。</p>
<p>forEach()和map()两个方法都是ECMAScript2015中Array引进的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#规范" target="_blank" rel="external">新方法</a> </p>
<p>主要的作用是对数组的每个元素执行一次提供的函数。</p>
<p>区别</p>
<ol>
<li>forEach() 返回值是 undefined,不可以链式调用</li>
<li>map() 返回一个新数组,原数组不会改变</li>
<li>没有办法终止或者跳出forEach()、map()循环,除非抛出异常,因此想执行一个数组是否满足什么条件,返回布尔值,可以用一般的for循环实现,或者用Array.every()或者Array.some()或者Array.filter() <strong>使用for循环过滤一遍搞定的事情,偏偏再用every之类的再次过滤,这就有点愚蠢了</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 案例1 反转字符串(map、call)方法的融合使用</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'12345'</span>;</div><div class="line"><span class="built_in">Array</span>.prototype.map.call(str,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> item;</div><div class="line">&#125;).reverse().join(<span class="string">''</span>);</div><div class="line"><span class="comment">// 案例2 如果数组在迭代时被修改了,则其他元素会被跳过</span></div><div class="line"><span class="comment">// 当到达含值"two"的项时,整个数组的第一项被移除了,这就导致所有剩下的内容,集体向前移了一个位置。因为元素"for"现在在数组的第三个位置,"three"会被跳过。</span></div><div class="line"><span class="keyword">var</span> words = [<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>,<span class="string">"four"</span>];</div><div class="line">words.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">  	<span class="built_in">console</span>.log(item);</div><div class="line">  	<span class="keyword">if</span>(item === <span class="string">"two"</span>)&#123;</div><div class="line">      	words.shift();</div><div class="line">  	&#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// one</span></div><div class="line"><span class="comment">// two</span></div><div class="line"><span class="comment">// four</span></div></pre></td></tr></table></figure>
<p>map()、forEach()、for三个循环在什么时候使用比较合适</p>
<ul>
<li>如果需要返回一个数组,使用map()比较合适</li>
<li>有时候循环并不需要全部遍历完,需要中途跳出break、这要使用for( 当然也可以使用、这就需要使用filter()、some()… 进行二次过滤( <strong>可读性会好点</strong> ) )</li>
<li>map()和forEach() 适合在按准许全部遍历的时候使用</li>
</ul>
<hr>
<p><a href="https://github.com/ntscshen/blog/issues/2" target="_blank" rel="external">数组内置遍历方法 forEach()和map()</a></p>
<p>REM</p>
<p><code>document.documentElement.style.fontSize = 100 * (clientWidth / 640) + &#39;px&#39;</code></p>
<ul>
<li>clientWidth：当前用户屏幕</li>
<li>640：设计稿大小</li>
<li>100：方便计算</li>
<li>rem：CSS3新增的一个相对单位、根据html( DOM结构的根节点元素 )的font-size大小来变化</li>
</ul>
<blockquote>
<p>以640px的设计布局为基准,将html设置为font-size: 100px;( 为了方便计算 ) 1rem = 100px; 可以将大部分px单位除以100就可以直接改成rem单位  122px = 1.22rem;   18px = 0.18rem;</p>
<p>640宽度的设计稿在Iphone6S( 750宽度 )</p>
<p>设计稿宽度为640px;</p>
<p>物理设备宽度为750px( Iphone6S );</p>
<p>有一个元素在设计稿上的宽是 50</p>
<p>那么根据比率计算出实际设备里面的宽度 ？58.6px = 3.6621rem; </p>
<p><code>默认1rem = 16px</code><br>$$<br>(750/640) * 50 = 58.6 = 3.6621rem; 1rem = 16px;<br>$$</p>
<p>1rem = 16px;</p>
<p>(750 / 640) * 50 / 16 = 3.6621rem;</p>
<p>1rem = 100px;</p>
<p>(750 / 640) * 50 / 100 = 0.5859rem;</p>
<p>修改的值为fontSize： <code>(750 / 640) * 50 / ??? = 0.5859rem;</code> </p>
<p>(750 / 640) * 50 / ? = .5rem;</p>
<p>(750 / 640) * 100 = fontSize;</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设计稿宽度为640px;</span></div><div class="line"><span class="comment">// 物理设备宽度为750px( Iphone6S );</span></div><div class="line"><span class="comment">// 有一个元素在设计稿上的宽是 50</span></div><div class="line"><span class="comment">// 那么根据比率计算出实际设备里面的宽度 ？</span></div><div class="line">(<span class="number">750</span> / <span class="number">640</span>) * <span class="number">50</span> / <span class="number">16</span> = <span class="number">3.6621</span>rem;</div><div class="line"><span class="comment">// 如果默认的fontSize不修改、则如此计算</span></div><div class="line">(<span class="number">750</span> / <span class="number">640</span>) * <span class="number">50</span> / <span class="number">100</span> = <span class="number">0.5859</span>rem;</div><div class="line">(<span class="number">750</span> / <span class="number">640</span>) * <span class="number">50</span> / ? = <span class="number">.5</span>rem;</div></pre></td></tr></table></figure>
<h6 id="Array中的遍历方法-12"><a href="#Array中的遍历方法-12" class="headerlink" title="Array中的遍历方法(12)"></a>Array中的遍历方法(12)</h6><ul>
<li>forEach、map</li>
<li>every、some、filter ( 三种过滤规则 - 鸭式辨型 类似 )</li>
<li>reduce、reduceRight</li>
<li>find、findIndex、keys、values、entries( <strong>ES6</strong> )</li>
</ul>
<h6 id="every-1"><a href="#every-1" class="headerlink" title="every"></a>every</h6><blockquote>
<p><strong>every()</strong> 方法测试数组的所有元素是否都通过了指定函数的测试</p>
<p>arr.every(callback[, thisArg]);</p>
</blockquote>
<ul>
<li>every不会改变原数组</li>
<li>every方法为数组中的每个元素执行一次callback方法，直到它找到一个使callback返回 <code>false</code> ( 转化为布尔值false ) 的元素。如果发现了一个这样的元素，every方法将会立即返回false。否则，callback为每一个元素返回true，every就会返回true</li>
<li>callback只会为那些已经被赋值的“ <strong>索引</strong> ” 调用。不会为那些已经被删除或者从来没被赋值的索引调用。</li>
<li>every遍历的元素范围在第一次调用callback之前就已确定了。在调用every之后添加到数组中的元素不会被callback访问到。如果数组中存在的元素被更改,则他么传入callback的值是every访问到他们那一刻的值。那些被删除的元素或从来未被复制的元素将不会被访问到</li>
<li>every提供一个thisArg参数，如果省略该参数，则callback被调用时的this值，在非严格模式下为全局对象，在严格模式下传入undefined</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">item, index, array</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (item &gt;= <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> passed = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough);</div><div class="line"><span class="built_in">console</span>.log(passed);</div><div class="line"><span class="comment">// 鸭式辨型</span></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">  	<span class="number">0</span>: <span class="number">10</span>,</div><div class="line">  	<span class="number">1</span>: <span class="number">8</span>,</div><div class="line">  	<span class="number">2</span>: <span class="number">25</span>,</div><div class="line">  	<span class="attr">length</span>: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> bool = <span class="built_in">Array</span>.prototype.every.call(o,<span class="function"><span class="keyword">function</span>(<span class="params">value, index, obj</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> value &gt; <span class="number">10</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(bool);</div></pre></td></tr></table></figure>
<p>兼容写法请参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every#Compatibility" target="_blank" rel="external">Polyfill</a> </p>
<h6 id="some-1"><a href="#some-1" class="headerlink" title="some"></a>some</h6><blockquote>
<p>some()：测试数组中的 <strong>‘某些元素’</strong> 是否通过了指定函数的测试</p>
<p>every()：测试数组的 <strong>‘所有元素’</strong> 是否都通过了指定函数的测试</p>
</blockquote>
<ul>
<li>some为数组中的每一个元素执行一次callback函数，直到找到一个使得callback返回一个“真值” ( 即可转换为布尔值true的值 )。如果找到这样的值，some将会立即返回true。否则，some返回false。</li>
<li>every方法为数组中的每一个元素执行一次callback方法，直到它找到一个使callback返回 <code>false</code> ( 转化为布尔值false ) 的元素。如果发现了一个这样的元素，every方法将会立即返回false。否则，callback为每一个元素返回true，every就会返回true</li>
</ul>
<p>兼容写法请参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some#Compatibility" target="_blank" rel="external">Polyfill</a> </p>
<h6 id="filter-1"><a href="#filter-1" class="headerlink" title="filter"></a>filter</h6><blockquote>
<p>filter()：使用指定的函数测试所有元素，并创建一个包含所有通过测试的元素的新数组</p>
</blockquote>
<ul>
<li>callback 返回true表示保留该元素( 通过测试 )</li>
<li>filter为数组中的每个元素调用一次callback函数，并利用所有使得callback返回true的元素创建一个新数组。</li>
<li>callback只会在已经赋值的索引上被调用，对于那些已经被删除或者从未被赋值的索引不会被调用</li>
<li>那些没有通过callback测试的元素会被跳过，不会被包含在新数组中。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> filtered = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].filter(<span class="function"><span class="keyword">function</span>(<span class="params">el, index, array</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> el &gt; <span class="number">10</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(filtered);</div></pre></td></tr></table></figure>
<p>兼容写法请参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Compatibility" target="_blank" rel="external">Polyfill</a> </p>
<h6 id="reduce-1"><a href="#reduce-1" class="headerlink" title="reduce"></a>reduce</h6><blockquote>
<p>reduce() 方法接受一个方法作为累加器，数组中的每个值( 从左到右 ) 开始合并，最终为一个值。</p>
<p>reduce() 方法对累加器和数组中的每个元素( 从左到右 )应用一个函数，将其减少为单个值。</p>
</blockquote>
<p>语法1：arr.reduce(fn, initialValue);</p>
<p>语法2：arr.reduce(callback,[initialValue]);</p>
<p>参数 callback：执行数组中每个值的函数，包含四个参数</p>
<p>accumulator：上一次调用回调返回的值，或者是提供的初始值( initialValue )</p>
<p>currentValue：数组正在处理的元素</p>
<p>currentIndex：数据中正在处理的元素索引，如果提供了 initialVlaue，从0开始; 否则从1开始</p>
<p>initialValue ( 可选 ) 用于第一次调用 callback 的第一个参数</p>
<p>array</p>
<ul>
<li>如果initialValue在调用reduce时被提供，那么第一个previousValue将等于initialValue，此时item等于数组中的第一个值</li>
<li>如果initialValue未被提供，那么previousValue等于数组中的第一个值，item等于数组中的第二个值。</li>
<li>reduce 为数组中的每一个元素一次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值 accumulator ( 或者上一次回调函数的返回值 )，当前元素值 currentValue，当前索引 currentIndex，调用 reduce的数组</li>
<li>回调函数第一次执行时，accumulator 和 currentValue 的取值有两种情况：调用 reduce 时提供 initialValue，</li>
</ul>
<blockquote>
<p><strong>注</strong>：不提供 initialValue，reduce会从索引1的地方开始执行 callback 方法，跳过第一个索引。</p>
<p>提供 initialValue，从索引0开始。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var array = [1, 2, 3, 4];</div><div class="line">var s = array.reduce(function(previousValue, value, index, array)&#123;</div><div class="line">  	return previousValue * value;</div><div class="line">&#125;,1)</div><div class="line">console.log(s);// 乘积</div><div class="line"># 计算数组中各个值出现的次数</div><div class="line">var names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];</div><div class="line">var countedNames = names.reduce(function(allNames, name)&#123;</div><div class="line">  	if(name in allNames)&#123;</div><div class="line">      	allNames[name]++;</div><div class="line">  	&#125;else&#123;</div><div class="line">      	allNames[name] = 1;</div><div class="line">  	&#125;</div><div class="line">    return allNames;</div><div class="line">&#125;, &#123;&#125;);</div><div class="line">console.log(countedNames);</div></pre></td></tr></table></figure>
<h6 id="find和findIndex"><a href="#find和findIndex" class="headerlink" title="find和findIndex"></a>find和findIndex</h6><blockquote>
<p>find()：返回数组中第一个满足条件的元素，如果没有，则返回undefined</p>
<p>findIndex()：返回数组中第一个满足条件的元素的索引，否则返回-1</p>
</blockquote>
<p>语法：arr.find(fn, thisArg), arr.findIndex(fn, thisArg)</p>
<ul>
<li>语法和使用方式与 <code>forEach</code> 十分相似。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">odd</span>(<span class="params">value, index, array</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> value%<span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(array.find(odd));</div><div class="line"><span class="comment">// 用对象的属性查找数组里的对象</span></div><div class="line"><span class="keyword">var</span> inventory = [</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">'apples'</span>, <span class="attr">quantity</span>: <span class="number">2</span>&#125;,</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">'bananas'</span>, <span class="attr">quantity</span>: <span class="number">0</span>&#125;,</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">'cherries'</span>, <span class="attr">quantity</span>: <span class="number">5</span>&#125;</div><div class="line">];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findEl</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> item.name === <span class="string">'apples'</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(inventory.find(findEl));</div></pre></td></tr></table></figure>
<h6 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h6><blockquote>
<p>找到一个元素的位置或者一个元素是否存在于数组中。</p>
<p>返回在数组中可以找到給定元素的第一个索引，如果不存在，则返回-1</p>
</blockquote>
<p>语法：</p>
<p>arr.indexOf(searchElement), </p>
<p>arr.indexOf(searchElement[, fromIndex = 0]);</p>
<p>fromIndex：开始查找的位置。如果该索引值大于或等于数组长度，意味着不会再数组里查找，返回-1。</p>
<p>如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找，以此类推。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 找出指定元素出现的所在位置</span></div><div class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>];</div><div class="line"><span class="keyword">var</span> ary2 = [];</div><div class="line"><span class="keyword">var</span> el = <span class="string">'a'</span>;</div><div class="line"><span class="keyword">var</span> idx = array.indexOf(el);</div><div class="line"><span class="keyword">while</span>(idx != <span class="number">-1</span>)&#123;</div><div class="line">  	ary2.push(idx);</div><div class="line">    idx = array.indexOf(el, idx + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(ary2);</div><div class="line"></div><div class="line"><span class="comment">// 判断一个元素是否存在数组里，不在则跟新数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateAry</span>(<span class="params">ary, el</span>)</span>&#123;</div><div class="line">  	<span class="keyword">if</span>(ary.indexOf(el) === <span class="number">-1</span>)&#123;</div><div class="line">      	ary.push(el);</div><div class="line">      	<span class="built_in">console</span>.log(<span class="string">'新的数组：'</span> + ary);</div><div class="line">  	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ary.indexOf(el) &gt; <span class="number">-1</span>)&#123;</div><div class="line">      	<span class="built_in">console</span>.log(el + <span class="string">'：已经存在 in the ary'</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> veggies = [<span class="string">'potato'</span>, <span class="string">'tomato'</span>, <span class="string">'chillies'</span>, <span class="string">'green-pepper'</span>];</div><div class="line">updateAry(veggies,<span class="string">'ntscshen'</span>);</div><div class="line">updateAry(veggies,<span class="string">'tomato'</span>);</div></pre></td></tr></table></figure>
<h4 id="String方法"><a href="#String方法" class="headerlink" title="String方法"></a>String方法</h4><h6 id="match"><a href="#match" class="headerlink" title="match"></a>match</h6><blockquote>
<p>当一个字符串与一个正则表达式匹配时，match() 方法检索匹配项<br>str.match(regexp)</p>
<ul>
<li>如果正则表达式没有g标志，则str.math() 会返回和 RegExp.exec() 相同的结果</li>
<li>如果正则表达式包含了g标志，则该方法返回一个Array，它包含所有匹配的子字符串而不是匹配对象。如果没有匹配到，则返回null</li>
<li>​regexp：如果传入一个非正则表达式对象，则会隐式地使用new RegExp(obj)将其转换为一个 RexExp。如果未提供任何参数，直接使用match()，那么将会得到一个包含空字符串的Array：[“”];</li>
<li>返回值：array 一个包含了整个匹配结果已经任何括号捕获的匹配结果Array；如果没有匹配项，则返回null</li>
<li>如果正则表达式没有g标志，则str.math() 会返回和 RegExp.exec() 相同的结果</li>
<li>返回的Array拥有一个额外的input属性，该属性包含被解析的原始字符串。</li>
<li>另外还拥有一个index属性，该属性表示匹配结果在原字符串中的所有(从0开始)</li>
<li>match：若是全局匹配，则返回所有匹配的结果组成的数组<br>g：用来在输入字符串中查找尽可能多的匹配<br>i：大小写敏感<h6 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h6><h6 id="search"><a href="#search" class="headerlink" title="search"></a>search</h6><h6 id="split"><a href="#split" class="headerlink" title="split"></a>split</h6></li>
</ul>
</blockquote>
<h6 id="使用正则表达式的方法"><a href="#使用正则表达式的方法" class="headerlink" title="使用正则表达式的方法"></a>使用正则表达式的方法</h6><blockquote>
<p>JS中字符串对正则的支持：<br>match：找到一个或多个正则表达式的匹配<br>search：检索与正则表达式相匹配的值， <strong>g对search无效</strong><br>replace：替换与正则表达式匹配的子串<br>split：把字符串分割为字符串数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.location.href.match(<span class="regexp">/le.com/g</span>,)</div><div class="line"><span class="number">1</span>、如果包含le则替换成letv</div><div class="line"><span class="number">2</span>、</div><div class="line"><span class="comment">// 普通替换</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'some money'</span>;</div><div class="line">str.replace(<span class="string">'some'</span>,<span class="string">'much'</span>);</div><div class="line"><span class="comment">// 使用正则进行全局替换</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'some money'</span>;</div><div class="line">str.replace(<span class="regexp">/o/g</span>,<span class="string">'S'</span>);</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p><a href="https://www.npmjs.com/package/browser-sync-webpack-plugin" target="_blank" rel="external">browserSync</a></p>
<p><img src="http://occeqxmsk.bkt.clouddn.com/084918.jpg" alt=""></p>
<ul>
<li>Talk about your preferred development environment.</li>
<li>谈谈你首选的开发环境</li>
<li>If you could master one technology this year, what would it be?</li>
<li>如果你能在今年掌握一种技术，那会是什么？</li>
<li>What did you learn yesterday/this week?</li>
<li>你学到了什么在昨天/这周</li>
<li>What is a recent technical challenge you experienced and how did you solve it?</li>
<li>你近期经历了什么技术挑战，你是怎么解决的呐？</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jsonp]]></title>
      <url>http://ntscshen.com/2017/04/14/jsonp.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>很简单，就是利用<script>标签没有跨域限制的“漏洞”（历史遗迹啊）来达到与第三方通讯的目的。当需要通讯时，本站脚本创建一个<script>元素，地址指向第三方的API网址，形如：<br> <script src="http://www.example.net/api?param1=1&param2=2"></script><br> 并提供一个回调函数来接收数据（函数名可约定，或通过地址参数传递）。<br> 第三方产生的响应为json数据的包装（故称之为jsonp，即json padding），形如：<br> callback({“name”:”hax”,”gender”:”Male”})<br> 这样浏览器会调用callback函数，并传递解析后json对象作为参数。本站脚本可在callback函数里处理所传入的数据。<br> 补充：“历史遗迹”的意思就是，如果在今天重新设计的话，也许就不会允许这样简单的跨域了嘿，比如可能像XHR一样按照CORS规范要求服务器发送特定的http头。</p>
</blockquote>
<p><a href="https://www.zhihu.com/question/19966531" target="_blank" rel="external">https://www.zhihu.com/question/19966531</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[小米5下line-height问题]]></title>
      <url>http://ntscshen.com/2017/04/13/%E5%B0%8F%E7%B1%B35%E4%B8%8Bline-height%E9%97%AE%E9%A2%98.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>在小米5(Android)上总是发现文字偏上</p>
<p>原因：line-height对一部分Android手机不起作用,有自己的默认行高,默认行高为22px( 有待考证 )</p>
</blockquote>
<h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">line-height</span>: 0;</div><div class="line"><span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span> 0; <span class="comment">/* 高度修改为对应的padding值 */</span></div><div class="line"><span class="selector-tag">font-size</span>: 12<span class="selector-tag">px</span>; <span class="comment">/* 此处需为px、不可使用rem */</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[快捷设置CSS3动画]]></title>
      <url>http://ntscshen.com/2017/03/28/%E5%BF%AB%E6%8D%B7%E8%AE%BE%E7%BD%AECSS3%E5%8A%A8%E7%94%BB.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>来历：在开发一个CSS3动画N多的页面时、我们主体在做的是复制、复制、复制。然后修改 <code>运动效果</code> 、 <code>运动延迟时间</code> 、 <code>运动持续时间</code> 。</p>
</blockquote>
<h5 id="原有模式："><a href="#原有模式：" class="headerlink" title="原有模式："></a>原有模式：</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 持续时间 &amp;&amp;  */</span></div><div class="line"><span class="selector-class">.animated</span> &#123;</div><div class="line">    <span class="attribute">-webkit-animation-duration</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">-webkit-animation-fill-mode</span>: both;</div><div class="line">    <span class="attribute">animation-fill-mode</span>: both</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 无限的 */</span></div><div class="line"><span class="selector-class">.animated</span><span class="selector-class">.infinite</span> &#123;</div><div class="line">    <span class="attribute">-webkit-animation-iteration-count</span>: infinite;</div><div class="line">    <span class="attribute">animation-iteration-count</span>: infinite</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 从右弹入 */</span></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> bounceInRight &#123;</div><div class="line">    0% &#123;</div><div class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(2000px);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(2000px)</div><div class="line">    &#125;</div><div class="line">    60% &#123;</div><div class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(-30px);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-30px)</div><div class="line">    &#125;</div><div class="line">    80% &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(10px);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(10px)</div><div class="line">    &#125;</div><div class="line">    100% &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(0);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> bounceInRight &#123;</div><div class="line">    0% &#123;</div><div class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(2000px);</div><div class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">translateX</span>(2000px);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(2000px)</div><div class="line">    &#125;</div><div class="line">    60% &#123;</div><div class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(-30px);</div><div class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">translateX</span>(-30px);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-30px)</div><div class="line">    &#125;</div><div class="line">    80% &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(10px);</div><div class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">translateX</span>(10px);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(10px)</div><div class="line">    &#125;</div><div class="line">    100% &#123;</div><div class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(0);</div><div class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">translateX</span>(0);</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bounceInRight</span> &#123;</div><div class="line">    <span class="attribute">-webkit-animation-name</span>: bounceInRight;</div><div class="line">    <span class="attribute">animation-name</span>: bounceInRight</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"ani bounceInRight animated"</span> <span class="attr">style</span>=<span class="string">"animation-delay:.9s;-webkit-animation-delay:.9s;-webkit-animation-duration: 2s;animation-duration: 2s;"</span>&gt;</span>A.颜值担当<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"ani bounceInRight animated"</span> <span class="attr">style</span>=<span class="string">"animation-delay:1.2s;-webkit-animation-delay:1.2s;-webkit-animation-duration: 2s;animation-duration: 2s;"</span>&gt;</span>B.颜值担当<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"ani bounceInRight animated"</span> <span class="attr">style</span>=<span class="string">"animation-delay:1.5s;-webkit-animation-delay:1.5s;-webkit-animation-duration: 2s;animation-duration: 2s;"</span>&gt;</span>C.颜值担当<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="使用动态修改"><a href="#使用动态修改" class="headerlink" title="使用动态修改"></a>使用动态修改</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"s-an"</span> <span class="attr">effect</span>=<span class="string">"bounceInRight"</span> <span class="attr">delay</span>=<span class="string">".4s"</span> <span class="attr">duration</span>=<span class="string">"1s"</span>&gt;</span>A.颜值担当<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">effect:效果</div><div class="line">delay:延期</div><div class="line">duration:持续</div><div class="line"> --&gt;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * [setAnimate 设置CSS3动画(便捷)]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setAnimate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oAni = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.s-an'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oAni.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> effect = oAni[i].getAttribute(<span class="string">'effect'</span>)</div><div class="line">            ? oAni[i].getAttribute(<span class="string">'effect'</span>)</div><div class="line">            : <span class="string">''</span>;</div><div class="line">        <span class="keyword">var</span> duration = oAni[i].getAttribute(<span class="string">'duration'</span>)</div><div class="line">            ? oAni[i].getAttribute(<span class="string">'duration'</span>)</div><div class="line">            : <span class="string">''</span>;</div><div class="line">        <span class="keyword">var</span> delay = oAni[i].getAttribute(<span class="string">'delay'</span>)</div><div class="line">            ? oAni[i].getAttribute(<span class="string">'delay'</span>)</div><div class="line">            : <span class="string">''</span>;</div><div class="line">        <span class="comment">// 获取style信息</span></div><div class="line">        <span class="keyword">var</span> style = oAni[i].getAttribute(<span class="string">'style'</span>)</div><div class="line">            ? oAni[i].getAttribute(<span class="string">'style'</span>)</div><div class="line">            : <span class="string">''</span>;</div><div class="line">        <span class="comment">// 设置CSS3动态特效名称</span></div><div class="line">        oAni[i].className = oAni[i].className + <span class="string">' '</span> + effect + <span class="string">' '</span> + <span class="string">'animated'</span>;</div><div class="line">        <span class="comment">// 设置持续时间</span></div><div class="line">        duration &amp;&amp; (style = style + <span class="string">'animation-duration:'</span> + duration + <span class="string">';-webkit-animation-duration:'</span> + duration + <span class="string">';'</span>)</div><div class="line">        <span class="comment">// 设置延迟时间</span></div><div class="line">        delay &amp;&amp; (style = style + <span class="string">'animation-delay:'</span> + delay + <span class="string">';-webkit-animation-delay'</span> + delay + <span class="string">';'</span>);</div><div class="line">        <span class="comment">// 设置style</span></div><div class="line">        oAni[i].setAttribute(<span class="string">'style'</span>, style);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">setAnimate();</div></pre></td></tr></table></figure>
<blockquote>
<p>留下您的脚步~</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack初涉]]></title>
      <url>http://ntscshen.com/2017/03/09/webpack%E5%88%9D%E6%B6%89.html</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/ntscshen/act-webpack-build" target="_blank" rel="external">webpack2的简易构建(传送门)</a></p>
<blockquote>
<p>在写此文章时：正直webpack2.2发布没多久。</p>
<p>webpack1.x和webpack2.x 整体上只有稍许区别，其他都一样</p>
<ul>
<li>一个entry</li>
<li>一个output</li>
<li>一个loaders</li>
<li>一个plugins</li>
</ul>
<p>最大的不同在于解析器的不同，基本上都是在做减法，将配置信息变得不那么容易写错，以及更好的命名规则</p>
<p>我想升级webpack2得到最大的收益就是：ES6规范的优化。意味着可以直接使用 import 以及 export,而不必再来一次CommonJS模块处理</p>
</blockquote>
<h6 id="定义默认的npm-init"><a href="#定义默认的npm-init" class="headerlink" title="定义默认的npm init"></a>定义默认的npm init</h6><blockquote>
<p>如果你厌倦了每次开始一个新的项目、都需要重新输入同样的信息，可以使用 <code>-y</code>标记表示你能接受 <code>package.json</code> 文件的一堆默认值</p>
</blockquote>
<h6 id="配合npm使用"><a href="#配合npm使用" class="headerlink" title="配合npm使用"></a>配合npm使用</h6><blockquote>
<p>CLI这种方式运行 <code>webpack</code> 不是特别方便。我们可以设置一些快捷方式</p>
<p>在 <code>package.json</code> 中的 <code>scripts</code> 内添加CLI中的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   ...</div><div class="line">&gt;   &quot;scripts&quot;: &#123;</div><div class="line">&gt;     &quot;start&quot;: &quot;webpack&quot;</div><div class="line">&gt;   &#125;,</div><div class="line">&gt;   ...</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>这样就可以通过 <code>npm run start</code> 命令来实现与上面相同的效果。</p>
<p>npm通过命令选取脚本,并临时修补执行环境,使脚本可以在运行时包含bin命令。</p>
<p>如果你在项目中使用了npm执行脚本,npm <strong>首先</strong> 会在你的本地模块中寻找webpack。</p>
<p><img src="http://occeqxmsk.bkt.clouddn.com/023739.jpg" alt="http://occeqxmsk.bkt.clouddn.com/023739.jpg"></p>
</blockquote>
<h4 id="生产环境的构建"><a href="#生产环境的构建" class="headerlink" title="生产环境的构建"></a>生产环境的构建</h4><h6 id="JS文件压缩"><a href="#JS文件压缩" class="headerlink" title="JS文件压缩"></a>JS文件压缩</h6><blockquote>
<p>webpack自带 <code>UglifyJsPlugin</code> </p>
</blockquote>
<h6 id="手动方式：为多环境配置Webpack"><a href="#手动方式：为多环境配置Webpack" class="headerlink" title="手动方式：为多环境配置Webpack"></a>手动方式：为多环境配置Webpack</h6><blockquote>
<p>当我们有针对多种环境分别配置的需求时,最简单的方式就是为不同的环境编写独立</p>
</blockquote>
<h4 id="Webpack插件-Plugins"><a href="#Webpack插件-Plugins" class="headerlink" title="Webpack插件( Plugins )"></a>Webpack插件( Plugins )</h4><blockquote>
<p>webpack自身也是构建在同样的插件系统上！插件的目的是在于解决 <code>loader</code> 无法实现的其他事。</p>
</blockquote>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><h6 id="最简单的配置"><a href="#最简单的配置" class="headerlink" title="最简单的配置"></a>最简单的配置</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./foo.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'foo.bundle.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="多个目标"><a href="#多个目标" class="headerlink" title="多个目标"></a>多个目标</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webapck'</span>);</div><div class="line"><span class="keyword">var</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> baseConfig = &#123;</div><div class="line">  <span class="attr">target</span>:<span class="string">'async-node'</span>,</div><div class="line">  <span class="attr">entry</span>:&#123;</div><div class="line">    <span class="attr">entry</span>:<span class="string">'./entry.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>:&#123;</div><div class="line">    <span class="attr">path</span>:path.resolve(__dirname,<span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>:<span class="string">'[name].js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>:[</div><div class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">      <span class="attr">name</span>:<span class="string">'inline'</span>,</div><div class="line">      <span class="attr">filename</span>:<span class="string">'inline.js'</span>,</div><div class="line">      <span class="attr">minChunks</span>:<span class="literal">Infinity</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.AggressiveSplittingPlugin(&#123;</div><div class="line">      <span class="attr">minSize</span>:<span class="number">5000</span>,</div><div class="line">      <span class="attr">maxSize</span>:<span class="number">10000</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports = targets;</div><div class="line"><span class="comment">// es6写法</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git使用指南-1]]></title>
      <url>http://ntscshen.com/2017/03/03/SourceTree:Git%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97.html</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/Mark24Code/15minGit" target="_blank" rel="external">飞机票：https://github.com/Mark24Code/15minGitSourceTree/Git轻指南</a></p>
<h5 id="场景1：创建仓库-提交代码"><a href="#场景1：创建仓库-提交代码" class="headerlink" title="场景1：创建仓库,提交代码"></a>场景1：创建仓库,提交代码</h5><h5 id="场景2：通过分支-来完成个人工作"><a href="#场景2：通过分支-来完成个人工作" class="headerlink" title="场景2：通过分支,来完成个人工作"></a>场景2：通过分支,来完成个人工作</h5><h5 id="场景3：多人协作-分支-解决冲突"><a href="#场景3：多人协作-分支-解决冲突" class="headerlink" title="场景3：多人协作,分支 + 解决冲突"></a>场景3：多人协作,分支 + 解决冲突</h5><ul>
<li>创建git仓库</li>
<li>基本的提交操作</li>
<li>分支与合并</li>
</ul>
<ul>
<li><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class="line">    &lt;h1&gt;这是冲突A&lt;/h1&gt;</div><div class="line">=======</div><div class="line">    &lt;h1&gt;这是冲突B&lt;/h1&gt;</div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; testB</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">HEAD是一个指针变量,它指向誰,就表明你在哪个分支。 HEAD -&gt; master</div><div class="line">在其他分支的时候同理。</div><div class="line">所以这里HEAD开头和=====之间的部分就是指当前你的修改。而下半部分，就是合并分支的部分。</div><div class="line">解决冲突方案：</div><div class="line">1、删除我的保留其他分支的</div><div class="line">2、删除其他分支的保留我的</div><div class="line">3、去掉奇怪的字符，保存大家的</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="场景1：创建仓库-提交代码-1"><a href="#场景1：创建仓库-提交代码-1" class="headerlink" title="场景1：创建仓库,提交代码"></a>场景1：创建仓库,提交代码</h5>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动端适配精灵图(sprite雪碧图)]]></title>
      <url>http://ntscshen.com/2017/03/03/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E7%B2%BE%E7%81%B5%E5%9B%BE-sprite%E9%9B%AA%E7%A2%A7%E5%9B%BE.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>移动端精灵图可以使用按照PC端的进行移植、只是把</p>
<p> <code>background-position: 1rem 3.1rem;</code> 对应的px转换成rem即可</p>
<p>大体上这样适配没什么问题,如果公司要求不是很严格的话</p>
<p>在一些手机里面,会有一切缺陷,有些图片少了那么1px。但是本着进益求精的原则，解决方案总结如下：(使用百分比方式、需要sass的mixin进行封装)</p>
</blockquote>
<h4 id="background-position详解"><a href="#background-position详解" class="headerlink" title="background-position详解"></a>background-position详解</h4><blockquote>
<ul>
<li><p>属性值为百分比时，将以图片的 <strong>中心点</strong> 为基准计算其相对位置。</p>
<ul>
<li><p>W3C怎么说：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;     With a value pair of '0% 0%', the upper left corner of the image is aligned with the upper left corner of the box's. A value pair of '100% 100%' places the lower right corner of the image in the lower right corner of padding area. With a value pair of '14% 84%', the point 14% across and 84% down the image is to be placed at the point 14% across and 84% down the padding area.</div><div class="line">&gt;     我这渣渣英语翻译大致如下：</div><div class="line">&gt;     1、background-position: 0% 0%;图像的左上角和父级的左上角对齐</div><div class="line">&gt;     2、background-position: 100% 100%;图像的右下角和父级的右下角对齐</div><div class="line">&gt;     3、background-position: 14% 84%;图像的中心点14% 84%。将被放置在父级的14% 84%的位置</div><div class="line">&gt;     总结1：也就是说如果用百分比来作为 background-position的属性值的话,那么背景图片相对于容器的中心点事随时都在改变的。</div><div class="line">&gt;     总计2：background-position: 10% 20%; 背景图片首先会把自身的中心点移动到10% 20%的位置。然后在根据父级元素的宽高来移动(10% 20%)</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</blockquote>
<p>&gt;<br>&gt;</p>
<blockquote>
<ul>
<li>属性值为像素时，始终以图片的 <strong>左上角</strong> 为基准。</li>
</ul>
</blockquote>
<p><a href="http://linxz.github.io/blog/css%E5%B1%9E%E6%80%A7%E5%9F%BA%E7%A1%80/2015/09/talk-about-background-position-values.html" target="_blank" rel="external">原文传送门</a></p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">1、当前图片宽高为(200*200);</div><div class="line">2、当前元素大小为(100*100);</div><div class="line">图片的原中心点是(0, 0)</div><div class="line">现在的中心点位置是(200*10%, 200*20%),也就是(20px, 40px)。</div><div class="line">按照之前的推理：</div><div class="line">1、图片以(20px,40px)为中心点,移动元素宽度的10%,元素高度的20%,也就是移动了(10px,20px);</div><div class="line">2、最终移动的距离是：(-20px+10px,-40px+20px) === (-10px,-20px);</div><div class="line">*/</div><div class="line">.box&#123;</div><div class="line">  	width: 100px;</div><div class="line">  	height: 100px;</div><div class="line">  	background: url(demo.png) no-repeat;// 当前图片宽高为200*200</div><div class="line">  	background-position: 10% 20%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="公式计算"><a href="#公式计算" class="headerlink" title="公式计算"></a>公式计算</h4><blockquote>
<p>根据如上的推理,我们若想得到定位的百分比值,</p>
<p>我们需要元素的宽高 <code>(eleWidth,eleHeight)</code> ,图片的宽高 (<code>imgWidth,imgHeight</code>) ,当前图片移动后的坐标 <code>imgX,imgY</code></p>
<ul>
<li>left: <code>-imgX/(eleWidth-imgWidth)*100%;</code></li>
<li>top:<code>-imgY/(eleHeight-imgHeight)*100%;</code></li>
</ul>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><a href="http://www.jianshu.com/p/d3b19968a4c2" target="_blank" rel="external">传送门</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//$spriteWidth 雪碧图的宽度px</div><div class="line">//$spriteHeight 雪碧图的高度px</div><div class="line">//$iconWidth 需要显示icon的宽度px</div><div class="line">//$iconHeight 需要显示icon的高度px</div><div class="line">//$iconX icon的原始x坐标</div><div class="line">//$iconY icon的原始y坐标</div><div class="line">//</div><div class="line">@mixin bgPosition($spriteWidth, $spriteHeight, $iconWidth, $iconHeight, $iconX, $iconY)&#123;</div><div class="line"></div><div class="line">    background-position: (($iconX / ($spriteWidth - $iconWidth)) * 100% ($iconY / ($spriteHeight - $iconHeight)) * 100%);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.icon2&#123;</div><div class="line">    width: 0.74rem;</div><div class="line">    height: 0.64rem;</div><div class="line">    @include bgPosition(1072, 442, 74, 64, 188, 5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1985420-02914366757db774.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="http://upload-images.jianshu.io/upload_images/1985420-02914366757db774.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript运行机制]]></title>
      <url>http://ntscshen.com/2017/03/01/JavaScript%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>前言：由于活动需要做了一个倒计时、如果当前页面 运行时间长了、新开的页面和原打开页面会存在很大误差。</p>
<p>原因可能是JS的单线程阻塞了定时器的执行。说到单线程就不得不说JS的运行机制</p>
</blockquote>
<h5 id="为什么JavaScript是单线程？"><a href="#为什么JavaScript是单线程？" class="headerlink" title="为什么JavaScript是单线程？"></a>为什么JavaScript是单线程？</h5><p>为什么不能是多线程？作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p>
<h5 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h5><blockquote>
<p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等待</p>
</blockquote>
<p>JS只有一个主线程，主线程执行完执行栈的任务后去检查异步的任务队列，如果异步事件触发，则将其加到主线程的执行栈</p>
<p>HTML5：setTimeout的最小间隔：是W3C在HTML标准中规定，要求低于4ms的事件间隔算为4ms</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS活动精准倒计时]]></title>
      <url>http://ntscshen.com/2017/03/01/JS%E6%B4%BB%E5%8A%A8%E7%B2%BE%E5%87%86%E5%80%92%E8%AE%A1%E6%97%B6.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>前端页面倒计时功能在很多场景中会被使用，比如运营活动 <code>( 开始倒计时、活动结束倒计时、抢购倒计时 )</code>、</p>
<p>倒计时的开始获取时间应该读取服务器返回时间。但实际证明，做了这一步还远远不够，页面运行时间长了，新开的页面和原打开页面还是存在误差。</p>
</blockquote>
<h5 id="造成误差的原因主要有几种可能"><a href="#造成误差的原因主要有几种可能" class="headerlink" title="造成误差的原因主要有几种可能"></a>造成误差的原因主要有几种可能</h5><ol>
<li>没有考虑页面渲染和函数运行累计时间 <code>主要原因</code></li>
<li>没有考虑JS冻结运行耗费的时间</li>
<li>其他逻辑问题</li>
</ol>
<p><strong>由于JS是单线程执行，同一时间只能执行一个JS代码( 同一时间其他异步事件执行会被阻塞 )，当异步事件发生时，它会进入代码执行队列，执行线程时依照队列顺序依次执行代码</strong></p>
<blockquote>
<p>当你的页面没有处于被浏览的状态时，这个网页的JS不会运行或者暂时阻塞，这是浏览器为了节省资源的行为，各个浏览器做法不大一样</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式-装饰者模式(7)]]></title>
      <url>http://ntscshen.com/2017/02/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F(7).html</url>
      <content type="html"><![CDATA[<blockquote>
<p>聊装饰者之前、咱们先写一下单一职责原则。</p>
<p>单一职责原则</p>
<p>问题由来：类T负责两个不同的职责，职责P1、职责P2。当由于职责P1需求发生改变而需求修改T时，有可能会导致原本运行正常的职责P2功能发生故障</p>
<p>解决方案：遵循单一职责原则。分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险。</p>
<p>在软件编程中，誰也不希望因为修改一个功能导致其他的功能发生故障。而避免出现这一问题的方法便是遵循单一职责原则。</p>
<p><strong>不遵循单一职责原则：这样做的风险在于职责扩散的不确定性，因为我们不会想到这个职责P，在未来可能会扩散为P1,P2,P3,P4…..Pn。所以，牢记一点，在职责扩散到我们无法控制的程度之前，立刻对代码进行重构</strong></p>
<p>OOD( Object-Oriented Design )：面相对象设计</p>
<ol>
<li>使代码更清晰</li>
<li>无需更改现有代码就可扩展可复用</li>
<li>能应对很多变化：如修改或添加或删除某一部分代码，并不会影响到另一部分代码</li>
<li>大多数项目中最不稳定的东西就是需求，我们生活在一个需求不断变化的事件中，我们必须确保我们的软件能禁得住这些考验</li>
</ol>
<p>在程序开发中，许多时候都不希望某个类天使就非常庞大，一次性包含许多职责</p>
<p><strong>装饰者模式( Decorator )：</strong> 在不改变原对象的基础上,通过对其进行包装扩展( 添加属性或者方法 ) 使原有对象可以满足用户的更复杂需求。</p>
</blockquote>
<h4 id="使用AOP装饰函数"><a href="#使用AOP装饰函数" class="headerlink" title="使用AOP装饰函数"></a>使用AOP装饰函数</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack基础]]></title>
      <url>http://ntscshen.com/2017/02/24/webpack%E5%9F%BA%E7%A1%80.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>Loaders:装载</p>
</blockquote>
<h5 id="babel的配置选项"><a href="#babel的配置选项" class="headerlink" title="babel的配置选项"></a>babel的配置选项</h5><p>Babel完全可以在 <code>webpack.config.js</code> 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的 <code>webpack.config.js</code> 文件中进行配置往往使得 <strong>这个文件</strong> 显得异常复杂，因此一些开发者支持把 <code>babel</code> 的配置选项放在一个单独的名为 <code>.babelrc</code> 的配置文件中，</p>
<p>loaders是在打包构建过程中用来处理源文件的( JSX,SCSS… )，一次处理一个</p>
<p>插件并不直接操作单个文件，它直接对整个构建过程起作用</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm故障排除]]></title>
      <url>http://ntscshen.com/2017/02/24/npm%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>npm下许多常见的问题可以通过以下步骤之一进行解决：</p>
</blockquote>
<h2 id="1、尝试最新的稳定版本"><a href="#1、尝试最新的稳定版本" class="headerlink" title="1、尝试最新的稳定版本"></a>1、尝试最新的稳定版本</h2><blockquote>
<p>在OSX、Linux中可能需要使用前缀 <code>sudo</code> </p>
<p>sudo：超级管理员权限</p>
</blockquote>
<p>升级最新版本：<code>npm install -g npm@latest</code></p>
<p>升级最新的LTS(长期支持)版本： <code>npm install -g npm@lts</code></p>
<p>查看当前全局npm下的安装包： <code>npm list -g —depth 0</code></p>
<p><strong>window请自行搜索😯</strong></p>
<h2 id="2、尝试清除npm缓存"><a href="#2、尝试清除npm缓存" class="headerlink" title="2、尝试清除npm缓存"></a>2、尝试清除npm缓存</h2><p>清除缓存：<code>npm cache clean</code></p>
<p>如果遇到奇怪的问题，可以通过清除缓存、再试一次。</p>
<h2 id="3、npm坏了"><a href="#3、npm坏了" class="headerlink" title="3、npm坏了"></a>3、npm坏了</h2><p>重新安装： <code>curl -L https://www.npmjs.org/install.sh | sh</code></p>
<h2 id="4、文件名错误"><a href="#4、文件名错误" class="headerlink" title="4、文件名错误"></a>4、文件名错误</h2><p><img src="http://occeqxmsk.bkt.clouddn.com/033026.jpg" alt="http://occeqxmsk.bkt.clouddn.com/033026.jpg"></p>
<p>拒绝在webpack目录下，安装webpack作为自身的依赖。你的项目名和安装的依赖项是否相同。</p>
<p>这种通常发生在工作文件夹名称与您尝试安装的软件包名称相同。并且已经运行了 <code>npm init</code> 使 <code>package.json</code> 文件具有和依赖项相同的名称</p>
<p>直白一点就是： <strong>package.json里面name不能和当前项目的文件名相同</strong>。</p>
<p><a href="https://github.com/npm/npm/wiki/Troubleshooting#permission-error" target="_blank" rel="external">参考：npm官方Troubleshooting</a></p>
<p><a href="https://github.com/npm/npm/issues/12121" target="_blank" rel="external">参考：npm/issues/12121</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Canvas系列》- 三角函数]]></title>
      <url>http://ntscshen.com/2017/02/22/%E3%80%8ACanvas%E7%B3%BB%E5%88%97%E3%80%8B-%20%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>开始学习三角函数之前,先要搞明白 javascript中的Math都有哪些方法.</p>
<p>Math对象并不想Date和String那样是对象的类,因此没有构造函数Math(),像Math.sin()这样的函数只是函数,不是某个对象的方法.无需创建它,通过把Math作为对象使用就可以调用其所有属性和方法</p>
</blockquote>
<h4 id="Math随机数函数"><a href="#Math随机数函数" class="headerlink" title="Math随机数函数"></a>Math随机数函数</h4><p><code>Math.random(); 返回0到1之间的随机数</code></p>
<h4 id="Math四舍五入相关函数"><a href="#Math四舍五入相关函数" class="headerlink" title="Math四舍五入相关函数"></a>Math四舍五入相关函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.round(); <span class="comment">// 四舍五入</span></div><div class="line"><span class="built_in">Math</span>.ceil(); <span class="comment">// 向上取舍(天花板)</span></div><div class="line"><span class="built_in">Math</span>.floor(); <span class="comment">// 向下取舍(地板)</span></div><div class="line"><span class="built_in">Math</span>.abs(); <span class="comment">// 绝对值</span></div></pre></td></tr></table></figure>
<h4 id="Math最大最小类函数"><a href="#Math最大最小类函数" class="headerlink" title="Math最大最小类函数"></a>Math最大最小类函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.max(); <span class="comment">// 返回数字中最大的值</span></div><div class="line"><span class="built_in">Math</span>.min(); <span class="comment">// 返回数字中最小的值</span></div></pre></td></tr></table></figure>
<h4 id="Math三角函数与属性"><a href="#Math三角函数与属性" class="headerlink" title="Math三角函数与属性"></a>Math三角函数与属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.sin(); <span class="comment">// 正弦值</span></div><div class="line"><span class="built_in">Math</span>.cos(); <span class="comment">// 余弦值</span></div><div class="line"><span class="built_in">Math</span>.tan(); <span class="comment">// 正切值</span></div><div class="line"></div><div class="line"><span class="built_in">Math</span>.asin(); <span class="comment">// 反正弦值</span></div><div class="line"><span class="built_in">Math</span>.acos(); <span class="comment">// 反余弦值</span></div><div class="line"><span class="built_in">Math</span>.atan(); <span class="comment">// 反正切值</span></div><div class="line"></div><div class="line"><span class="built_in">Math</span>.atan2(); <span class="comment">// 由X轴到点(x,y)的角度(以弧度为单位)</span></div><div class="line"><span class="built_in">Math</span>.PI属性 <span class="comment">// 圆周率π</span></div></pre></td></tr></table></figure>
<p>#### </p>
<p>####<img src="http://occeqxmsk.bkt.clouddn.com/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0.png" alt="http://occeqxmsk.bkt.clouddn.com/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0.png"> </p>
<blockquote>
<p>上图简单的介绍了三角函数的表示方法,知道了三角函数表示的是角度和边之间的关系.但是在实际开发中我们不仅想要通过角度来推出两边的距离长度比值,而 <strong>更加关心的是如果通过已知的距离来推导出角度( 坐标的位置好确定 )</strong> .这里我们要用到 <strong>反三角函数</strong> </p>
</blockquote>
<p><img src="http://occeqxmsk.bkt.clouddn.com/sinCosTan.png" alt="http://occeqxmsk.bkt.clouddn.com/sinCosTan.png"></p>
<p>在 <code>JavaScript</code> 中的相应表示方法是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sin(θ)  ---&gt;  <span class="built_in">Math</span>.sin( θ * <span class="built_in">Math</span>.PI/<span class="number">180</span> )</div><div class="line">cos(θ)  ---&gt;  <span class="built_in">Math</span>.cos( θ * <span class="built_in">Math</span>.PI/<span class="number">180</span> )</div><div class="line">tan(θ)  ---&gt;  <span class="built_in">Math</span>.tan( θ * <span class="built_in">Math</span>.PI/<span class="number">180</span> )</div><div class="line"></div><div class="line">θ = arcsin(x/R) ---&gt; <span class="built_in">Math</span>.asin(x/R)*(<span class="number">180</span>/<span class="built_in">Math</span>.PI)</div><div class="line">θ = arccos(y/R) ---&gt; <span class="built_in">Math</span>.acos(y/R)*(<span class="number">180</span>/<span class="built_in">Math</span>.PI)</div><div class="line">θ = arctan(x/y) ---&gt; <span class="built_in">Math</span>.atan(x/y)*(<span class="number">180</span>/<span class="built_in">Math</span>.PI)</div></pre></td></tr></table></figure>
<p>在 <code>canvas</code> 中采用的是弧度制 <strong>角度转成弧度 : </strong>  <code>θ * Math.PI/180</code> </p>
<h5 id="使用已知的距离来推导角度-Math-atan2-dy-dx"><a href="#使用已知的距离来推导角度-Math-atan2-dy-dx" class="headerlink" title="使用已知的距离来推导角度( Math.atan2(dy,dx) )"></a>使用已知的距离来推导角度( Math.atan2(dy,dx) )</h5><blockquote>
<p>注释：请注意这个函数的参数顺序，Y 坐标在 X 坐标之前传递。</p>
<p>atan2()方法返回从X轴 到 点(x,y) 之间的角度</p>
</blockquote>
<h3 id="三角函数的6种用法"><a href="#三角函数的6种用法" class="headerlink" title="三角函数的6种用法"></a>三角函数的6种用法</h3><ol>
<li><p>角度和弧度互转</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">弧度:radians = degrees * <span class="built_in">Math</span>.PI / <span class="number">180</span></div><div class="line">角度:degrees = radians * <span class="number">180</span> / <span class="built_in">Math</span>.PI</div></pre></td></tr></table></figure>
</li>
<li><p>旋转( 弧度 )</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dx = point.x - object.x;</div><div class="line">dy = point.y - object.y;</div><div class="line">旋转:object.rotation = <span class="built_in">Math</span>.atan2(dy, dx);</div></pre></td></tr></table></figure>
</li>
<li><p>平滑运动</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">range:平行</div><div class="line">value = center + <span class="built_in">Math</span>.sin(angle) * range;</div><div class="line">angle += speed;</div></pre></td></tr></table></figure>
</li>
<li><p>圆形运动</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xposition = centerX + <span class="built_in">Math</span>.cos(angle) * radius;</div><div class="line">yposition = centerY + <span class="built_in">Math</span>.sin(angle) * radius;</div><div class="line">angle += speed;</div></pre></td></tr></table></figure>
</li>
<li><p>椭圆运动</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xposition = centerX + <span class="built_in">Math</span>.cos(angle) * radiusX;</div><div class="line">yposition = centerY + <span class="built_in">Math</span>.sin(angle) * radiusY;</div><div class="line">angle += speed;</div></pre></td></tr></table></figure>
</li>
<li><p>两点间的距离</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dx = x2 - x1;</div><div class="line"><span class="keyword">var</span> dy = y2 - y1;</div><div class="line"><span class="keyword">var</span> dist = <span class="built_in">Math</span>.sqrt(dx * dx + dy * dy);</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式-命令模式(6)]]></title>
      <url>http://ntscshen.com/2017/02/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F(6).html</url>
      <content type="html"><![CDATA[<p>command：命令</p>
<p>execute：执行</p>
<blockquote>
<p>设计模式的主题：总是把不变的事物和变化的事物分离开来</p>
<p>命令模式( Command )：将请求与实现解耦并分支成独立对象，从而使不同的请求对客户端的实现参数化</p>
<p>命令模式：其实就是 <strong>回调</strong> ( callback ) 函数的一个面向对象的替代品</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> viewCommand = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	<span class="keyword">var</span> Action = &#123;</div><div class="line">      	<span class="attr">create</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">      	<span class="attr">display</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">  	&#125;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">exute</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式-发布订阅模式(5)]]></title>
      <url>http://ntscshen.com/2017/02/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F(5).html</url>
      <content type="html"><![CDATA[<blockquote>
<p>发布-订阅模式( 观察者模式 )：定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。在JavaScript开发中，我们一般用事件模型来替代传统的发布-订阅模式。</p>
<p>观察者模式在实际开发中非常常用。。。</p>
</blockquote>
<p>只要我们增加在DOM节点上绑定过事件函数，那么我们就曾今使用过发布-订阅模式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	alert(<span class="number">1</span>);</div><div class="line">&#125;,<span class="literal">false</span>);</div><div class="line"><span class="built_in">document</span>.body.click();</div><div class="line"><span class="comment">// 监听用户点击的动作，当body节点被点击的时候，body节点便会向订阅者发布这条信息。</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式-迭代器模式(4)]]></title>
      <url>http://ntscshen.com/2017/02/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F(4).html</url>
      <content type="html"><![CDATA[<blockquote>
<p>迭代器模式：在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。</p>
<p>迭代器是优化循环语句的一种可行方案，它使得程序清晰易读。</p>
<p>在开发中，迭代器极大简化了代码中的循环语句，使代码结构清晰紧凑，然而这些简化了的循环语句实质上隐形地移到了迭代器中，这也解决了对象的使用者与对象内部结构之间的耦合。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 传统的逻辑：if条件分支</span></div><div class="line"><span class="comment">// 根据不同的浏览器，选择不同的删除方式</span></div><div class="line"><span class="comment">// 函数getUploadObj中充斥了 try-cache和if-else条件分支</span></div><div class="line"><span class="keyword">var</span> getUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"TXFTNActiveX.FTNUpload"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        <span class="keyword">if</span> (supportFlash()) &#123;</div><div class="line">            <span class="keyword">var</span> str = <span class="string">'&lt;object type="application/x-shockwave-flash"&gt;&lt;/object&gt;'</span>;</div><div class="line">            <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> str = <span class="string">'&lt;input name="file" type="file"/&gt;'</span></div><div class="line">            <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 改进：迭代器模式</span></div><div class="line"><span class="comment">// IE上传控件</span></div><div class="line"><span class="keyword">var</span> getActiveUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"TXFTNActiveX.FTNUpload"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// flash</span></div><div class="line"><span class="keyword">var</span> getFlashUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (supportFlash()) &#123;</div><div class="line">        <span class="keyword">var</span> str = <span class="string">'&lt;object type="application/x-shockwave-flash"&gt;&lt;/object&gt;'</span>;</div><div class="line">        <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// Form表单上传</span></div><div class="line"><span class="keyword">var</span> getFormUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> str = <span class="string">'&lt;input name="file" type="file"/&gt;'</span></div><div class="line">    <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 把判断中的每一个条件内容进行封装在函数中。使用迭代器模式进行迭代循环</span></div><div class="line"><span class="keyword">var</span> iteratorUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = <span class="built_in">arguments</span>[i++]) &#123;</div><div class="line">        <span class="keyword">var</span> uploadObj = fn();</div><div class="line">        <span class="keyword">if</span> (uploadObj !== <span class="literal">false</span>) &#123;</div><div class="line">            <span class="keyword">return</span> uploadObj;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> uploadObj = iteratorUploadObj(getActiveUploadObj, getFlashUploadObj, getFlashUploadObj);</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取不同上传对象的方法被隔离在各自的函数里互不干扰，</div><div class="line"> * try、catch和if条件分支不在纠缠在一起，</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// 所有模式的核心是：单一职责原则：应该只有一个引起变化的原因，如果对象承担了多项职责，这就意味着这个对象将变得巨大，引起它变化的原因可能会有多个。。。😀</span></div><div class="line"><span class="comment">// 每个函数都是独立单一的模块。不承担多余的职责。对象的改变也不会引起其他代码的一连串反应</span></div><div class="line"><span class="comment">// 每一个功能独立封装(正确：return true。错误：return false)。再使用一个函数进行逻辑判断( 迭代定义的函数、正确的话则、停止参数否则继续执行 )</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式-代理模式(3)]]></title>
      <url>http://ntscshen.com/2017/02/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F(3).html</url>
      <content type="html"><![CDATA[<blockquote>
<p>代理模式( Proxy )：由于一个对象不能直接引用另外一个对象，所以需要通过代理对象在这两个对象之间起到中介的作用</p>
</blockquote>
<h4 id="虚拟代理和缓存代理"><a href="#虚拟代理和缓存代理" class="headerlink" title="虚拟代理和缓存代理"></a>虚拟代理和缓存代理</h4><ul>
<li><p>图片预加载</p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 没有使用代理的图片预加载</span></div><div class="line"><span class="keyword">var</span> MyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	<span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">  	<span class="built_in">document</span>.body.appendChild(imgNode);</div><div class="line">  	<span class="keyword">var</span> img = <span class="keyword">new</span> Image;</div><div class="line">  	img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      	imgNode.src = img.src;</div><div class="line">  	&#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      	<span class="attr">setSrc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</div><div class="line">          	imgNode.src = <span class="string">'loading.gif'</span>;</div><div class="line">          	img.src = src;</div><div class="line">      	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line">MyImage.setSrc(<span class="string">'image.png'</span>);</div></pre></td></tr></table></figure>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用代理的图片预加载 - 虚拟代理</span></div><div class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">    <span class="built_in">document</span>.body.appendChild(imgNode);</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">setSrc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</div><div class="line">            imgNode.src = src;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div><div class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	<span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">  	img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      	myImage.setSrc(<span class="keyword">this</span>.src);</div><div class="line">  	&#125;;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      	<span class="attr">setSrc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</div><div class="line">          	myImage.setSrc(<span class="string">'loading.gif'</span>);</div><div class="line">          	img.src = src;</div><div class="line">      	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line">proxyImage.setSrc(<span class="string">'image.png'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="代理和本体接口的一致性"><a href="#代理和本体接口的一致性" class="headerlink" title="代理和本体接口的一致性"></a>代理和本体接口的一致性</h4><ul>
<li>代理和本体接口的一致性(代理接手请求的过程对于用户来说是透明的)</li>
<li>1、用户可以放心的请求代理，他只关心是否能得到想要的结果。</li>
<li>2、在任何使用本地的地方都可以替换成使用代理</li>
</ul>
<h4 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 乘积函数</span></div><div class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	<span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">  	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++)&#123;</div><div class="line">      	a = a * <span class="built_in">arguments</span>[i];</div><div class="line">  	&#125;</div><div class="line">  	<span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 加入缓存代理</span></div><div class="line"><span class="keyword">var</span> proxMult = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	<span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line">  	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      	<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>,<span class="string">','</span>);</div><div class="line">      	<span class="keyword">if</span>(args <span class="keyword">in</span> cache)&#123;</div><div class="line">          	<span class="keyword">return</span> cache[args];</div><div class="line">      	&#125;</div><div class="line">	    <span class="keyword">return</span> cache[args] = mult.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;)();</div><div class="line">proxMult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div><div class="line">proxMult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div></pre></td></tr></table></figure>
<h4 id="使用代理的意义"><a href="#使用代理的意义" class="headerlink" title="使用代理的意义"></a>使用代理的意义</h4><ul>
<li>使用代理的意义</li>
<li>单一职责原则：一个类(通常包括对象和函数等)而言，应该仅有一个引起它变化的原因。如果对象承担了多项职责，就意味着这个对象将变得巨大，引起它变化的原因可能会有多个。</li>
<li>面向对象设计鼓励将行为分布到细粒度的对象之中，如果一个对象承担的职责过多，等于把这些职责耦合到一起，这种耦合会导致脆弱和低内聚的设计。当变化发生时，设计可能会遭到意外的破坏。</li>
<li>在面向对象的程序设计中，大多数情况下，若违反其他任何原则，同时将违反开放 - 封闭原则。如果五年后网速快到根本不需要预加载技术，我们可能希望把预加载图片的这段代码从MyImage对象里删掉，这个时候就不得不改动MyIage对象了。</li>
</ul>
<blockquote>
<p>在JavaScript开发中最常用的是虚拟代理和缓存代理。虽然代理模式非常有用，但我们在编写业务代码的时候，往往不需要去预先猜测是否需要使用代理模式。当真正发现不方便访问某个对象的时候，再编写代理也不迟。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ESLint检查代码质量]]></title>
      <url>http://ntscshen.com/2017/02/16/ESLint%E6%A3%80%E6%9F%A5%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>从接触js开始就想尝试ESLint，</p>
<p>但是一执行检查满屏的Error、惨绝人寰(a、a、a)、后放弃</p>
</blockquote>
<p><img src="http://occeqxmsk.bkt.clouddn.com/WX20170216-135702@2x.png" alt="http://occeqxmsk.bkt.clouddn.com/WX20170216-135702@2x.png"></p>
<p>为什么会有如此多的Error：</p>
<blockquote>
<p>刚开始接触 ESLint 时觉得太难，是因为过太过于<strong>迷信权威</strong>。比如 Airbnb 公司的 JavaScript 风格，在 GitHub 上受到了很大的好评，其实我自己也非常认可这样的编码风格。但每个团队都会根据自己的的<strong>实际情况</strong>来<strong>定制</strong>不同的东西，我们并<strong>不能随便照搬</strong>过来。所以当使用<code>eslint-config-airbnb</code>这个配置进行 ESLint 检查时，满屏都是<code>error</code>和<code>warning</code>，从而觉得这东西根本没啥卵用。</p>
<p>直接使用<code>eslint-config-airbnb</code>这种某个公司高度定制化的配置直接使用<code>eslint-config-airbnb</code>这种某个公司高度定制化的配置，而不是<code>eslint:recommended</code>这样保守的。而且是直接用来检查整个项目好几十个 JS 文件，可想而知那是怎样的画面</p>
</blockquote>
<p>ESLint是一个插件化的  <code>JavaScript</code> 代码检查工具，用于检查常见的 JS代码错误，也可以进行代码风格检查，可以根据自己的洗好指定一套ESLint配置项，让后应用于所编写的项目中，从而实现 <code>辅助编码规范的执行，有效控制代码的质量</code></p>
<h4 id="使用ESLint"><a href="#使用ESLint" class="headerlink" title="使用ESLint"></a>使用ESLint</h4><ul>
<li>通过npm安装： <code>npm install -g eslint</code></li>
<li>通过 <code>eslint —init</code> 命令在当前目录下生成 <code>.eslintrc.*</code> 文件。如果没有 package.json文件的话，需要先创建一个这个文件，eslint会根据你的安装向导写入对应的插件到 <code>devDependencies</code> 里面</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dependencies"</span>: &#123;&#125;,<span class="comment">//生产环境</span></div><div class="line"><span class="string">"devDependencies"</span>: &#123;&#125;<span class="comment">//开发环境</span></div></pre></td></tr></table></figure>
<h4 id="配置ESLint"><a href="#配置ESLint" class="headerlink" title="配置ESLint"></a>配置ESLint</h4><blockquote>
<p>通过配置文件： <code>.eslingrc.*</code> 或 <code>package.json</code> 中添加 <code>eslintConfig</code> 属性</p>
</blockquote>
<p>配置的内容</p>
<ol>
<li>环境：代码运行的环境，每个环境与预设了一些全局变量</li>
<li>全局变量：代码所运用到的全局变量</li>
<li>规则：规则的运用以及规则的等级</li>
</ol>
<h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>每条规则有3个等级： <code>off</code>、<code>warn</code> 、<code>error</code>  </p>
<ul>
<li>off( 0 )：禁用这条规则</li>
<li>warn( 1 )：表示仅给出警告、并不会导致检查不通过</li>
<li>error( 2 )：错误、检查不通过</li>
</ul>
<p>如果配置了 <code>&quot;extends&quot;:&quot;eslint:recommended&quot;</code>, 则 <a href="http://eslint.org/docs/rules/" target="_blank" rel="external">ESLint Rules页面</a>  所有打钩的规则都会被生效（ <strong>基础配置信息</strong> ）。大多数时候，我们会根据自己个人或者团队的习惯，定制更多的规则，( 限定缩进2个空格和实用单引号的字符串等等 )</p>
<p><strong>可以写一套自己的配置项发布到NPM上的ESLint配置</strong> 模块名一般以 <code>eslint-config-</code> 为前缀。要是用这个配置，先止一下命令安装它：</p>
<blockquote>
<p>npm install eslint-config-shen</p>
</blockquote>
<h4 id="指定Parser的选项"><a href="#指定Parser的选项" class="headerlink" title="指定Parser的选项"></a>指定Parser的选项</h4><p>ESLint默认只支持ES5的语法，但你可以通过指定parser来支持检测ES6和JSX语法。具体是在 <code>.eslintrc.*</code> 文件中使用 <code>parserOptions</code> 属性。可以设置如下内容</p>
<ul>
<li><code>ecmaVersion</code>：可以设置3，5（默认）和6来代表ECMAScript的版本</li>
<li><code>sourceType</code>：可以设置“script”（默认）或”module”如果你的代码采用模块化的方式</li>
<li><code>ecmaFeatures</code>：设置features：<code>globalReturn</code>：在全局范围内允许使用<code>return</code>语句<code>impliedStrict</code>：如果ecmaVersion为5及以上，使用全局的<strong> strict mode</strong><code>jsx</code>：使用JSX语法<code>experimentalObjectRestSpread</code></li>
</ul>
<p><strong>Parser：语法分析器。options：选择</strong></p>
<h4 id="指定环境"><a href="#指定环境" class="headerlink" title="指定环境"></a>指定环境</h4><ul>
<li>amd：定义 <code>require()</code> 和 <code>define()</code> 作为全局变量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"env"</span>: &#123;</div><div class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"node"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">'jquery'</span>: <span class="literal">true</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>ESLint支持第三方插件的使用，在使用插件前需要通过npm来安装。在配置文件中使用<code>plugins</code>来设置插件名称。带有<code>eslint-plugin-</code>前缀的插件名称可以省略其前缀。如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"plugins"</span>: [</div><div class="line">    <span class="string">"plugin1"</span>,</div><div class="line">    <span class="string">"eslint-plugin-plugin2"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：如果是使用的全局安装的ESLint的话，则只能使用全局安装的ESlint插件。而使用本地安装的ESLint则可以使用全局和本地安装的ESLint插件。</p>
<h4 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h4><p>通过 <code>.eslintrc.*</code> 或 <code>.eslintrc.json</code> 文件方式，ESLint会自动寻找当前目录下的这两个文件，如果没有就想父级目录寻找，直到查询到根目录。这种方式比较有用，特别是需要针对不同的部分应用不同的规则。最里面的配置规则要比它的父级权限大。</p>
<p>ESLint支持如下几种格式的配置文件：</p>
<ul>
<li>JavaScript：使用 <code>.eslintrc.js</code>,通过exports一个包含所有规则的对象</li>
<li>JSON：使用  <code>.eslintrc.json</code> 来配置规则</li>
<li>package.json：在 <code>package.json</code> 中定义  <code>eslintConfig</code> 来设置规则</li>
<li>YAML</li>
<li>Deprecated</li>
</ul>
<p>如果当前目录下有多个配置格式的文件，则ESLint只会使用其中一个，顺序为：</p>
<p><code>.eslintrc.js</code> &gt; <code>.eslintrc.yaml</code> &gt; <code>.eslintrc.yml</code> &gt; <code>.eslintrc.json</code> &gt; <code>.eslintrc</code> &gt; <code>package.json</code> </p>
<p>默认情况下，我们不需要应用跨项目的配置规则，即使项目在目录上有父子关系，此时我们可以通过在 <code>package.json</code> 的 <code>eslintConfig</code> 或 <code>.eslintrc.*</code> 中设置 <code>&quot;root&quot;: true</code> 来静止ESLint继续想上级查找配置文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"root"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="项目级别的配置"><a href="#项目级别的配置" class="headerlink" title="项目级别的配置"></a>项目级别的配置</h6><ol>
<li>目录下的 <code>.eslintrc.*</code> 或 <code>package.json</code></li>
<li>继续在父级目录中查找的 <code>.eslintrc</code> 和 <code>package.json</code> 文件，直到出现 <code>&quot;root&quot;: true</code></li>
<li>如果前两个都没有配置文件的话，就会用用户根目录下的 <code>~/.eslintrc</code></li>
</ol>
<h4 id="继承配置文件"><a href="#继承配置文件" class="headerlink" title="继承配置文件"></a>继承配置文件</h4><blockquote>
<p>如果你想继承某个特定的配置文件，可以使用 <code>extends</code> 属性，并且制定一个路径，可以是相对或绝对路径。可以继承多个文件，写在下面的配置规则会覆盖上面配置中对应的规则。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="string">"extends"</span>: [</div><div class="line">      	<span class="string">"eslint"</span>:<span class="string">"recommended"</span>,</div><div class="line">      	<span class="string">"./node_modules/coding-standard/.eslintrc-es6"</span></div><div class="line">    ],</div><div class="line">    <span class="string">"rules"</span>: &#123;</div><div class="line">        <span class="string">'no-var'</span>: <span class="string">'off'</span>,</div><div class="line">        <span class="string">'no-console'</span>: <span class="string">'off'</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="配置文件中的注释"><a href="#配置文件中的注释" class="headerlink" title="配置文件中的注释"></a>配置文件中的注释</h4><p>JSON和YAML配置文件都支持JavaScript格式注释， <code>package.json</code> 不支持注释</p>
<h3 id="代码格式化、自动修复一些问题"><a href="#代码格式化、自动修复一些问题" class="headerlink" title="代码格式化、自动修复一些问题"></a>代码格式化、自动修复一些问题</h3><p><code>eslint test.js --fix</code></p>
<p>发布一个ESLint NPM管理包。。。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="string">"root"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"env"</span>: &#123;</div><div class="line">        <span class="string">'browser'</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'es6'</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'node'</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'jquery'</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"extends"</span>: <span class="string">"eslint:recommended"</span>,</div><div class="line">    <span class="string">"rules"</span>: &#123;</div><div class="line">        <span class="string">'no-var'</span>: <span class="string">'off'</span>,</div><div class="line">        <span class="string">'no-console'</span>: <span class="string">'off'</span>,</div><div class="line">        <span class="comment">// "indent": [</span></div><div class="line">        <span class="comment">//     "error", "tab"</span></div><div class="line">        <span class="comment">// ],</span></div><div class="line">        <span class="comment">// "linebreak-style": [</span></div><div class="line">        <span class="comment">//     "error", "unix"</span></div><div class="line">        <span class="comment">// ],</span></div><div class="line">        <span class="comment">// "quotes": [</span></div><div class="line">        <span class="comment">//     "error", "single"</span></div><div class="line">        <span class="comment">// ],</span></div><div class="line">        <span class="comment">// "semi": ["error", "always"]</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// 禁止ESLint继续向上级查找配置文件</span></div><div class="line">    <span class="string">"root"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="comment">// 环境：预定以的全局变量</span></div><div class="line">    <span class="string">"env"</span>: &#123;</div><div class="line">        <span class="string">'browser'</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'es6'</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'node'</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'jquery'</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'amd'</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'commonjs'</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// JavaScript 语言选项</span></div><div class="line">    <span class="string">"parserOptions"</span>: &#123;</div><div class="line">        <span class="comment">// ECMAScript 版本</span></div><div class="line">        <span class="string">"ecmaVersion"</span>: <span class="number">6</span>,</div><div class="line">        <span class="string">"sourceType"</span>: <span class="string">"script"</span>, <span class="comment">//module</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"extends"</span>: <span class="string">"eslint:recommended"</span>,</div><div class="line">    <span class="string">"rules"</span>: &#123;</div><div class="line">        <span class="comment">////////////////</span></div><div class="line">        <span class="comment">// 警告</span></div><div class="line">        <span class="comment">////////////////</span></div><div class="line">        <span class="comment">// 强制使用有效的 JSDoc 注释</span></div><div class="line">        <span class="string">"valid-jsdoc"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号，</span></div><div class="line">        <span class="comment">// always-multiline：多行模式必须带逗号，单行模式不能带逗号</span></div><div class="line">        <span class="string">"comma-dangle"</span>: [</div><div class="line">            <span class="number">1</span>, <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 禁止或强制在单行代码块中使用空格(禁用)</span></div><div class="line">        <span class="string">"block-spacing"</span>: [</div><div class="line">            <span class="number">1</span>, <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了</span></div><div class="line">        <span class="comment">// e.g [0,"that"] 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值</span></div><div class="line">        <span class="string">"consistent-this"</span>: [</div><div class="line">            <span class="number">1</span>, <span class="string">"that"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制使用一致的换行风格</span></div><div class="line">        <span class="string">"linebreak-style"</span>: [</div><div class="line">            <span class="number">1</span>, <span class="string">"unix"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 要求在注释周围有空行      ( 要求在块级注释之前有一空行)</span></div><div class="line">        <span class="string">"lines-around-comment"</span>: [</div><div class="line">            <span class="number">1</span>, &#123;</div><div class="line">                <span class="string">"beforeBlockComment"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制 function 定义中最多允许的参数数量</span></div><div class="line">        <span class="string">"max-params"</span>: [</div><div class="line">            <span class="number">1</span>, <span class="number">7</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制 function 块最多允许的的语句数量</span></div><div class="line">        <span class="string">"max-statements"</span>: [</div><div class="line">            <span class="number">1</span>, <span class="number">200</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 要求方法链中每个调用都有一个换行符</span></div><div class="line">        <span class="string">"newline-per-chained-call"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 要求使用 JSDoc 注释</span></div><div class="line">        <span class="string">"require-jsdoc"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 强制一行的最大长度</span></div><div class="line">        <span class="string">"max-len"</span>: [</div><div class="line">            <span class="number">1</span>, <span class="number">200</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 禁止在没有类型检查操作符的情况下与 null 进行比较</span></div><div class="line">        <span class="string">"no-eq-null"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止在全局范围内使用 var 和命名的 function 声明</span></div><div class="line">        <span class="string">"no-implicit-globals"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止在循环中出现 function 声明和表达式</span></div><div class="line">        <span class="string">"no-loop-func"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁用魔术数字(3.14什么的用常量代替)</span></div><div class="line">        <span class="string">"no-magic-numbers"</span>: [</div><div class="line">            <span class="number">1</span>, &#123;</div><div class="line">                <span class="string">"ignore"</span>: [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">////////////////</span></div><div class="line">        <span class="comment">// 禁止</span></div><div class="line">        <span class="comment">////////////////</span></div><div class="line">        <span class="comment">// 禁用 console</span></div><div class="line">        <span class="string">"no-console"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">//  禁止不必要的括号 //(a * b) + c;//报错</span></div><div class="line">        <span class="string">"no-extra-parens"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止直接使用 Object.prototypes 的内置属性</span></div><div class="line">        <span class="string">"no-prototype-builtins"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制数组方法的回调函数中有 return 语句</span></div><div class="line">        <span class="string">"array-callback-return"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制把变量的使用限制在其定义的作用域范围内</span></div><div class="line">        <span class="string">"block-scoped-var"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">//  要求 return 语句要么总是指定返回的值，要么不指定</span></div><div class="line">        <span class="string">"consistent-return"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 alert、confirm 和 prompt</span></div><div class="line">        <span class="string">"no-alert"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 if 语句中有 return 之后有 else</span></div><div class="line">        <span class="string">"no-else-return"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用不必要的标签</span></div><div class="line">        <span class="string">"no-extra-label:"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 this 关键字出现在类和类对象之外</span></div><div class="line">        <span class="string">"no-invalid-this"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止对 Function 对象使用 new 操作符</span></div><div class="line">        <span class="string">"no-new-func"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 不允许对 function 的参数进行重新赋值</span></div><div class="line">        <span class="string">"no-param-reassign"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用短符号进行类型转换(!!fOO)</span></div><div class="line">        <span class="string">"no-implicit-coercion"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用指定的通过 require 加载的模块</span></div><div class="line">        <span class="string">"no-return-assign"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用 javascript: url</span></div><div class="line">        <span class="string">"no-script-url"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止出现未使用过的表达式</span></div><div class="line">        <span class="string">"no-unused-expressions"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用不必要的转义字符</span></div><div class="line">        <span class="string">"no-useless-escape"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 void 操作符</span></div><div class="line">        <span class="string">"no-void"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止在注释中使用特定的警告术语</span></div><div class="line">        <span class="string">"no-warning-comments"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止使用严格模式指令</span></div><div class="line">        <span class="string">"strict"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求所有的 var 声明出现在它们所在的作用域顶部</span></div><div class="line">        <span class="string">"vars-on-top"</span>: <span class="number">0</span>,</div><div class="line"></div><div class="line">        <span class="comment">// 强制使用命名的 function 表达式</span></div><div class="line">        <span class="string">"func-names"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用指定的标识符</span></div><div class="line">        <span class="string">"id-blacklist"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制标识符的最新和最大长度</span></div><div class="line">        <span class="string">"id-length"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求标识符匹配一个指定的正则表达式</span></div><div class="line">        <span class="string">"id-match"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制在 JSX 属性中一致地使用双引号或单引号</span></div><div class="line">        <span class="string">"jsx-quotes"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止 var 声明中的初始化(初值)</span></div><div class="line">        <span class="string">"init-declarations"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 不允许 catch 子句的参数与外层作用域中的变量同名</span></div><div class="line">        <span class="string">"no-catch-shadow"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用特定的全局变量</span></div><div class="line">        <span class="string">"no-restricted-globals"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 var 声明 与外层作用域的变量同名</span></div><div class="line">        <span class="string">"no-shadow"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止将 undefined 作为标识符</span></div><div class="line">        <span class="string">"no-undefined"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">//  强制一致地使用函数声明或函数表达式，方法定义风格，参数：</span></div><div class="line">        <span class="comment">//    declaration: 强制使用方法声明的方式，function f()&#123;&#125; e.g [2, "declaration"]</span></div><div class="line">        <span class="comment">//    expression：强制使用方法表达式的方式，var f = function() &#123;&#125;  e.g [2, "expression"]</span></div><div class="line">        <span class="comment">//    allowArrowFunctions: declaration风格中允许箭头函数。 e.g [2, "declaration", &#123; "allowArrowFunctions": true &#125;]</span></div><div class="line">        <span class="string">"func-style"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制最大行数</span></div><div class="line">        <span class="string">"max-lines"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制每一行中所允许的最大语句数量</span></div><div class="line">        <span class="string">"max-statements-per-line"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用按位运算符</span></div><div class="line">        <span class="string">"no-bitwise"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 不允许在变量定义之前使用它们</span></div><div class="line">        <span class="string">"no-use-before-define"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止 var 声明语句后有一行空行</span></div><div class="line">        <span class="string">"newline-after-var"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求 return 语句之前有一空行</span></div><div class="line">        <span class="string">"newline-before-return"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 continue 语句</span></div><div class="line">        <span class="string">"no-continue"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止在代码行后使用内联注释</span></div><div class="line">        <span class="string">"no-inline-comments"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 if 作为唯一的语句出现在 else 语句中</span></div><div class="line">        <span class="string">"no-lonely-if"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止混合使用不同的操作符</span></div><div class="line">        <span class="string">"no-mixed-operators"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 不允许使用三元操作符</span></div><div class="line">        <span class="string">"no-ternary"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用特定的语法</span></div><div class="line">        <span class="string">"no-restricted-syntax"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止标识符中有悬空下划线_bar</span></div><div class="line">        <span class="string">"no-underscore-dangle"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 不允许否定的表达式</span></div><div class="line">        <span class="string">"no-negated-condition"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 不允许使用嵌套的三元表达式</span></div><div class="line">        <span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用一元操作符 ++ 和 --</span></div><div class="line">        <span class="string">"no-plusplus"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止在 var 声明周围换行</span></div><div class="line">        <span class="string">"one-var-declaration-per-line"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止在可能的情况下要求使用简化的赋值操作符</span></div><div class="line">        <span class="string">"operator-assignment"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止属性前有空白</span></div><div class="line">        <span class="string">"no-whitespace-before-property"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制花括号内换行符的一致性</span></div><div class="line">        <span class="string">"object-curly-newline"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制在花括号中使用一致的空格</span></div><div class="line">        <span class="string">"object-curly-spacing"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制将对象的属性放在不同的行上</span></div><div class="line">        <span class="string">"object-property-newline"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止块内填充</span></div><div class="line">        <span class="string">"padded-blocks"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求对象字面量属性名称用引号括起来</span></div><div class="line">        <span class="string">"quote-props"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制分号之前和之后使用一致的空格</span></div><div class="line">        <span class="string">"semi-spacing"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求同一个声明块中的变量按顺序排列</span></div><div class="line">        <span class="string">"sort-vars"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止 Unicode BOM</span></div><div class="line">        <span class="string">"unicode-bom"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">//  要求正则表达式被括号括起来</span></div><div class="line">        <span class="string">"wrap-regex"</span>: <span class="number">0</span>,</div><div class="line"></div><div class="line">        <span class="comment">////////////////</span></div><div class="line">        <span class="comment">// 错误</span></div><div class="line">        <span class="comment">////////////////</span></div><div class="line">        <span class="comment">// 禁止条件表达式中出现赋值操作符</span></div><div class="line">        <span class="string">"no-cond-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在条件中使用常量表达式</span></div><div class="line">        <span class="comment">// if (false) &#123;</span></div><div class="line">        <span class="comment">//     doSomethingUnfinished();</span></div><div class="line">        <span class="comment">// &#125; //cuowu</span></div><div class="line">        <span class="string">"no-constant-condition"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在正则表达式中使用控制字符 ：new RegExp("\x1f")</span></div><div class="line">        <span class="string">"no-control-regex"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用 debugger</span></div><div class="line">        <span class="string">"no-debugger"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止 function 定义中出现重名参数</span></div><div class="line">        <span class="string">"no-dupe-args"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对象字面量中出现重复的 key</span></div><div class="line">        <span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止重复的 case 标签</span></div><div class="line">        <span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止空语句块</span></div><div class="line">        <span class="string">"no-empty"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在正则表达式中使用空字符集 (/^abc[]/)</span></div><div class="line">        <span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对 catch 子句的参数重新赋值</span></div><div class="line">        <span class="string">"no-ex-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的布尔转换</span></div><div class="line">        <span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的分号</span></div><div class="line">        <span class="string">"no-extra-semi"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对 function 声明重新赋值</span></div><div class="line">        <span class="string">"no-func-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">//  禁止在嵌套的块中出现 function 或 var 声明</span></div><div class="line">        <span class="string">"no-inner-declarations"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"functions"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 禁止 RegExp 构造函数中无效的正则表达式字符串</span></div><div class="line">        <span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在字符串和注释之外不规则的空白</span></div><div class="line">        <span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在 in 表达式中出现否定的左操作数</span></div><div class="line">        <span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">//   禁止把全局对象 (Math 和 JSON) 作为函数调用  错误：var math = Math();</span></div><div class="line">        <span class="string">"no-obj-calls"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止正则表达式字面量中出现多个空格</span></div><div class="line">        <span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用稀疏数组</span></div><div class="line">        <span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止出现令人困惑的多行表达式</span></div><div class="line">        <span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在return、throw、continue 和 break语句之后出现不可达代码</span></div><div class="line">        <span class="comment">/*</span></div><div class="line">                    function foo() &#123;</div><div class="line">                    return true;</div><div class="line">                    console.log("done");</div><div class="line">                    &#125;//错误</div><div class="line">                */</div><div class="line">        <span class="string">"no-unreachable"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 要求使用 isNaN() 检查 NaN</span></div><div class="line">        <span class="string">"use-isnan"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制 typeof 表达式与有效的字符串进行比较</span></div><div class="line">        <span class="comment">// typeof foo === "undefimed" 错误</span></div><div class="line">        <span class="string">"valid-typeof"</span>: <span class="number">2</span>,</div><div class="line"></div><div class="line">        <span class="comment">// 限制圈复杂度，也就是类似if else能连续接多少个</span></div><div class="line">        <span class="string">"complexity"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="number">9</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制所有控制语句使用一致的括号风格</span></div><div class="line">        <span class="string">"curly"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"all"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 要求 for-in 循环中有一个 if 语句</span></div><div class="line">        <span class="string">"guard-for-in"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用 arguments.caller 或 arguments.callee</span></div><div class="line">        <span class="string">"no-caller"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 定义对象的set存取器属性时，强制定义get</span></div><div class="line">        <span class="string">"accessor-pairs"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// switch 语句强制 default 分支，也可添加 // no default 注释取消此次警告</span></div><div class="line">        <span class="string">"default-case"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制object.key 中 . 的位置，参数:</span></div><div class="line">        <span class="comment">//      property，'.'号应与属性在同一行</span></div><div class="line">        <span class="comment">//      object, '.' 号应与对象名在同一行</span></div><div class="line">        <span class="string">"dot-location"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"property"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制使用.号取属性</span></div><div class="line">        <span class="comment">//    参数： allowKeywords：true 使用保留字做属性名时，只能使用.方式取属性</span></div><div class="line">        <span class="comment">//                          false 使用保留字做属性名时, 只能使用[]方式取属性 e.g [2, &#123;"allowKeywords": false&#125;]</span></div><div class="line">        <span class="comment">//           allowPattern:  当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值 e.g [2, &#123;"allowPattern": "^[a-z]+(_[a-z]+)+$"&#125;]</span></div><div class="line">        <span class="string">"dot-notation"</span>: [</div><div class="line">            <span class="number">2</span>, &#123;</div><div class="line">                <span class="string">"allowKeywords"</span>: <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">// 使用 === 替代 == allow-null允许null和undefined==</span></div><div class="line">        <span class="string">"eqeqeq"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"allow-null"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 不允许在 case 子句中使用词法声明</span></div><div class="line">        <span class="string">"no-case-declarations"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止除法操作符显式的出现在正则表达式开始的位置</span></div><div class="line">        <span class="string">"no-div-regex"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止出现空函数.如果一个函数包含了一条注释，它将不会被认为有问题。</span></div><div class="line">        <span class="string">"no-empty-function"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用空解构模式no-empty-pattern</span></div><div class="line">        <span class="string">"no-empty-pattern"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用 eval()</span></div><div class="line">        <span class="string">"no-eval"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止扩展原生类型</span></div><div class="line">        <span class="string">"no-extend-native"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的 .bind() 调用</span></div><div class="line">        <span class="string">"no-extra-bind"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止 case 语句落空</span></div><div class="line">        <span class="string">"no-fallthrough"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止数字字面量中使用前导和末尾小数点</span></div><div class="line">        <span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用类似 eval() 的方法</span></div><div class="line">        <span class="string">"no-implied-eval"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用 __iterator__ 属性</span></div><div class="line">        <span class="string">"no-iterator"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">//  禁用标签语句</span></div><div class="line">        <span class="string">"no-labels"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用不必要的嵌套块</span></div><div class="line">        <span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用多个空格</span></div><div class="line">        <span class="string">"no-multi-spaces"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用多行字符串，在 JavaScript 中，可以在新行之前使用斜线创建多行字符串</span></div><div class="line">        <span class="string">"no-multi-str"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对原生对象赋值</span></div><div class="line">        <span class="string">"no-native-reassign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在非赋值或条件语句中使用 new 操作符</span></div><div class="line">        <span class="string">"no-new"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对 String，Number 和 Boolean 使用 new 操作符</span></div><div class="line">        <span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用八进制字面量</span></div><div class="line">        <span class="string">"no-octal"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在字符串中使用八进制转义序列</span></div><div class="line">        <span class="string">"no-octal-escape"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用 __proto__ 属性</span></div><div class="line">        <span class="string">"no-proto"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用 var 多次声明同一变量</span></div><div class="line">        <span class="string">"no-redeclare"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止自我赋值</span></div><div class="line">        <span class="string">"no-self-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止自身比较</span></div><div class="line">        <span class="string">"no-self-compare"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用逗号操作符</span></div><div class="line">        <span class="string">"no-sequences"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止抛出非异常字面量</span></div><div class="line">        <span class="string">"no-throw-literal"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用一成不变的循环条件</span></div><div class="line">        <span class="string">"no-unmodified-loop-condition"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用未使用过的标签</span></div><div class="line">        <span class="string">"no-unused-labels"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的 .call() 和 .apply()</span></div><div class="line">        <span class="string">"no-useless-call"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的字符串字面量或模板字面量的连接</span></div><div class="line">        <span class="string">"no-useless-concat"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用 with 语句</span></div><div class="line">        <span class="string">"no-with"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制在parseInt()使用基数参数</span></div><div class="line">        <span class="string">"radix"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 要求 IIFE 使用括号括起来</span></div><div class="line">        <span class="string">"wrap-iife"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"any"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 要求或禁止 “Yoda” 条件</span></div><div class="line">        <span class="string">"yoda"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 禁止删除变量</span></div><div class="line">        <span class="string">"no-delete-var"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许标签与变量同名</span></div><div class="line">        <span class="string">"no-label-var"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止覆盖受限制的标识符</span></div><div class="line">        <span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用未声明的变量，除非它们在 /*global */ 注释中被提到</span></div><div class="line">        <span class="string">"no-undef"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止将变量初始化为 undefined</span></div><div class="line">        <span class="string">"no-undef-init"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止出现未使用过的变量</span></div><div class="line">        <span class="string">"no-unused-vars"</span>: [</div><div class="line">            <span class="number">2</span>, &#123;</div><div class="line">                <span class="string">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">                <span class="string">"args"</span>: <span class="string">"none"</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">// 指定数组的元素之间要以空格隔开(, 后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格</span></div><div class="line">        <span class="string">"array-bracket-spacing"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">//强制使用一致的缩进 第二个参数为 "tab" 时，会使用tab，</span></div><div class="line">        <span class="comment">// if while function 后面的&#123;必须与if在同一行，java风格。</span></div><div class="line">        <span class="string">"brace-style"</span>: [</div><div class="line">            <span class="number">2</span>,</div><div class="line">            <span class="string">"1tbs"</span>, &#123;</div><div class="line">                <span class="string">"allowSingleLine"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">// 双峰驼命名格式</span></div><div class="line">        <span class="string">"camelcase"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 控制逗号前后的空格</span></div><div class="line">        <span class="string">"comma-spacing"</span>: [</div><div class="line">            <span class="number">2</span>, &#123;</div><div class="line">                <span class="string">"before"</span>: <span class="literal">false</span>,</div><div class="line">                <span class="string">"after"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">// 控制逗号在行尾出现还是在行首出现 (默认行尾)</span></div><div class="line">        <span class="comment">// http://eslint.org/docs/rules/comma-style</span></div><div class="line">        <span class="string">"comma-style"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"last"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">//"SwitchCase" (默认：0) 强制 switch 语句中的 case 子句的缩进水平</span></div><div class="line">        <span class="comment">// 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always</span></div><div class="line">        <span class="string">"computed-property-spacing"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 文件末尾强制换行</span></div><div class="line">        <span class="string">"eol-last"</span>: <span class="number">2</span>,</div><div class="line">        <span class="string">"indent"</span>: [</div><div class="line">            <span class="number">2</span>,</div><div class="line">            <span class="number">4</span>, &#123;</div><div class="line">                <span class="string">"SwitchCase"</span>: <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制在对象字面量的属性中键和值之间使用一致的间距</span></div><div class="line">        <span class="string">"key-spacing"</span>: [</div><div class="line">            <span class="number">2</span>, &#123;</div><div class="line">                <span class="string">"beforeColon"</span>: <span class="literal">false</span>,</div><div class="line">                <span class="string">"afterColon"</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制回调函数最大嵌套深度 5层</span></div><div class="line">        <span class="string">"max-nested-callbacks"</span>: [</div><div class="line">            <span class="number">1</span>, <span class="number">5</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制在关键字前后使用一致的空格 (前后腰需要)</span></div><div class="line">        <span class="string">"keyword-spacing"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 要求构造函数首字母大写  （要求调用 new 操作符时有首字母大小的函数，允许调用首字母大写的函数时没有 new 操作符。）</span></div><div class="line">        <span class="string">"new-cap"</span>: [</div><div class="line">            <span class="number">2</span>, &#123;</div><div class="line">                <span class="string">"newIsCap"</span>: <span class="literal">true</span>,</div><div class="line">                <span class="string">"capIsNew"</span>: <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">// 要求调用无参构造函数时有圆括号</span></div><div class="line">        <span class="string">"new-parens"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用 Array 构造函数</span></div><div class="line">        <span class="string">"no-array-constructor"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许空格和 tab 混合缩进</span></div><div class="line">        <span class="string">"no-mixed-spaces-and-tabs"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许多个空行</span></div><div class="line">        <span class="string">"no-multiple-empty-lines"</span>: [</div><div class="line">            <span class="number">2</span>, &#123;</div><div class="line">                <span class="string">"max"</span>: <span class="number">2</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">// 禁止使用 Object 的构造函数</span></div><div class="line">        <span class="string">"no-new-object"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止 function 标识符和括号之间出现空格</span></div><div class="line">        <span class="string">"no-spaced-func"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">//  禁用行尾空格</span></div><div class="line">        <span class="string">"no-trailing-spaces"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止可以在有更简单的可替代的表达式时使用三元操作符</span></div><div class="line">        <span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制函数中的变量要么一起声明要么分开声明</span></div><div class="line">        <span class="string">"one-var"</span>: [</div><div class="line">            <span class="number">2</span>, &#123;</div><div class="line">                <span class="string">"initialized"</span>: <span class="string">"never"</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制操作符使用一致的换行符</span></div><div class="line">        <span class="string">"operator-linebreak"</span>: [</div><div class="line">            <span class="number">2</span>,</div><div class="line">            <span class="string">"after"</span>, &#123;</div><div class="line">                <span class="string">"overrides"</span>: &#123;</div><div class="line">                    <span class="string">"?"</span>: <span class="string">"before"</span>,</div><div class="line">                    <span class="string">":"</span>: <span class="string">"before"</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制使用一致的反勾号、双引号或单引号</span></div><div class="line">        <span class="string">"quotes"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"single"</span>, <span class="string">"avoid-escape"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 要求或禁止使用分号而不是 ASI（这个才是控制行尾部分号的，）</span></div><div class="line">        <span class="string">"semi"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"always"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制在块之前使用一致的空格</span></div><div class="line">        <span class="string">"space-before-blocks"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"always"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制在 function的左括号之前使用一致的空格</span></div><div class="line">        <span class="string">"space-before-function-paren"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"always"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制在圆括号内使用一致的空格</span></div><div class="line">        <span class="string">"space-in-parens"</span>: [</div><div class="line">            <span class="number">2</span>, <span class="string">"never"</span></div><div class="line">        ],</div><div class="line">        <span class="comment">// 要求操作符周围有空格</span></div><div class="line">        <span class="string">"space-infix-ops"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制在一元操作符前后使用一致的空格</span></div><div class="line">        <span class="string">"space-unary-ops"</span>: [</div><div class="line">            <span class="number">2</span>, &#123;</div><div class="line">                <span class="string">"words"</span>: <span class="literal">true</span>,</div><div class="line">                <span class="string">"nonwords"</span>: <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="comment">// 强制在注释中 // 或 /* 使用一致的空格</span></div><div class="line">        <span class="string">"spaced-comment"</span>: [</div><div class="line">            <span class="number">2</span>,</div><div class="line">            <span class="string">"always"</span>, &#123;</div><div class="line">                <span class="string">"markers"</span>: [</div><div class="line">                    <span class="string">"global"</span>,</div><div class="line">                    <span class="string">"globals"</span>,</div><div class="line">                    <span class="string">"eslint"</span>,</div><div class="line">                    <span class="string">"eslint-disable"</span>,</div><div class="line">                    <span class="string">"*package"</span>,</div><div class="line">                    <span class="string">"!"</span></div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><a href="http://morning.work/page/maintainable-nodejs/getting-started-with-eslint.html" target="_blank" rel="external">参考1：老雷篇(Node.js实战)</a></p>
<p><a href="http://ilucas.me/2016/03/01/eslint-guide/" target="_blank" rel="external">参考2：细节篇</a></p>
<p><a href="http://eslint.cn/" target="_blank" rel="external">ESLinit中文版文档</a></p>
<p><a href="http://eslint.cn/docs/rules/" target="_blank" rel="external">ESLinit中文版文档 - 规则配置</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[永远不要对人怀有恨意或怨言]]></title>
      <url>http://ntscshen.com/2017/02/09/%E6%B0%B8%E8%BF%9C%E4%B8%8D%E8%A6%81%E5%AF%B9%E4%BA%BA%E6%80%80%E6%9C%89%E6%81%A8%E6%84%8F%E6%88%96%E6%80%A8%E8%A8%80.html</url>
      <content type="html"><![CDATA[<p>仇恨和怨意，会降低大脑灵活性，导致智力严重缩水，偏离自我的发展轨道。</p>
<p><strong>善未必聪明，但坏必蠢</strong> 不要然自己成为蠢人，因此千万不可怨恨 <code>( 虐你千百遍，依旧带其如初恋 )</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式-策略模式(2)]]></title>
      <url>http://ntscshen.com/2017/02/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F(2).html</url>
      <content type="html"><![CDATA[<blockquote>
<p>策略模式( <strong>Strategy</strong> )：将定义的一组算法封装起来，使其相互之间可以替换。封装的算法具有一定独立性，不会随客户端变化而变化</p>
<p>策略模式( <strong>Strategy</strong> )：定义一系列的算法，把他们一个个封装起来，并且使他们可以相互替换</p>
</blockquote>
<h1 id="使用策略模式计算奖金"><a href="#使用策略模式计算奖金" class="headerlink" title="使用策略模式计算奖金"></a>使用策略模式计算奖金</h1><blockquote>
<p>年终奖是根据员工的工资基数和年底绩效来发放的</p>
<p>绩效S的人有4倍工资、绩效A的人有3倍工资，绩效B的人有2倍工资</p>
</blockquote>
<h2 id="最初的代码实现-1"><a href="#最初的代码实现-1" class="headerlink" title="最初的代码实现(1)"></a>最初的代码实现(1)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// calculate:计算，bonus:奖金，salary:薪水，performance:工作情况</span></div><div class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">performanceLevel, salary</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">'S'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">'A'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> salary * <span class="number">3</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">'B'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> salary * <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">calculateBonus(<span class="string">'S'</span>,<span class="number">25000</span>);</div><div class="line">calculateBonus(<span class="string">'B'</span>,<span class="number">9000</span>);</div></pre></td></tr></table></figure>
<p>非常简单的代码，但是存在的问题也显而易见。</p>
<ol>
<li><code>calculateBonus</code> 函数比较庞大，包含了很多if-else语句，这些语 <strong>句需要覆盖所有的逻辑分支</strong> </li>
<li><code>calculateBonus</code> 函数缺乏弹性，如果增加了一种新的绩效等级C，或者想把绩效S的奖金修改为5，那我们必须深入 <code>calculateBonus</code> 函数的内部实现，这违反 <strong>开放-封闭</strong> 原则</li>
<li>算法的复用性差，如果在程序的其他地方需要重用这些计算奖金的算法呢？我们的选择只有复制和粘贴</li>
</ol>
<h2 id="使用组合函数重构代码-2"><a href="#使用组合函数重构代码-2" class="headerlink" title="使用组合函数重构代码(2)"></a>使用组合函数重构代码(2)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> performanceS = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> performanceA = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> performanceB = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">performanceLevel, salary</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">'S'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> performanceS(salary);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">'A'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> performanceS(salary);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">'B'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> performanceS(salary);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">calculateBonus(<span class="string">'A'</span>, <span class="number">18000</span>);</div></pre></td></tr></table></figure>
<p>组容易想到重构代码的办法就是：使用组合函数来重构代码</p>
<ol>
<li>把各种算法封装到一个个的小函数里，这些小函数有这良好的命名规范、一目了然地知道它对应着那种算法，他们可以被复用在程序的其他地方</li>
</ol>
<p>程序确实得到了一些非常有限的改善，但是依然没有解决最重要的问题</p>
<ul>
<li><code>calculateBonus</code> 函数有可能越来越大</li>
<li>协同变化的时候缺乏弹性</li>
</ul>
<p><strong>将不变的部分</strong> 和 <strong>变化的部分</strong> 隔开是每个设计模式的主题</p>
<p>策略模式的目的就是将算法的使用与算法的实现分离开来</p>
<p>一个基于策略模式的程序至少由两部分组成。</p>
<ol>
<li>一组策略类，策略类封装了具体的算法，并负责具体的计算过程</li>
<li>环境类Context，Context接受客户的请求，随后把请求委托給摸一个策略类。要做到这点，说明Context中药维持对某个策略对象的引用</li>
</ol>
<h2 id="策略模式重构代码-3-1"><a href="#策略模式重构代码-3-1" class="headerlink" title="策略模式重构代码(3-1)"></a>策略模式重构代码(3-1)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// JavaScript版本的策略模式</span></div><div class="line"><span class="comment">// 策略模式指的是定义一系列的算法，并且把他们封装起来。</span></div><div class="line"><span class="keyword">var</span> strategies = &#123;</div><div class="line">    <span class="string">"S"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"A"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> salary * <span class="number">3</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"B"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> salary * <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">level, salary</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> strategies[level](salary);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">'S'</span>, <span class="number">30000</span>));</div><div class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">'A'</span>, <span class="number">20000</span>));</div></pre></td></tr></table></figure>
<blockquote>
<p>通过使用策略模式重构代码，<strong>消除了原程序中大片的条件分支语句</strong>。</p>
<p>所有跟计算奖金有关的逻辑不再放在Context中，而是分布在各个策略对象中。Context并没有计算过奖金的能力，而是把这个职责委托給了某个策略对象。每个策略对象负责的算法已被各自封装在对象内部。</p>
<p>当我们对这些策略对象发出”计算奖金”的请求时，它们会放回各自不同的计算结果，这正是对象多态性的体现，也是”它们可以相互替换”的目的，替换Context中当前保存的策略对象，便能执行不同的算法来得到我们想要的结果</p>
</blockquote>
<h1 id="策略模式-表单校验"><a href="#策略模式-表单校验" class="headerlink" title="策略模式 - 表单校验"></a>策略模式 - 表单校验</h1><blockquote>
<p>将用户输入的数据交給后台之前，常常要做一些前端力所能及的校验工作，比如注册的时候需要校验是否填写用户名，密码的长度是否符合规定。。</p>
<p><strong>这样是为了避免因为提交不合法数据而带来的不必要的网络开销。</strong></p>
</blockquote>
<p><strong>在点击提交按钮之前，有几条校验的逻辑</strong></p>
<ol>
<li>姓名、手机号、验证码不能为空</li>
<li>手机号、验证码 非错误</li>
<li>手机号必须符合格式</li>
<li>输入框需过滤特殊字符 - 防SQL注入</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"># validator:校验</div><div class="line"># strategy:策略</div><div class="line">// 第一步：把校验逻辑都封装成 '策略对象'</div><div class="line">var strategies = &#123;</div><div class="line">    isNonEmpty: function(value, errorMsg) &#123;</div><div class="line">        if (value === '') &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    minLength: function(value, length, errorMsg) &#123;</div><div class="line">        if (value.length &lt; length) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    isMobile: function(value, errorMsg) &#123;</div><div class="line">        if (!/^1[3|5|8][0-9]&#123;9&#125;9$/.test(value)) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">// 第二步：实现Validator类</div><div class="line">var Validator = function()&#123;</div><div class="line">	this.cache = [];// 保存校验规则</div><div class="line">&#125;;</div><div class="line">// 通过validator.add()方法向validator对象中添加一些校验规则</div><div class="line">Validator.prototype.add = function( Dom, Rule, ErrorMsg)&#123;</div><div class="line">	var ary = Rule.split(':');// 把strategy和参数值分开minLength:9</div><div class="line">  	this.cache.push(function()&#123;// 把校验的步骤用空函数包装起来，并且放入this.cache中、在开始校验的时候进行循环调用</div><div class="line">        // 用户挑选的 strategy</div><div class="line">    	var strategy = ary.shift();</div><div class="line">      	// 把input中的value值添加进参数列表 </div><div class="line">      	// 调用:strategies.minLength(value, length, errorMsg);</div><div class="line">      	ary.unshift(Dom.value);</div><div class="line">      	// 把errorMsg添加进参数列表</div><div class="line">      	ary.push(errorMsg);</div><div class="line">      	// 调用封装的策略对象</div><div class="line">      	// Dom替换Function类里this对象</div><div class="line">      	// ary将作为参数(arguments)传递给Function</div><div class="line">      	return strategies[strategy].apply(Dom, ary);</div><div class="line">  	&#125;);</div><div class="line">&#125;</div><div class="line">// 通过validator.start()启动校验</div><div class="line">Validator.prototype.start = function()&#123;</div><div class="line">  	// validatorFunc 一个独立变量、循环之后执行</div><div class="line">  	// 当前for循环的 结束界点是 this.cache取值为undefind的时候</div><div class="line">	for(var i=0; validatorFunc; validatorFunc=this.cache[i++])&#123;</div><div class="line">		var msg = validatorFunc();</div><div class="line">      	if(msg)&#123;</div><div class="line">          	return msg</div><div class="line">      	&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">// 第三步：执行步骤 - 用户向Validator类发送请求</div><div class="line">var validataFunc = function()&#123;</div><div class="line">  	var validator = new Validator();// 创建validator对象</div><div class="line">  	// 向this.cache中添加校验规则</div><div class="line">    validator.add(registerForm.userName, 'isNonEmpty', '用户名不能为空~');</div><div class="line">    validator.add(registerForm.password, 'minLength:6', '密码长度不能少于6位~');</div><div class="line">    validator.add(registerForm.phoneNumber, 'isMobile', '手机号格式不正确~');</div><div class="line">  	// 获得校验结果</div><div class="line">  	var errorMsg = validator.start();</div><div class="line">  	return errorMsg;// 返回校验结果：strategies中的错误返回值</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 第四步：提交表单</div><div class="line">var registerForm = document.getElementById('registerForm');</div><div class="line">registerForm.onsubmit = function()&#123;</div><div class="line">  	// 如果errorMsg有确切的返回值，说明未通过校验</div><div class="line">  	var errorMsg = validataFunc();</div><div class="line">  	if(errorMsg)&#123;</div><div class="line">      	alert(errorMsg);</div><div class="line">      	return false;// 阻止表单提交</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>当前的校验方法中用到了</p>
<ol>
<li>原型链模式</li>
<li>策略模式</li>
<li>在 validator.add()方法内:   <code>apply(Dom, ary);</code> 改变当前value的Dom的this值，改变this的同时传递this.cache数组内的参数(arguments) 并且执行</li>
<li>在 validator.add()方法内:在 <code>this.cache.push()</code> 中使用闭包</li>
<li>在 validator.start()方法内：for循环的结束节点用的是数组的空值 <code>undefined</code> 进行判定的，初始条件是一个不为false的函数值</li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式 - 单例模式(1)]]></title>
      <url>http://ntscshen.com/2017/02/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F(1).html</url>
      <content type="html"><![CDATA[<blockquote>
<p>单例模式( <strong>Singleton</strong> )：确保只有一个实例，并提供全局访问</p>
</blockquote>
<p>在 <strong>JavaScript</strong> 开发中，我们经常会把全局变量当做单例来使用</p>
<p><code>var a = {};</code></p>
<h1 id="命名空间-namespace-的管理"><a href="#命名空间-namespace-的管理" class="headerlink" title="命名空间( namespace )的管理"></a>命名空间( namespace )的管理</h1><blockquote>
<p>命名空间：为了让代码更易懂，人们常常用单词或者拼音定义变量或者方法，但由于人们可用的单词或者汉字拼音是有限的，所有不同的人定义的变量使用的单词名称很有可能重复，此时就需要使用命名空间来约束每个人定义的变量来解决这类问题。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> BusinessGoInit = &#123;</div><div class="line">    <span class="attr">getServerTime</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 获取服务器时间戳</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isUserVip</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 是否为会员</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">toShortUrl</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 短链接</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="模块分明"><a href="#模块分明" class="headerlink" title="模块分明"></a>模块分明</h1><blockquote>
<p>通过单例模式来管理代码库的各个模块</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> A = &#123;</div><div class="line">    <span class="attr">Util</span>: &#123;</div><div class="line">        <span class="attr">util_method1</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        <span class="attr">util_method2</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">Tool</span>: &#123;</div><div class="line">        <span class="attr">tool_method1</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        <span class="attr">tool_method2</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">Ajax</span>: &#123;</div><div class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        <span class="attr">post</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">others</span>: &#123;</div><div class="line">        <span class="attr">xxx</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        <span class="attr">yyy</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="管理静态变量"><a href="#管理静态变量" class="headerlink" title="管理静态变量"></a>管理静态变量</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Conf = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 私有变量</span></div><div class="line">    <span class="keyword">var</span> config = &#123;</div><div class="line">            <span class="attr">MAX_NUM</span>: <span class="number">100</span>,</div><div class="line">            <span class="attr">MIN_NUM</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">COUNT</span>: <span class="number">1000</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 返回取值器对象</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="comment">// 通过取值器方法访问静态变量</span></div><div class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> config[name] ? config[name] : <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"><span class="keyword">var</span> count = Conf.get(<span class="string">'COUNT'</span>);</div><div class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 1000</span></div><div class="line"><span class="comment">// 静态变量只能访问，不能修改。并且无创建后就能使用</span></div></pre></td></tr></table></figure>
<h1 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h1><blockquote>
<p>惰性单例：在需要的时候才创建对象实例。惰性单例是单例模式的重点，这种技术在实际开发中非常有用。</p>
</blockquote>
<p>案例：登陆窗、在一个项目里登陆窗总是唯一的，不可能同时存在两个登陆窗口的情况 <strong>( 两种解决方案 )</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解决方案一：</span></div><div class="line"><span class="comment">// 1、在页面加载完成的时候便创建好这个div弹窗</span></div><div class="line"><span class="comment">// 2、弹窗一开始肯定是隐藏的姿态</span></div><div class="line"><span class="comment">// 3、用户点击登陆按钮，显示弹窗</span></div><div class="line"><span class="keyword">var</span> loginLayer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">  oDiv.innerHTML = <span class="string">'我是登录框'</span>;</div><div class="line">  oDiv.style.display = <span class="string">'none'</span>;</div><div class="line">  <span class="built_in">document</span>.body.appendChild(oDiv);</div><div class="line">  <span class="keyword">return</span> oDiv;</div><div class="line">&#125;)();</div><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  loginLayer.style.display = <span class="string">'block'</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这种方式有一个问题，也许我们进入当前项目根本不需要登陆操作</span></div><div class="line"><span class="comment">// 应为登陆窗口总是在一开始就被创建好，那么就会白白浪费掉一些DOM节点</span></div><div class="line"><span class="comment">// 解决方案一：改进1</span></div><div class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">  oDiv.innerHTML = <span class="string">'我是登录框'</span>;</div><div class="line">  oDiv.style.display = <span class="string">'none'</span>;</div><div class="line">  <span class="built_in">document</span>.body.appendChild(oDiv);</div><div class="line">  <span class="keyword">return</span> oDiv;</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> loginLayer = createLoginLayer();</div><div class="line">  loginLayer.style.display = <span class="string">'block'</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 改进方案虽然实现了惰性的目的，但是失去了单例的效果。</span></div><div class="line"><span class="comment">// 当我们每次点击登陆按钮的时候，都会创建一个新的登录弹窗div</span></div><div class="line"><span class="comment">// 虽然我们可以在点击弹出上的关闭按钮时，把这个弹出从页面中删除</span></div><div class="line"><span class="comment">// 但这样频繁地创建和删除节点明显是不合理的，也是不必要的</span></div><div class="line"><span class="comment">// 解决方案一：改进2</span></div><div class="line"><span class="comment">// 可以使用一个变量来判断是否已经创建过登录弹出了</span></div><div class="line"><span class="keyword">var</span> createLoginLayer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> div = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(!div)&#123;</div><div class="line">      div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">      div.innerHTML = <span class="string">'我是登录弹出'</span>;</div><div class="line">      div.style.display = <span class="string">'none'</span>;</div><div class="line">      <span class="built_in">document</span>.body.appendChild(div);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> div;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> loginLayer = createLoginLayer();</div><div class="line">  loginLayer.style.display = <span class="string">'block'</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这样写就完成了一个可用的惰性单例，但还有一些问题</span></div><div class="line"><span class="comment">// 创建对象和管理单例都放在createLoginLayer对象内部</span></div><div class="line"><span class="comment">// 复用性 - 若下次创建iframe或者script，就必须如法炮制</span></div><div class="line"><span class="comment">// 把createLoginLayer函数几乎照抄一遍</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解决方案二：按需加载</span></div><div class="line"><span class="comment">// 我们把如何管理单例的逻辑从原来的代码中抽离出来</span></div><div class="line"><span class="comment">// 封装在getSingle函数内部，创建对象的方法fn被当做参数动态的传入</span></div><div class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> result;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// return result || (result = fn());</span></div><div class="line">    <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">  oDiv.innerHTML = <span class="string">'我是登录框'</span>;</div><div class="line">  oDiv.style.display = <span class="string">'none'</span>;</div><div class="line">  <span class="built_in">document</span>.body.appendChild(oDiv);</div><div class="line">  <span class="keyword">return</span> oDiv;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> createSingleLoginLayer = getSingle(createLoginLayer);</div><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> loginLayer = createSingleLoginLayer();</div><div class="line">  loginLayer.style.display = <span class="string">'block'</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 我们把创建实例对象的职责 和 管理单例的职责分别放置在两个方法里面</span></div><div class="line"><span class="comment">// 两个方法可以独立变化而互不影响，当他们链接在一起，就完成了创建唯一实例对象的功能</span></div><div class="line"><span class="comment">// 再试试创建唯一的iframe用于动态加载第三方页面</span></div><div class="line"><span class="keyword">var</span> createSingleIframe = getSingle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">  <span class="built_in">document</span>.body.appendChild(iframe);</div><div class="line">  <span class="keyword">return</span> iframe;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> loginLayer = createSingleIframe();</div><div class="line">  loginLayer.src = <span class="string">'http://hao123.com'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[this深入理解]]></title>
      <url>http://ntscshen.com/2016/12/31/this%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3.html</url>
      <content type="html"><![CDATA[<p><code>回想起这6个月的工作经历、业务做了不少，熟练度直线上升。然而归纳却寥寥无几，这让我再次抓起了我当初简历博客的初衷，不花时间精力去总结，平时业务上用到的零散的知识就很难形成体系。善于归纳总结：如果不善于归纳总结，每次做完项目就结束了，进入循环，那么永远是士兵，不要总是讲一些口号，喊口号的人可以当主持人，但是不能当将军。不归纳就不能前进，不前进就永远在原地踏步。认识一步步前进的，只要一小步一小步地前进，过几年当你汇总总结时，就会发现你前进了一大步。</code></p>
<h1 id="This、call、apply"><a href="#This、call、apply" class="headerlink" title="This、call、apply"></a>This、call、apply</h1><blockquote>
<p><strong>This：</strong><br>JavaScript的this总是指向一个对象。</p>
<p>而具体指向哪个对象是在运行时基于函数的执行环境动态绑定的，而非函数被声明时的环境。</p>
<p><code>this</code> 的绑定和函数声明的位置没有任何关系，只取决于函数的<strong>调用方式</strong>。</p>
<p><code>this</code> 实际上是在函数被调用时发生的绑定，它指向什么完全取决于<strong>函数在哪里被调用</strong></p>
<p>在理解 <code>this</code> 是什么❓首先必须要找到”<strong>调用位置</strong>“，然后判断符合那种规则。</p>
<p>当一个函数被调用时，会创建一个”执行上下文环境”：</p>
<ol>
<li>包含函数在哪里被调用 <strong>( 调用栈 )</strong> 。</li>
<li>函数调用方法。</li>
<li>传入的参数等信息。</li>
<li><code>this</code> 就是记录的其中一个属性，会在函数执行的过程中用到。</li>
</ol>
</blockquote>
<h2 id="This指向大致可以分为如下四类："><a href="#This指向大致可以分为如下四类：" class="headerlink" title="This指向大致可以分为如下四类："></a>This指向大致可以分为如下四类：</h2><ol>
<li>作为对象的方法调用。</li>
<li>作为普通函数调用。</li>
<li>构造器调用</li>
<li><code>Function.prototype.call</code> 和 <code>Function.prototype.apply</code> 调用</li>
</ol>
<h3 id="1、作为对象的方法调用"><a href="#1、作为对象的方法调用" class="headerlink" title="1、作为对象的方法调用"></a>1、作为对象的方法调用</h3><blockquote>
<p>当函数作为对象的方法被调用时, <code>this</code> 指向该对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当函数作为对象的方法被调用时、this指向该对象</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">a</span>:<span class="number">1</span>,</div><div class="line">  <span class="attr">getA</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span> === obj);<span class="comment">//true</span></div><div class="line">    alert(<span class="keyword">this</span>.a);<span class="comment">//1</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-1、隐式绑定"><a href="#1-1、隐式绑定" class="headerlink" title="1-1、隐式绑定"></a>1-1、隐式绑定</h4><blockquote>
<p>另一条需要考虑的规则是：</p>
<p>调用位置是 <strong>否有上下文 — “对象”</strong> ，或者说</p>
<p>是否被某个对象拥有( 包含 )</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function foo()&#123;</div><div class="line">	console.log(this.a);</div><div class="line">&#125;</div><div class="line">var obj = &#123;</div><div class="line">  	a:2,</div><div class="line">  	foo:foo</div><div class="line">&#125;</div><div class="line">obj.foo();</div><div class="line">## 1：无论是直接在obj中定义、还是先定义再添加为引用属性，这个函数严格来说都不属于obj对象。</div><div class="line">## 2：然而，调用位置会使用obj上下文来引用函数，因此你可以说函数被调用时obj对象"拥有"或者"包含"了它。</div><div class="line">## 3：无论我们如何称呼这个模式，当foo()被调用时，它的落脚点确实指向obj对象。当函数引用有上下文对象时，"隐式绑定"规则会把函数调用中的"this"绑定到这个上下文对象。因为调用foo()时this被绑定到obj，所以this.a和obj.a是一样的</div><div class="line">## 4：对象属性引用链中，只有最后一层( 最顶层 )会影响到调用位置</div></pre></td></tr></table></figure>
<h3 id="1-2、隐式绑定丢失"><a href="#1-2、隐式绑定丢失" class="headerlink" title="1-2、隐式绑定丢失"></a>1-2、隐式绑定丢失</h3><blockquote>
<p>最常见的隐式绑定问题：</p>
<p>被”隐式绑定”的函数会丢失绑定对象，也就是说它会应用”默认绑定”，从而把this绑定到全局对象或者”undefined”上，取决于是否是”严格模式”</p>
<p>解决办法：使用”显示绑定”的方案 <code>call(...)和apply(…)</code> 的”硬绑定”模式</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">// 丢失案例一：堆内存地址的引用</div><div class="line">function foo()&#123;</div><div class="line">  console.log(this.a);</div><div class="line">&#125;</div><div class="line">var obj = &#123;</div><div class="line">  a:2,</div><div class="line">  foo:foo</div><div class="line">&#125;</div><div class="line">var bar = obj.foo;</div><div class="line">var a = "oops,global";</div><div class="line">bar();// oops,global</div><div class="line">## 虽然bar是obj.foo的一个引用。</div><div class="line">## 但是实际上，它引用的是foo函数本身,是foo函数在堆内存空间的地址(复制的是指针的指向)</div><div class="line">## 本质上：bar() == foo();</div><div class="line">## 因此此时的bar()其实是一个不带任何修饰的函数调用，因此应用了默认绑定。</div><div class="line"></div><div class="line">// 丢失案例二：非常常见并且非常出乎意料的情况(参数传递)</div><div class="line">function foo()&#123;</div><div class="line">  	console.log(this.a);</div><div class="line">&#125;</div><div class="line">function doFoo(fn)&#123;</div><div class="line">  	fn();</div><div class="line">&#125;</div><div class="line">var obj = &#123;</div><div class="line">  	a:2,</div><div class="line">  	foo:foo</div><div class="line">&#125;</div><div class="line">var a = "oops,global";</div><div class="line">doFoo(obj.foo);</div><div class="line">## 参数传递其实"就是"一种隐式赋值，因此我们传入函数时也会被隐式赋值。</div></pre></td></tr></table></figure>
<h4 id="引用类型参数传递问题"><a href="#引用类型参数传递问题" class="headerlink" title="引用类型参数传递问题"></a>引用类型参数传递问题</h4><blockquote>
<p>引用类型：引用类型传递的是指针的方向</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  	obj.name = <span class="string">'aaa'</span>;</div><div class="line">  	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">person.name = <span class="string">'bbb'</span>;</div><div class="line"><span class="keyword">var</span> newPerson = setName(person);</div><div class="line"><span class="built_in">console</span>.log(person.name + <span class="string">' || '</span> + newPerson.name);</div></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/zareb/p/5699571.html" target="_blank" rel="external">http://www.cnblogs.com/zareb/p/5699571.html</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">	obj.name = <span class="string">'aaa'</span>;</div><div class="line">	<span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">// 如果是按引用传递的,此处传参进来obj应该被重新引用新的内存单元</span></div><div class="line">	obj.name = <span class="string">'ccc'</span>;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">	person.name = <span class="string">'bbb'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> newPerson = setName(person);</div><div class="line"><span class="built_in">console</span>.log(person.name);</div><div class="line"><span class="built_in">console</span>.log(newPerson.name);</div></pre></td></tr></table></figure>
<h3 id="2、作为普通函数调用-this-默认绑定"><a href="#2、作为普通函数调用-this-默认绑定" class="headerlink" title="2、作为普通函数调用 ( this - 默认绑定 )"></a>2、作为普通函数调用 ( this - 默认绑定 )</h3><blockquote>
<p>当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，此时的 <code>this</code> 总是指向全局对象。在浏览器的 <code>JavaScript</code> 里，这个全局对象是 <code>window</code> 对象。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">// 使用普通函数时、其内的this总是指向window</div><div class="line">// 在代码中，getName()是直接使用不带任何修饰的函数引用进行调用的。因此只能使用"默认绑定"，无法应用其他规则。</div><div class="line">// 如果是严格模式( strict mode ),那么全局对象将无法使用默认规则，因此this会绑定到"undefined"上</div><div class="line">// 案例一：</div><div class="line">window.name = 'globalName';</div><div class="line">var getName = function()&#123;</div><div class="line">  return this.name;</div><div class="line">&#125;</div><div class="line">console.log(getName());//globalName</div><div class="line">// 案例二：引用getName在堆内存中的地址</div><div class="line">window.name = 'globalName';</div><div class="line">var myObject = &#123;</div><div class="line">  name:'ntscshen',</div><div class="line">  getName:function()&#123;</div><div class="line">    return this.name;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">var myName = myObject.getName;</div><div class="line">console.log(myName());</div><div class="line">// 案例三：在事件函数内部、有一个局部的方法。此方法被调用时，方法内部的this指向了window</div><div class="line">document.getElementById('div1').onclick = function()&#123;</div><div class="line">  console.log(this.id);// 'div1'</div><div class="line">  //var _this = this;// 简单的解决方案</div><div class="line">  var callBack = function()&#123;</div><div class="line">    //console.log(_this.id);// 'div1'</div><div class="line">    console.log(this.id);// 'window'</div><div class="line">  &#125;</div><div class="line">  callBack();</div><div class="line">&#125;</div><div class="line">## 没当你想要把this和"词法"作用域的查找混合使用时，一定要提醒自己，这是无法实现的。</div></pre></td></tr></table></figure>
<h3 id="3、构造器调用"><a href="#3、构造器调用" class="headerlink" title="3、构造器调用"></a>3、构造器调用</h3><h4 id="4、-Function-prototype-call-和-Function-prototype-apply"><a href="#4、-Function-prototype-call-和-Function-prototype-apply" class="headerlink" title="4、 Function.prototype.call 和 Function.prototype.apply"></a>4、 <code>Function.prototype.call</code> 和 <code>Function.prototype.apply</code></h4><h4 id="4-1：硬绑定"><a href="#4-1：硬绑定" class="headerlink" title="4-1：硬绑定"></a>4-1：硬绑定</h4><blockquote>
<p>硬绑定的典型应用场景就是：<strong>创建一个包裹函数，传入所有的参数并返回接收到的所有值。</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 案例一：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">2</span>&#125;</div><div class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	foo.call(obj);</div><div class="line">&#125;;</div><div class="line">bar();</div><div class="line">setTimeout(bar,<span class="number">100</span>);</div><div class="line">bar.call(<span class="built_in">window</span>);</div><div class="line"><span class="comment">// 我们首先创建了函数bar()，并在它的内部手动调用了foo.call(obj),因此强制把foo的this绑定到了obj。无论之后如何调用函数bar，它总会手动在obj上调用foo。这种绑定是一种显示的强制绑定，因此称之为"硬绑定"</span></div><div class="line"><span class="comment">// 案例二：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a,something);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a + something;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, obj</span>)</span>&#123;</div><div class="line">  	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      	<span class="keyword">return</span> fn.apply(obj, <span class="built_in">arguments</span>);</div><div class="line">  	&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">var</span> b = bar(<span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(b);</div><div class="line"><span class="comment">// 由于硬绑定是一种非常常用的模式，所以在ES5中提供了内置的方法Function.prototype.bind,它的用法如下</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[手机号码中间部分替换成星号]]></title>
      <url>http://ntscshen.com/2016/12/07/%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E4%B8%AD%E9%97%B4%E9%83%A8%E5%88%86%E6%9B%BF%E6%8D%A2%E6%88%90%E6%98%9F%E5%8F%B7.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>手机号中间4未数字使用星号替换</p>
</blockquote>
<ol>
<li>字符串截取</li>
<li>正则</li>
</ol>
<h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串截取 + 拼接</span></div><div class="line"><span class="string">'18500009973'</span>.substr(<span class="number">0</span>, <span class="number">3</span>) + <span class="string">'****'</span> + <span class="string">'18500009973'</span>.substr(<span class="number">7</span>, <span class="number">11</span>);</div><div class="line"><span class="comment">// 优化:确保输入的是字符串类型</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatPhone</span>(<span class="params">phone</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> phone == <span class="string">'number'</span>)&#123;</div><div class="line">	phone = phone.toString();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> phone.substr(<span class="number">0</span>, <span class="number">3</span>) + <span class="string">'****'</span> + phone.substr(<span class="number">7</span>, <span class="number">11</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 什么❓您不知道toString()是干什么的❓请看最底部</span></div></pre></td></tr></table></figure>
<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatPhone</span>(<span class="params">phone</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> phone == <span class="string">'number'</span>)&#123;</div><div class="line">        phone = phone.toString();</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">return</span> phone.replace(<span class="regexp">/(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)/</span>, <span class="string">'$1****$2'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 匹配前面三个数字，讲匹配的值給$1,然后匹配中间4个数字，再匹配最后4个数字給$2</span></div><div class="line"><span class="comment">// 什么❓您不会正则❓好吧！我也只会一点点</span></div></pre></td></tr></table></figure>
<h4 id="JavaScript-toString-函数详解"><a href="#JavaScript-toString-函数详解" class="headerlink" title="JavaScript toString()函数详解"></a>JavaScript toString()函数详解</h4><p><code>toString()</code> 函数用于将当前对象以字符串的形式放回。</p>
<p>由于该方法属于 <code>Object</code> 对象，因此所有的对象都”<strong>继承</strong>“了 <code>Object</code> 的对象实例，所有的的实例对象都可以使用该方法、所有主流浏览器均支持该函数</p>
<blockquote>
<p>JavaScript的许多内置对象都重写了该函数、以实现更适合自身的功能需求</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Number</td>
<td style="text-align:left">返回数值的字符串表示。(可以指定转换的 <strong>进制</strong> ) <a href="http://www.365mini.com/page/javascript-number-tostring.htm" target="_blank" rel="external">Number.toString详细说明地址</a></td>
</tr>
<tr>
<td>Boolean</td>
<td style="text-align:left">如果布尔值是true，则返回”true”,否则放回”false”</td>
</tr>
<tr>
<td>Array</td>
<td style="text-align:left">将Array的每个元素转换为字符串，并将它们以此连接起来，两个元素之间用英文逗号作为分隔符进行拼接</td>
</tr>
<tr>
<td>Date</td>
<td style="text-align:left">返回日期的文本表示</td>
</tr>
<tr>
<td>Error</td>
<td style="text-align:left">返回一个包含相关错误信息的字符串。</td>
</tr>
<tr>
<td>Object(默认)</td>
<td style="text-align:left">返回”[object ObjectName]”，其中 ObjectName 是对象类型的名称。</td>
</tr>
<tr>
<td>Function</td>
<td style="text-align:left">返回如下格式的字符串，其中 functionname 是一个函数的名称，此函数的 toString 方法被调用： “function functionname() { [native code] }”</td>
</tr>
</tbody>
</table>
<p><strong>实例:console</strong> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组</span></div><div class="line"><span class="keyword">var</span> array = [<span class="string">"ntscshen"</span>,<span class="literal">true</span>,<span class="string">"哈哈"</span>,<span class="number">99</span>];array</div><div class="line">[<span class="string">"ntscshen"</span>, <span class="literal">true</span>, <span class="string">"哈哈"</span>, <span class="number">99</span>]</div><div class="line">array.toString()</div><div class="line"><span class="string">"ntscshen,true,哈哈,99"</span></div><div class="line"><span class="comment">// 布尔</span></div><div class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;bool</div><div class="line"><span class="literal">true</span></div><div class="line">bool.toString()</div><div class="line"><span class="string">"true"</span></div><div class="line"><span class="comment">// 日期</span></div><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>;date</div><div class="line">Wed Dec <span class="number">07</span> <span class="number">2016</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">42</span> GMT+<span class="number">0800</span> (CST)</div><div class="line">date.toString()</div><div class="line"><span class="string">"Wed Dec 07 2016 14:44:42 GMT+0800 (CST)"</span></div><div class="line"><span class="comment">// 数字</span></div><div class="line"><span class="keyword">var</span> num = <span class="number">12</span>;</div><div class="line"><span class="built_in">document</span>.writeIn(num.toString());</div><div class="line"><span class="comment">// 什么❓您不知道writeIn❓那您知道write吗❓知道它们之间的区别吗❓知道如何在console打印内容吗❓知道打印的几种方式吗❓</span></div></pre></td></tr></table></figure>
<h4 id="write和writeIn"><a href="#write和writeIn" class="headerlink" title="write和writeIn"></a>write和writeIn</h4><ol>
<li><code>document.write(&#39;hello word&#39;)</code> 方法可向文档写入 HTML 表达式或 JavaScript 代码。 <strong>主要用于简单的打印内容到页面上</strong></li>
<li><code>writeIn()</code> 区别于 <code>write()</code> 的地方就是、 <code>writeIn()</code> 在末尾加了一个<strong>空格</strong> </li>
</ol>
<h4 id="console"><a href="#console" class="headerlink" title="console"></a>console</h4><ul>
<li><code>console.log()</code> 向web控制台输出一条消息 <strong>(输出普通信息)</strong></li>
<li><code>console.dir()</code> 向web控制台打印出该对象的所有属性和属性值，这个方法是我经常使用的 不知道比for in方便了多少</li>
<li><code>console.debug()</code>  console.log方法的别称，使用方法可以参考<strong>Console.log()</strong></li>
<li><code>console.warn()</code>  <strong>输出警告信息</strong></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webPlayer使用方法总结]]></title>
      <url>http://ntscshen.com/2016/12/02/webPlayer%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93.html</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="webPlayer-使用方法的一些总结"><a href="#webPlayer-使用方法的一些总结" class="headerlink" title="webPlayer 使用方法的一些总结"></a>webPlayer 使用方法的一些总结</h1><blockquote>
<p>( 建议先仔细阅读WebPlayerSDK点播.pdf和 WebPlayerSDK直播.pdf )</p>
</blockquote>
<h3 id="点播播放器相关"><a href="#点播播放器相关" class="headerlink" title="点播播放器相关"></a>点播播放器相关</h3><ol>
<li><p>文档中给出的 <code>playId()</code> 方法在页面只有一个点播播放器的时候可以正常使用，但当页面中有直播播放器时再次调用点播播放器的 <code>playId()</code> 方法就会失效，页面不会报错代码也会执行，只是执行完毕后没有出现预期的效果。初步猜测是因为其他播放器对这个功能造成了影响。解决方法是，重新创建一个播放器覆盖原有播放器。</p>
</li>
<li><p>当点播播放器中的视频是仅会员可看时，未登录用户点击此视频时播放器内部会提示用户登陆，此时要想实现登陆操作需要在点播播放器的页面接口集合 <code>( interface对象 )</code> 中传入 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">openLoginDialog :<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	verifyUserloginStatus();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当点播播放器中的视频是仅会员可看时，已登陆的非会员用户点击此视频时，播放器内部会提示用户开通会员，pc页面点击此按钮可以正常跳转到支付页面；m站页面点击此按钮无效，需要用事件委托的形式给开通会员按钮绑定跳转到支付页面的事件；</p>
</li>
<li><p>PC页面中当点播播放器中的视频是仅会员可看时，用户中途登陆是会员的账户时播放器不会刷新（有的仅会员可看视频可以免费看前6分钟，所以存在中途登陆的情况），会依然提示他购买会员。调用播放器的 <code>loginStateChange()</code> 方法并未能解决问题，解决办法是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//监听登录状态 切换时触发</span></div><div class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    LEPass.onStatusChange(<span class="function"><span class="keyword">function</span> (<span class="params">type, userInfo</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (type == <span class="string">"signIn"</span> ) &#123;</div><div class="line">            ($(<span class="string">".na-drama-list"</span>).find(<span class="string">".playing"</span>).find(<span class="string">"a"</span>).data(<span class="string">"pid"</span>)) &#123;</div><div class="line">                dianboPlayer($(<span class="string">".na-drama-list"</span>).find(<span class="string">".playing"</span>).find(<span class="string">"a"</span>).data(<span class="string">"pid"</span>));</div><div class="line">          &#125; </div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>（找到当前正在播放视频的id，利用此id重新创建播放器或者将id传入到 <code>playId()</code> 方法中，具体怎么操作需要看当前的代码结构）；m站页面没有此问题，因为只要登陆状态发生改变m站页面会自动强制刷新。</p>
</li>
<li><p>关于点播播放器续播的问题可以调用播放器的onPlayerVideoComplete事件回调</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">onPlayerVideoComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">status</span>: <span class="string">'playerContinue'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="直播播放器相关"><a href="#直播播放器相关" class="headerlink" title="直播播放器相关"></a>直播播放器相关</h3><p>直播分为“直播中”、“未开始”、“已结束”三种状态，其中要注意已结束的直播视频（也就是“回看”视频），从后台取出来的回看视频数据一般会带有一个名为 <code>recordingId</code> 的参数，但是有的原本正在直播中视频在刚刚结束的时候虽然已经变成了回看视频，但是并未带有 <code>recordingId</code> 参数。所以，对于回看视频：</p>
<ol>
<li>如果取到recordingId参数就将recordingId传入到点播播放器；</li>
<li>如果取不到recordingId参数就将原本的视频id传入直播播放器。</li>
</ol>
<h3 id="一些共同的问题总结"><a href="#一些共同的问题总结" class="headerlink" title="一些共同的问题总结"></a>一些共同的问题总结</h3><ol>
<li>关于播放器黑边，如果视频的比例全部一样，那么只要保证播放器盒子的宽高比和视频的一致就没有黑边了；如果视频的比例不一致，请尽可能将播放器的宽高调到一个合适的比例以保证黑边在所有视频中都尽可能小。</li>
<li>目前已知直播播放器会影响到点播播放器的 <code>playId()</code> 方法，由于本次项目经验有限，关于播放器之间的相互影响以及其他经验还需要屏幕外的你在未来的项目中进行总结。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[需求文档]]></title>
      <url>http://ntscshen.com/2016/11/28/%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3.html</url>
      <content type="html"><![CDATA[<p>需求文档</p>
<ol>
<li>无论是正式的产品需求或是Demo需求( <strong>必须要出产品需求</strong> )</li>
<li>基于对当前产品需求的了解之后 - 才能运用对应的技术站进行开发</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac上网络抓包Charles]]></title>
      <url>http://ntscshen.com/2016/11/19/Mac%E4%B8%8A%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85Charles.html</url>
      <content type="html"><![CDATA[<p>抓包？就是将<a href="http://baike.baidu.com/view/1542295.htm" target="_blank" rel="external">网络传输</a>发送与接收的<a href="http://baike.baidu.com/view/25880.htm" target="_blank" rel="external">数据包</a>进行截获、重发、编辑、转存等操作，也用来检查网络安全。抓包也经常被用来进行数据截取等。</p>
<p>为什么调试配置Host？ 我们知道在网络上访问网站，要首先通过DNS服务器把网络域名（www.XXXX.com）解析成61.XXX.XXX.XXX的IP地址后，我们的计算机才能访问。要是对于每个域名请求我们都要等待域名服务器解析后返回IP信息，这样访问网络的效率就会降低，而Hosts文件就能提高解析效率。</p>
<ul>
<li>在很多单位的局域网中，会有服务器提供给用户使用。但由于局域网中一般很少架设DNS服务器，访问这些服务要输入难记的IP地址，对不少人来说相当麻烦。现在可以分别给这些服务器取个容易记住的名字，然后在Hosts中建立IP映射，这样以后访问的时候我们输入这个服务器的名字就行了。</li>
<li>对于Lotus的服务器和一些<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="external">数据库</a>服务器，在访问时如果直接输入IP地址那是不能访问的，只能输入服务器名才能访问。那么我们配置好Hosts文件，这样输入服务器名就能顺利连接了。</li>
</ul>
<p><a href="http://www.charlesproxy.com/" target="_blank" rel="external">Charles</a> Mac下常用的网络封包截取工具(免费30天 - 试用期过后建议购买<a href="http://www.charlesproxy.com/" target="_blank" rel="external">正版)</a></p>
<p><img src="http://occeqxmsk.bkt.clouddn.com/30Day.jpg" alt="http://occeqxmsk.bkt.clouddn.com/30Day.jpg"></p>
<p>Charles通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析</p>
<h3 id="Charles主要功能"><a href="#Charles主要功能" class="headerlink" title="Charles主要功能"></a>Charles主要功能</h3><ol>
<li>截取Http和Https网络封包。</li>
<li>支持重发网络请求，方便前后端调试。</li>
<li>支持修改网络请求参数。</li>
<li>支持网络请求的截获并动态修改。</li>
<li>支持模拟满网速网络</li>
</ol>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>下载好Charles - 打开下载包( <code>.dmg</code>后缀的文件 )后将Charles拖到<code>Application</code>目录下即可。</p>
<p>启动Charles后、第一次Charles会请求您给它设置系统代理的权限。图例如下！</p>
<blockquote>
<p>源：</p>
</blockquote>
<p><img src="http://occeqxmsk.bkt.clouddn.com/QQ20161120-1-2x.png" alt="http://occeqxmsk.bkt.clouddn.com/QQ20161120-1-2x.png"></p>
<blockquote>
<p>译：</p>
</blockquote>
<p><img src="http://occeqxmsk.bkt.clouddn.com/AutomaticMacOSConfigurationProxy-translate.jpg" alt="http://occeqxmsk.bkt.clouddn.com/AutomaticMacOSConfigurationProxy-translate.jpg"></p>
<h5 id="Firefox代理服务器配置"><a href="#Firefox代理服务器配置" class="headerlink" title="Firefox代理服务器配置"></a>Firefox代理服务器配置</h5><blockquote>
<p>源：</p>
</blockquote>
<p><img src="http://occeqxmsk.bkt.clouddn.com/Charle-Firefox-Proxy.png" alt="http://occeqxmsk.bkt.clouddn.com/Charle-Firefox-Proxy.png"></p>
<blockquote>
<p>译：</p>
</blockquote>
<p><img src="http://occeqxmsk.bkt.clouddn.com/Charle-Firefox-Proxy.jpg" alt="http://occeqxmsk.bkt.clouddn.com/Charle-Firefox-Proxy.jpg"></p>
<h4 id="在Firefox中打开-https-addons-mozilla-org-zh-CN-firefox-addon-charles-proxy"><a href="#在Firefox中打开-https-addons-mozilla-org-zh-CN-firefox-addon-charles-proxy" class="headerlink" title="在Firefox中打开 https://addons.mozilla.org/zh-CN/firefox/addon/charles-proxy/"></a>在Firefox中打开 <a href="https://addons.mozilla.org/zh-CN/firefox/addon/charles-proxy/" target="_blank" rel="external">https://addons.mozilla.org/zh-CN/firefox/addon/charles-proxy/</a></h4><blockquote>
<p>源：</p>
</blockquote>
<p><img src="http://occeqxmsk.bkt.clouddn.com/QQ20161120-3-2x.png" alt="http://occeqxmsk.bkt.clouddn.com/QQ20161120-3-2x.png"></p>
<blockquote>
<p>译：</p>
</blockquote>
<p><img src="http://occeqxmsk.bkt.clouddn.com/firefox-charles-proxy.jpg" alt="http://occeqxmsk.bkt.clouddn.com/firefox-charles-proxy.jpg"></p>
<p>这样在Firefox可以抓包<code>Proxy -&gt; Mozilla Firefox Proxy</code></p>
<p><img src="http://occeqxmsk.bkt.clouddn.com/062002.jpg" alt="http://occeqxmsk.bkt.clouddn.com/062002.jpg"></p>
<h3 id="将Charles设置成系统代理"><a href="#将Charles设置成系统代理" class="headerlink" title="将Charles设置成系统代理"></a>将Charles设置成系统代理</h3><h3 id="Charles主界面"><a href="#Charles主界面" class="headerlink" title="Charles主界面"></a>Charles主界面</h3><ul>
<li><p>Structure：结构( 视图将网络请求按访问的域名分类 )</p>
</li>
<li><p>Sequence：先后次序( 视图将网络请求按访问的时间排序 )</p>
<blockquote>
<p>根据具体的需求在这两个视图之间来回切换、大多数情况下截获的请求会很多，Charles提供了一个简单Filter功能，可以输入关键字来快速筛选URL中带指定关键字的网络请求</p>
</blockquote>
</li>
<li><p>对于具体的网络请求</p>
<ul>
<li>若请求的内容是POST表单、Charles会自动将表单进行分项显示</li>
<li>若是JSON格式的内容、Charles会自动将JSON内容格式化</li>
<li>若是图片、Charles会显示出图片的预览</li>
</ul>
</li>
</ul>
<p><img src="http://occeqxmsk.bkt.clouddn.com/homgpage1.jpg" alt="http://occeqxmsk.bkt.clouddn.com/homgpage1.jpg"></p>
<h3 id="抓包工具之断点修改-重点"><a href="#抓包工具之断点修改-重点" class="headerlink" title="抓包工具之断点修改( 重点 )"></a>抓包工具之断点修改( 重点 )</h3><blockquote>
<p>更改返回数据来测试临界情况：这种做法可以让一个前端开发人员独立完成测试而不用拉一个后端一起联调，并且各种特殊维度，临界点都可以独立完成。仅仅自己在青花瓷上改来改去就可以达到效果了。</p>
</blockquote>
<p><code>在实际的工作中、你可以经常用来把某些值改为临界情况 - 以查看当前页面在处理这些临界状况收的反应、这样比(找后端联调\找临界点的测试账号)这些数据成本要低得多，</code></p>
<h3 id="截获IPhone上的网络封包"><a href="#截获IPhone上的网络封包" class="headerlink" title="截获IPhone上的网络封包"></a>截获IPhone上的网络封包</h3><blockquote>
<p>Charles通常用来截获本地上的网络封包、当我们需要时、可以用来截取其他设备上的网络请求，如下</p>
</blockquote>
<ol>
<li><p>截取IPhone上的网络请求、首先打开Charles的代理功能<code>Proxy -&gt; Proxy Settings</code>填入代理端口<code>8888</code> 并勾选<code>&quot;Enable transparent HTTP proxying&quot;</code> 完成在Charles上的设置</p>
<p><img src="http://occeqxmsk.bkt.clouddn.com/proxy-settings.jpg" alt="http://occeqxmsk.bkt.clouddn.com/proxy-settings.jpg"></p>
</li>
<li><p>在手机上<code>&quot;设置&quot; -&gt; &quot;无线局域网&quot;</code> 找到当前链接的WIFI名、点击右侧详情( 感叹号 )，在最底部找到<code>HTTP代理</code>、修改成手动</p>
<ol>
<li><p><code>设置 - 无线局域网</code></p>
<p><img src="http://images0.cnblogs.com/blog2015/717809/201507/051346395823455.png" alt="http://images0.cnblogs.com/blog2015/717809/201507/051346395823455.png"></p>
</li>
<li><p>服务器：<code>当前Charles运行所在电脑的IP：系统偏好设置 -&gt; 网络</code> 选中现在连着的网（大部分人应该都是WiFi吧）</p>
</li>
<li><p>​</p>
<p><img src="http://images0.cnblogs.com/blog2015/717809/201507/051341085151931.png" alt="http://images0.cnblogs.com/blog2015/717809/201507/051341085151931.png"></p>
</li>
<li><p>服务器 ： <code>电脑IP地址</code>  ，端口号: <code>8888</code>，</p>
<p><img src="http://images0.cnblogs.com/blog2015/717809/201507/051346589484842.png" alt="http://images0.cnblogs.com/blog2015/717809/201507/051346589484842.png"></p>
</li>
</ol>
</li>
<li><p>设置完成后、打开iphone上的任意与需要网络的软件、就可以在Charles上看到弹出如下信息,点击<code>&quot;Allow&quot;</code>即可完成设置 - 这是会有一大波抓包信息的展示</p>
<p><img src="http://occeqxmsk.bkt.clouddn.com/charles-proxy-confirm-1.jpg" alt="http://occeqxmsk.bkt.clouddn.com/charles-proxy-confirm-1.jpg"></p>
</li>
</ol>
<h3 id="模拟慢速网络"><a href="#模拟慢速网络" class="headerlink" title="模拟慢速网络"></a>模拟慢速网络</h3><blockquote>
<p>在开发时、我们常常需要模拟慢网速或者高延迟的网络、以测试在移动网络下、开发的产品是否显示正常</p>
</blockquote>
<ol>
<li>在Charles菜单中，选择<code>&quot;Proxy - Throttle Setting&quot;</code>在之后弹出的对话框中、勾选上<code>&quot;Enable Throttling&quot;</code>,并且可以设置不同网速的类型如下</li>
</ol>
<h3 id="修改网络请求内容"><a href="#修改网络请求内容" class="headerlink" title="修改网络请求内容"></a>修改网络请求内容</h3><ol>
<li>有时候伪类调试服务器的接口、我们需要反复尝试不同的参数的网络请求，Charles可以很方便的提供网络请求的修改和重发功能、在网络请求上点击右键,选择<code>&quot;Edit&quot;</code>,即可编辑</li>
<li>我们可以修改请求的任何信息<ol>
<li>URL地址</li>
<li>端口号</li>
<li>参数</li>
<li>等等</li>
</ol>
</li>
<li>之后点击<code>&quot;Execute&quot;</code>即可发送该修改后的网络请求。Charles支持我们多次修改和发送该请求，这对于我们和服务器端调试接口非常方便</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[页面操作iFrame的Dom]]></title>
      <url>http://ntscshen.com/2016/11/18/%E9%A1%B5%E9%9D%A2%E6%93%8D%E4%BD%9CiFrame%E7%9A%84Dom.html</url>
      <content type="html"><![CDATA[<p>没有过时的技术只有变态的需求</p>
<blockquote>
<p>contentWindow兼容主流浏览器、获取子窗口的window对象;</p>
<p>指定的frame或iframe所在的window对象</p>
</blockquote>
<p>document对象是window对象的一个子对象;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'iframe ID'</span>).contentWindow.document来获取iframe的<span class="built_in">document</span>对象。相当于contentDocument属性</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'userIframe'</span>).onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> </div><div class="line"><span class="comment">// (LEPass &amp;&amp; LEPass.isLogin) 登录返回true、没登录放回false document.getElementById('userIframe').contentDocument.body.onclick = function(a)&#123;</span></div><div class="line">    <span class="keyword">if</span>(a.target.className == <span class="string">'ntscshen'</span> &amp;&amp; !(LEPass &amp;&amp; LEPass.isLogin()))&#123;</div><div class="line">      <span class="comment">// 登录内容信息</span></div><div class="line">      LEPass.openLoginPage(<span class="built_in">window</span>.location.href, <span class="string">''</span>, &#123;</div><div class="line">        ...</div><div class="line">        ...</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Atom编辑器的使用技巧]]></title>
      <url>http://ntscshen.com/2016/10/08/Atom%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html</url>
      <content type="html"><![CDATA[<h1 id="在Atom中快速打开命令行"><a href="#在Atom中快速打开命令行" class="headerlink" title="在Atom中快速打开命令行"></a>在Atom中快速打开命令行</h1><p>实际开发的痛点：经常从编辑器切换到命令行( 虽然可以使用CmdTap类似的工具 )、但找到当前目录是需要花费很多时间</p>
<p>安装插件快速打开当前文件命令行目录</p>
<p><code>apm install open-terminal-here</code></p>
<ul>
<li>打开当前项目的顶级目录<code>alt-cmd-t</code></li>
<li>打开当前文件所在的位置<code>ctrl-cmd-t</code></li>
</ul>
<h3 id="在Atom中新建文件、重命名、移动"><a href="#在Atom中新建文件、重命名、移动" class="headerlink" title="在Atom中新建文件、重命名、移动"></a>在Atom中新建文件、重命名、移动</h3><p><code>advanced-open-file</code></p>
<ul>
<li>alt-cmd-o 新建文件</li>
<li>shift-cmd-p rename重命名文件</li>
<li>ctrl-0<ul>
<li>m 修改</li>
<li>a 添加文件</li>
<li>shift-a 添加文件夹</li>
<li>d 复制</li>
</ul>
</li>
</ul>
<h3 id="自定义snippets-cson"><a href="#自定义snippets-cson" class="headerlink" title="自定义snippets.cson"></a>自定义snippets.cson</h3><ul>
<li>atom-ternjs</li>
</ul>
<h2 id="Atom快捷键的使用"><a href="#Atom快捷键的使用" class="headerlink" title="Atom快捷键的使用"></a>Atom快捷键的使用</h2><p>关闭标签后 - 后悔<code>ctrl-shift-t</code></p>
<p>样式表修改 Atom styless</p>
<p>树形视图的修改和浏览</p>
<ul>
<li>cmd-\ 打开关闭树形试图( cmd-k-b )</li>
<li>转移视图光标( ctrl-0 )</li>
<li>ctrl-[  展开收缩 树形视图   ]</li>
<li>ctrl-alt[  递归展开收缩  ]</li>
<li>J向上</li>
<li>k向下</li>
<li>展开目录 L</li>
<li>收起目录H</li>
</ul>
<h4 id="添加文件和目录"><a href="#添加文件和目录" class="headerlink" title="添加文件和目录"></a>添加文件和目录</h4><ul>
<li>ctrl - 0 - add ( a ) 创建时候可以建立对应目录下的文件夹</li>
<li>ctrl-0 shift-a 创建目录</li>
</ul>
<h4 id="移动和重命名、复制粘贴删除"><a href="#移动和重命名、复制粘贴删除" class="headerlink" title="移动和重命名、复制粘贴删除"></a>移动和重命名、复制粘贴删除</h4><ul>
<li>ctrl-0 move( m ) 移动到对应的文件目录下、可以用来重命名文件或者目录</li>
<li>duplicate( d )复制</li>
</ul>
<h3 id="APM-是atom-package-menage-atom包管理工具"><a href="#APM-是atom-package-menage-atom包管理工具" class="headerlink" title="APM 是atom package menage atom包管理工具"></a>APM 是atom package menage atom包管理工具</h3><ul>
<li>可以让用户在命令行下安装跟新删除编辑器的package</li>
<li>apm search color 在命令行中显示对应的包</li>
<li>apm home color-picker 使用默认的浏览器打开对应包的首页</li>
<li>apm list包列表<ul>
<li>Community packages 社区包</li>
<li>Built-in Atom packages Atom内置包</li>
</ul>
</li>
</ul>
<p>Snippets代码片段 alt+shift+s代码片段的介绍和一些简写形式</p>
<h3 id="ATOM插件-Community-packages"><a href="#ATOM插件-Community-packages" class="headerlink" title="ATOM插件 - Community packages"></a>ATOM插件 - Community packages</h3><ul>
<li>atom汉化<code>atom-simplified-chinese-menu</code>插件</li>
</ul>
<ul>
<li><p>tool bar插件</p>
</li>
<li><p><code>atom-ternjs</code> JavaScript和Node自动补全插件 - 必备</p>
</li>
<li><p><code>highlight-selected</code> 高亮所有和当前选中单词一样的单词，IDE标配。</p>
</li>
<li><p><code>autocomplete-paths</code> 路径补全插件</p>
</li>
<li><p><a href="https://link.zhihu.com/?target=https%3A//atom.io/packages/linter" target="_blank" rel="external">linter**</a><strong> 和 </strong><a href="https://link.zhihu.com/?target=https%3A//atom.io/packages/linter-eslint" target="_blank" rel="external">linter-eslint**</a></p>
<p>linter-eslint依赖linter，安装之后就可以按照.eslintrc文件里面配置校验JS了。</p>
</li>
</ul>
<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><ul>
<li><code>file-icons</code> 高颜值的文件图标</li>
<li><code>pigments</code> 代码颜色可视化<code>修改颜色位置 Marker TYpe: dot</code></li>
<li><code>indent-guide-improved</code>  代码大括号范围提示。</li>
<li><code>minimap</code> 类sublime的小地图功能</li>
<li><code>fold-comments</code> 注释快速折叠 ctrl-shift-/ <code>快速注释会打出 顿号</code></li>
<li><code>elastic-tabstops</code> 弹性制表位  </li>
<li><code>highlight-selected</code> 高亮所有和当前选中单词一样的单词<ul>
<li><code>quick-highlight</code> 高亮、同时高亮多处非选中的单词，在读代码时挺有用</li>
<li><code>highlight-line</code> 高亮当前行</li>
</ul>
</li>
<li>​</li>
</ul>
<h2 id="IDE功能补全"><a href="#IDE功能补全" class="headerlink" title="IDE功能补全"></a>IDE功能补全</h2><ul>
<li><code>emmet</code></li>
<li><code>atom-ternjs</code> 提供了了比较精确的代码补全功能ECMAScript、DOM/BOM、NodeJS</li>
<li><code>autocomplete-paths</code> 路径补全</li>
<li><code>advanced-open-file</code> 翻遍的打开创建文件 <code>cmd+alt+o</code></li>
<li><code>autoclose-html</code> 自动闭合标签</li>
<li><code>atom-beautify</code> 代码美化、自己支持的语法不多、语法例如 PHP、MarkDown、Python 则需系统安装一些额外的插件</li>
<li><code>editorconfig</code> 空格和utf-8、<a href="http://editorconfig.org/" target="_blank" rel="external">EditorConfig</a>帮助开发人员保持不同的编辑器之间是一致的编码风格</li>
<li><code>Run In Browser</code> 打开浏览器 <strong>ctrl</strong> + <strong>alt</strong> + <strong>r</strong></li>
<li><code>Bracket Matcher</code> 括号匹配</li>
<li><code>docblockr</code> 注释</li>
<li><code>autocomplete-emojis</code> 表情包</li>
<li><code>Open Terminal Here</code> 打开当前文件命令行<ul>
<li>当前目录终端<code>ctrl-cmd-t</code></li>
<li>项目目录终端<code>alt-cmd-t</code></li>
</ul>
</li>
<li><code>regex-railroad-diagram package</code> 正则</li>
<li><code>Activate Power Mode</code> 爆炸</li>
<li>css-snippets</li>
<li>javascript-snippets</li>
<li>jQuery-snippets</li>
</ul>
<ol>
<li>command palette</li>
<li>dev live reload</li>
</ol>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul>
<li><code>hyperclick</code> 可以跳转到变量定义的地方，也能识别import/require，点击模块名可以跳转到模块的内部。</li>
<li><code>js-hyperclick</code> 配合 <code>hyperclick</code> 使用</li>
<li>Atom全局配置ESLint<code>http://wrox.cn/article/100077190/</code></li>
<li><code>linter</code> 和 <code>linter-eslint</code></li>
</ul>
<ul>
<li>Run in Browser <code>ctrl + alt + R</code> 打开浏览器</li>
<li>Atom Beautify <code>ctrl + alt + B</code> 格式化代码</li>
<li>​</li>
<li>highlight-selected</li>
</ul>
<h4 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h4><ul>
<li>​</li>
<li>emment</li>
<li>autocomplete-paths 路径</li>
</ul>
<h4 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h4><ul>
<li>chinese-menu 简体中文汉化</li>
<li>atom-beautify 格式化</li>
<li>Atom ternjs 代码补全</li>
<li>autoclose-html 自动添加结束标记</li>
<li>minimap 小地图</li>
<li>autocomplete-emojis 自动补全表情包</li>
<li>autocomplete-modules 自动补全模块路径 <code>require(&#39;vue/js.js&#39;)</code></li>
<li>autocomplete-paths 自动补全路径</li>
<li>docblockr 注释帮助包 <code>Decorate</code> 注释装饰</li>
<li>emment</li>
<li>file-icons 文件扩展名图标和颜色以改善视觉体验</li>
<li>highlight-selected 高亮显示所选</li>
<li>quick-highlight 显示多个持久高亮</li>
<li>javascript-snippets js 片断</li>
<li>open-terminal-here 打开定位当前目录的终端</li>
<li>script 代码或者脚本运行</li>
<li>pigments css颜色</li>
<li>regex-railroad-diagram 正则铁路图</li>
</ul>
<ul>
<li><p>linter</p>
</li>
<li><p>linter-eslint</p>
</li>
<li><p>linter-csslint</p>
</li>
<li><p>​</p>
</li>
<li><p>​</p>
</li>
<li><p>​</p>
</li>
<li><p>editorconfig 编辑设置 <code>帮助开发者在不同编辑器之间保持一致的编码风格</code></p>
</li>
<li><p>css和js语法检查</p>
</li>
<li><p>​</p>
<p>​</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动端基础事件（一）]]></title>
      <url>http://ntscshen.com/2016/09/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%BA%8B%E4%BB%B6%EF%BC%88%E4%B8%80%EF%BC%89.html</url>
      <content type="html"><![CDATA[<h4 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h4><ul>
<li>touchstart  手指触摸屏幕时候触发</li>
<li>touched 手指离开屏幕时候触发</li>
<li>touchmove 手指在屏幕上滑动的时候连续地触发。在这个事件发生期间，调用preventDefault()事件可以阻止滚动。</li>
</ul>
<h4 id="addEventListener-‘事件名’-函数-匿名OR有名-false-冒泡和捕获"><a href="#addEventListener-‘事件名’-函数-匿名OR有名-false-冒泡和捕获" class="headerlink" title="addEventListener(‘事件名’,函数[匿名OR有名],false[冒泡和捕获]);"></a>addEventListener(‘事件名’,函数[匿名OR有名],false[冒泡和捕获]);</h4><ul>
<li>DOM中提供的注册事件监听器的方法</li>
</ul>
<ul>
<li>它允许给一个事件注册多个监听器。不会存在前后覆盖问题</li>
<li>在Chrome的模拟器下可以一直识别</li>
</ul>
<h4 id="Event-事件对象、事件函数中默认的第一个参数"><a href="#Event-事件对象、事件函数中默认的第一个参数" class="headerlink" title="Event 事件对象、事件函数中默认的第一个参数"></a>Event 事件对象、事件函数中默认的第一个参数</h4><ul>
<li>cancelBubble(取消冒泡) 阻止冒泡<code>console.dir(event);</code></li>
<li>target(标靶)  事件发生的位置<code>console.dir(event);</code></li>
<li>e.preventDefault();阻止默认事件<ul>
<li>阻止页面中的文字选中</li>
<li>阻止页面上的系统菜单、滚动条失效、overflow: auto;失效</li>
</ul>
</li>
</ul>
<h4 id="事件穿透"><a href="#事件穿透" class="headerlink" title="事件穿透"></a>事件穿透</h4><ol>
<li>PC鼠标事件、但事件的执行会有300ms的延迟</li>
<li>点击了页面之后 - 浏览器会记录点击下去的坐标</li>
<li>300ms后、在该坐标找到现在在这的元素 - 执行事件</li>
</ol>
<p>解决办法</p>
<ol>
<li>e.preventDefault(); 阻止默认事件</li>
<li>不在移动端使用鼠标事件</li>
<li>不用a标签做页面跳转(点透问题、防止误触a标签)、把a标签的href的跳转<code>e.preventDefault()</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 误触</span></div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        e.preventDefault();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mistake</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.isMove = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> aBlock = <span class="built_in">document</span>.querySelectorAll(<span class="string">'a'</span>);</div><div class="line">    aBlock[<span class="number">0</span>].addEventListener(<span class="string">'touchmove'</span>, mistake, <span class="literal">false</span>);</div><div class="line">    aBlock[<span class="number">0</span>].addEventListener(<span class="string">'touchend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isMove) &#123;</div><div class="line">            <span class="built_in">window</span>.location.href = <span class="string">'http://www.baidu.com'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.isMove = <span class="literal">false</span>;</div><div class="line">    &#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[页面性能管理]]></title>
      <url>http://ntscshen.com/2016/09/01/%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E7%AE%A1%E7%90%86.html</url>
      <content type="html"><![CDATA[<h3 id="网页生成的过程、大致分成五步"><a href="#网页生成的过程、大致分成五步" class="headerlink" title="网页生成的过程、大致分成五步"></a>网页生成的过程、大致分成五步</h3><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015091502.png" alt=""></p>
<blockquote>
<p>第一步到第三幕都非常快( 一刹那 )</p>
<ul>
<li>“生成布局” - flow - layout(布局) - Render Tree( 渲染树 )</li>
<li>“绘制” - paint</li>
<li>flow + paint = render(渲染)</li>
</ul>
</blockquote>
<h3 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h3><ul>
<li>重绘：元素外观改变所触发的浏览器行为(visibility\outline\背景色)</li>
<li>重排：渲染树重新计算</li>
</ul>
<blockquote>
<p>“重绘”不一定”重排”</p>
<p>“重排”必定”重绘”</p>
</blockquote>
<p>从性能角度考虑</p>
<ul>
<li>经量不把 <code>读操作</code> 和  <code>写操作</code> 在一个里面</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">div.style.left = div.offsetLeft + <span class="number">10</span> + <span class="string">"px"</span>;</div><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="keyword">var</span> left = div.offsetLeft;</div><div class="line">div.style.left = left + <span class="number">10</span> + <span class="string">"px"</span>;</div></pre></td></tr></table></figure>
<h2 id="一般规则如下"><a href="#一般规则如下" class="headerlink" title="一般规则如下"></a>一般规则如下</h2><ul>
<li>样式表越简单、重排和重绘就会越快</li>
<li>重排和重绘的DOM元素层级越高、成本就越高</li>
<li>table元素的重排和重绘成本、高于div元素</li>
</ul>
<h2 id="提高性能的技巧"><a href="#提高性能的技巧" class="headerlink" title="提高性能的技巧"></a>提高性能的技巧</h2><ol>
<li><p>读操作和写操作、应该放在一起( 不要在两个读操作之间、加入一个写操作 )</p>
</li>
<li><p>若某个样式是通过重排得到的、把结果缓存下来、避免下一次用到的时候、浏览器重排</p>
<ol>
<li>在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量。</li>
</ol>
</li>
<li><p>不要在JS里一条条的修改样式、要通过改变class或者csstext属性、一次性地改变样式</p>
</li>
<li><p>将元素设置<code>display: none</code>( 需要一次重排和重绘 )、然后对这个几点进行N+次操作、最后再回复显示( 需要一次重排和重绘 )、这样、使用<code>两次</code>重新渲染、取代可能的N+次的重新渲染</p>
</li>
<li><p>position属性为absolute或fixed的元素时候、重排的开销比较小、因为不用考虑它对其他元素的影响</p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad   </span></div><div class="line"><span class="keyword">var</span> top = <span class="number">10</span>;   </div><div class="line">ele.style.left = left + <span class="string">"px"</span>;   </div><div class="line">ele.style.top = top + <span class="string">"px"</span>;   <span class="comment">// Good   </span></div><div class="line"><span class="keyword">var</span> top = <span class="number">10</span>,left = <span class="number">10</span>;   </div><div class="line">$(<span class="string">'ele'</span>).css(&#123;<span class="attr">left</span>: left,<span class="attr">top</span>: top&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="css的效率"><a href="#css的效率" class="headerlink" title="css的效率"></a>css的效率</h2><blockquote>
<p>浏览器读取CSS选择器有一个很重要的原则，它们从右到左读取。这意味这像 <code>ul &gt; li a[title=&quot;home&quot;]</code>这样的选择器， <code>a[title=&quot;home&quot;]</code> 将是最先被读取的。</p>
</blockquote>
<ul>
<li>ID是唯一的、所以不需要任何的标签进行修饰、这样只会让效率更低<code>ul#main{}</code></li>
<li><strong>没有什么比用后代选择器更糟糕的做法了</strong> 后代选择器是css选择器里最昂贵的选择器</li>
</ul>
<h2 id="总结的优化技巧"><a href="#总结的优化技巧" class="headerlink" title="总结的优化技巧"></a>总结的优化技巧</h2><h4 id="CSS优化"><a href="#CSS优化" class="headerlink" title="CSS优化"></a>CSS优化</h4><ul>
<li>CSS尽量避免使用后代选择器 - 使用子代选择器代替<code>没有比后代选择器跟糟糕的</code></li>
<li>在书写CSS时、使用类选择器”代替”元素选择器<code>类选择器获取速度优于元素选择器</code></li>
<li>样式表越简单、嵌套层级越小( 重排和重绘就会越快 ) <code>sass书写不大于三层</code></li>
</ul>
<h4 id="jQuery优化"><a href="#jQuery优化" class="headerlink" title="jQuery优化"></a>jQuery优化</h4><ul>
<li><p>选择器优化</p>
<ul>
<li>尽可能使用ID选择器( 唯一的、最快的 )，因为jQuery源码中调用的是<code>document.getElementById()</code>、不要与其他选择器混搭</li>
<li>class选择器次之<code>调用原生getElementByClassName()方法</code>、指定类选择器的上下文、以缩小选择范围(默认：document)<code>$(&#39;.class&#39;,&#39;#div1&#39;)</code>;</li>
<li>多级查找中、选择器的子类越详细越好<code>$(&quot;.data li.li1&quot;)</code> </li>
<li>$parent.find(‘p.child’) 最快查找子元素的方法<code>find()会调用原生的 getElementByTagName方法</code></li>
<li>经可能的缓存<code>(缓存比不缓存快了2-3倍)</code> <code>为什么要缓存得到的变量？就是减少访问DOM接口</code></li>
<li>使用链式写法、jQuery会自动缓存每一步的结果、链式比不链式写法快了25%左右</li>
</ul>
</li>
<li><p>DOM优化</p>
<ul>
<li><p>如果对一个DOM进行大量处理操作、使用.detach()方法、取出 - 处理 - 插入、使用.detach()方法比不使用时，快了60%。<code>.detach(分离)</code></p>
</li>
<li><p><code>.detach()</code>移除被选元素，包括所有文本和子节点。这个方法会保留 jQuery 对象中的匹配的元素，因而可以在将来再使用这些匹配的元素。会保留所有绑定的事件、附加的数据。<code>主要为了处理元素的大量DOM操作而生</code></p>
</li>
<li><p>改动DOM结构、先把它们合并，然后再一次性插入</p>
</li>
<li><p>不要使用匿名函数来用作事件处理、这样不利于调试、测试、维护和服用<code>$(&quot;#btn&quot;).on(&#39;click&#39;,&#39;a&#39;,myClick);function myClick(){...}</code></p>
</li>
<li><p>在DOM元素上存储数据</p>
<ul>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ele = $(<span class="string">'#ele'</span>);</div><div class="line">ele.data(key,value);</div><div class="line"><span class="comment">// 修改</span></div><div class="line"><span class="keyword">var</span> ele = $(<span class="string">'#ele'</span>);</div><div class="line">$.data(ele[<span class="number">0</span>],key,value);</div><div class="line"><span class="comment">// 因为elem.data()方法是定义在jQuery函数的prototype对象上面的，而$.data()方法是定义jQuery函数上面的，调用的时候不从复杂的jQuery对象上调用</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>如果可能的话使用自己的事件命名空间、这样方便地取消绑定而不影响其他的DOM元素事件绑定<code>$(&quot;#myClick&quot;).on(&quot;click.ntscshen&quot;,&quot;a&quot;,myEventHandler);$(&quot;#myClick&quot;).off(&quot;click.ntscshen&quot;)</code></p>
</li>
<li><p>不要处理不存在的元素<code>if($mySelection.length){...}</code></p>
</li>
<li><p>当某个事件后、如果要连续执行多个操作<code>使用自定义事件并使用自执行事件</code></p>
<ul>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shen</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $.trigger(<span class="string">'yang'</span>);</div><div class="line">&#125;</div><div class="line">$(<span class="built_in">document</span>).on(<span class="string">'yang'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  one();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="其他的优化方案"><a href="#其他的优化方案" class="headerlink" title="其他的优化方案"></a>其他的优化方案</h4><ul>
<li>在JS内会用添加类名的方式修改”样式”属性<code>不要使用jquery.CSS({方法})</code>、使用添加类名的方式<code>$(&quot;#click&quot;).addClass(&quot;error&quot;);</code></li>
</ul>
<ul>
<li>使用事件委托进行处理的方式<code>就近原则</code></li>
<li>在注重性能的地方、请使用原生的Javascript代码</li>
<li>当需要大量的DOM操作时、先隐藏在内存中操作、在显示<code>只触发两次重排和重绘操作</code></li>
<li>定位元素的开销较小、不用考虑对其他元素的影响</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BFC]]></title>
      <url>http://ntscshen.com/2016/08/31/BFC.html</url>
      <content type="html"><![CDATA[<h3 id="BFC-快级格式化上下文"><a href="#BFC-快级格式化上下文" class="headerlink" title="BFC - 快级格式化上下文"></a>BFC - 快级格式化上下文</h3><blockquote>
<p>用于决定快盒子的布局及相互影响的区域</p>
</blockquote>
<ul>
<li>浮动</li>
<li>定位<code>absolute</code> OR <code>fixed</code></li>
<li>行内快级元素<code>display: inline-block</code></li>
<li>表格单元格<code>display: table-cell</code></li>
<li>表格标题<code>display: table-caption</code></li>
<li>切割<code>overflow: hidden;</code></li>
<li>弹性盒子<code>display: flex</code> OR <code>display: inline-flex</code></li>
</ul>
<p>快级格式化上下文对<code>定位</code>和<code>清除浮动</code>很重要</p>
<p>定位和清除浮动的样式规则适用于处于同一个快格式化上下文内的元素</p>
<p>浮动不会影响其它块格式化上下文中元素的布局，并且清除浮动只清除同一块格式化上下文中 在它前面的元素的浮动。</p>
<h5 id="BFC布局规则"><a href="#BFC布局规则" class="headerlink" title="BFC布局规则"></a>BFC布局规则</h5><ul>
<li><p>内部元素会在垂直方向、一个接着一个放置</p>
</li>
<li><p>每个元素的margin box的左边、与包含快border box的左边相接触<code>即使浮动也是如此</code></p>
</li>
<li><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>
</li>
<li><p>具体事务</p>
<ul>
<li>BFC的区域不会与<code>float box</code>重叠</li>
<li>计算BFC的高度时、浮动元素也参与计算</li>
<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠<code>上下margin值穿透</code></li>
</ul>
</li>
</ul>
<h5 id="自适应两列布局"><a href="#自适应两列布局" class="headerlink" title="自适应两列布局"></a>自适应两列布局</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.aside</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">background-color</span>: pink;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">overflow: hidden;会生成浮动</div><div class="line">BFC不会与浮动元素重叠</div><div class="line">实现自适应布局</div><div class="line">*/</div></pre></td></tr></table></figure>
<h5 id="清除内部浮动-overflow-hidden"><a href="#清除内部浮动-overflow-hidden" class="headerlink" title="清除内部浮动(overflow: hidden;)"></a>清除内部浮动(overflow: hidden;)</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 计算BFC的高度时、浮动元素也参与计算 */</span></div><div class="line"><span class="comment">/* 根据这个原理、清除浮动 */</span></div></pre></td></tr></table></figure>
<h5 id="防止垂直margin重叠-一个BFC内的上下margin会重叠"><a href="#防止垂直margin重叠-一个BFC内的上下margin会重叠" class="headerlink" title="防止垂直margin重叠(一个BFC内的上下margin会重叠)"></a>防止垂直margin重叠(一个BFC内的上下margin会重叠)</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/* Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻的Box的margin会发生重叠 */</div><div class="line">&lt;style&gt;</div><div class="line">	p&#123;</div><div class="line">      width: 200px;</div><div class="line">      height: 200px;</div><div class="line">      background-color: red;</div><div class="line">	&#125;</div><div class="line">	.wrap&#123;</div><div class="line">      overflow: hidden;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;p&gt;111&lt;/p&gt;</div><div class="line">&lt;div class="wrap"&gt;</div><div class="line">  &lt;p&gt;222&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">/*</div><div class="line">在一个重叠的元素上包裹一层容器、并触发该容器生成一个BFC</div><div class="line">两个p标签就不属于同一个BFC、就不会发生重叠</div><div class="line">*/</div></pre></td></tr></table></figure>
<blockquote>
<p>BFC内部的元素和外部的元素”绝对”<strong>不会</strong>相互影响</p>
<ul>
<li>BFC外部存在浮动时、它不应该影响BFC内部Box的布局、BFC会通过变窄、而不与浮动重叠  <strong>两列布局</strong></li>
<li>BFC内部有浮动时、为了不影响外部元素的布局、BFC计算高度时会包括浮动的高度  <strong>清除浮动</strong></li>
<li>BFC内部有重叠发生时、为了不影响外部元素的布局、BFC会包含margin值</li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css居中的几种方案]]></title>
      <url>http://ntscshen.com/2016/08/31/css%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88.html</url>
      <content type="html"><![CDATA[<h4 id="固定宽高"><a href="#固定宽高" class="headerlink" title="固定宽高"></a>固定宽高</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">  <span class="attribute">background-color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">background-color</span>: chartreuse;</div><div class="line">  <span class="attribute">display</span>: table;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">text-align</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="comment">/* 若为快级元素：则修改为display: inilne-block;即可 */</span></div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">background-color</span>: pink;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">1px</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">500px</span>;</div><div class="line">    <span class="attribute">background-color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="不固定宽度"><a href="#不固定宽度" class="headerlink" title="不固定宽度"></a>不固定宽度</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> <span class="selector-class">.div1</span>&#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 相对定位 + 浮动 */</span></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">background-color</span>: yellow;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> <span class="selector-tag">li</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">left</span>: -<span class="number">50%</span>;</div><div class="line">  <span class="attribute">top</span>: -<span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> <span class="selector-tag">li</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">left</span>: -<span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  width: 500px;</div><div class="line">  height: 500px;</div><div class="line">  background-color: #77BBDD;</div><div class="line">  /** 各种版本兼容**/</div><div class="line">  display: -webkit-box;</div><div class="line">  display: -moz-box;</div><div class="line">  display: -ms-flexbox;</div><div class="line">  display: -webkit-flex;</div><div class="line">  display: flex;</div><div class="line">  /** 垂直居中核心、兼容**/</div><div class="line">  -webkit-box-pack: center;//09版水平居中</div><div class="line">  -moz-box-pack: center;</div><div class="line">  -ms-flex-pack: center;//过度版(混合版)</div><div class="line">  -webkit-justify-content: center;//12版水平居中</div><div class="line">  justify-content: center;</div><div class="line"></div><div class="line">  -webkit-box-align: center;//09版垂直居中</div><div class="line">  -moz-box-align: center;</div><div class="line">  -ms-flex-align: center;//过度版(混合版)</div><div class="line">  -webkit-align-items: center;//12版垂直居中</div><div class="line">  align-items: center;</div><div class="line">  width: 0%;//低版本Android的flex-item无法等分</div><div class="line">  display: block;</div><div class="line">  /*</div><div class="line">  实则只需三行</div><div class="line">  display: flex;</div><div class="line">  justify-content: center;</div><div class="line">  align-items: center;</div><div class="line">  */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="居中浮动元素"><a href="#居中浮动元素" class="headerlink" title="居中浮动元素"></a>居中浮动元素</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line"> 	<span class="attribute">position</span>: relative;</div><div class="line">  	<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sass总结]]></title>
      <url>http://ntscshen.com/2016/08/31/Sass%E6%80%BB%E7%BB%93.html</url>
      <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><blockquote>
<p>痛点：当配置样式时、需要重复修改各种类名的属性、这是是令人恼怒的</p>
<p>解决：类似于JS中的函数封装、哪里用到哪里调用、配置样式只需修改一次</p>
</blockquote>
<ul>
<li>变量定义在规则快之外 - 主样式内容之外</li>
<li>只声明变量其实没啥用处、最终的目的是达到样式可配置</li>
<li>凡是CSS属性的标准值存在的地方、变量都可使用</li>
<li>变量值也可以引用其他变量、通过颗粒度区分、为不同的值取不同的名字、这个规则相当有用</li>
<li><code>$highlight-color: #efe0ce !default;</code>默认值 - 可配置修改、相当于jQuery的$.extend({},this.defaults,opt),this.defaults = {‘color’:’red’},</li>
<li>变量名可以命名为属性名OR选择器名称、中划线和下划线可以相互混用</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$highlight-color</span>: <span class="number">#efe0ce</span>;</div><div class="line"><span class="variable">$highlight-border</span>: <span class="number">1px</span> solid <span class="variable">$hightlight-color</span>;</div><div class="line"><span class="selector-class">.selected</span>&#123;</div><div class="line">  <span class="attribute">border</span>: <span class="variable">$highlight-border</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 编译</span></div><div class="line"><span class="selector-class">.selected</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#efe0ce</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="文件导入"><a href="#文件导入" class="headerlink" title="文件导入"></a>文件导入</h2><p><code>.blue{@import &quot;blue-theme&quot;}</code></p>
<p>不能用<code>sass</code>的<code>@import</code>直接导入一个原始的<code>css</code>文件，因为<code>sass</code>会认为你想用<code>css</code>原生的<code>@import</code>。但是，因为<code>sass</code>的语法完全兼容<code>css</code>，所以你可以把原始的<code>css</code>文件改名为<code>.scss</code>后缀，即可直接导入了。</p>
<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><blockquote>
<p>痛点：css中重复写选择器是令人恼怒的、为了样式的不冲突需要一遍遍的写相同的<code>ID</code></p>
<p>解决：sass的嵌套写法、只需写一遍、且可读性大大提高</p>
</blockquote>
<ul>
<li>在sass书写中会配到使用伪类元素情况<code>:hover</code> <code>:after</code> <code>nth-child</code>使用常规的嵌套方案会出现问题</li>
<li>正常的嵌套解耦是通过一个空格链接到子选择器的前面<code>后代选择器</code></li>
<li>使用父选择器标示符<code>&amp;</code></li>
<li>子组合选择器和同层组合选择器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">article&#123;</div><div class="line">  ~ article&#123;border-top: 1px dashed #ccc;&#125;</div><div class="line">  &gt; section &#123;background-color: #eee;&#125;</div><div class="line">  dl &gt; &#123;</div><div class="line">    dt&#123;color: #333;&#125;</div><div class="line">    dd&#123;color: #555;&#125;</div><div class="line">  &#125;</div><div class="line">  nav + &amp; &#123;margin-top: 0;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>属性嵌套</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">nav</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span> &#123;</div><div class="line">    left: <span class="number">1px</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">1px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">nav</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<h4 id="sass的条理性和可读性基础：变量、嵌套、导入、注释"><a href="#sass的条理性和可读性基础：变量、嵌套、导入、注释" class="headerlink" title="sass的条理性和可读性基础：变量、嵌套、导入、注释"></a>sass的条理性和可读性基础：变量、嵌套、导入、注释</h4></blockquote>
<h2 id="混合器"><a href="#混合器" class="headerlink" title="混合器"></a>混合器</h2><blockquote>
<p>痛点：整个网站中有几处小小的样式类似（例如一致的颜色和字体），那么使用变量来统一处理这种情况是非常不错的选择。但是当你的样式变得越来越复杂，你需要大段大段的重用样式的代码，独立的变量就没办法应付这种情况了。</p>
</blockquote>
<p>通过<code>@mixin example</code>标示符定义、然后使用 <code>@include example</code>调用</p>
<p>大多数情况<code>@extend</code>可以满足日常的开发需求</p>
<p>而@include、较少使用的到<code>e.g. 计算rem和px的装换</code></p>
<p>至于css3的前缀问题可以使用<code>Autoprefixer</code>插件在构建完成后自动添加</p>
<p><img src="http://occeqxmsk.bkt.clouddn.com/2016-08-31_include%E5%92%8Cextend%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="include和extend的区别"></p>
<blockquote>
<p>@include和@extend的区别</p>
<ul>
<li>@include是用来调用@mixin的定义(包括)</li>
<li>@extend(延伸)<ul>
<li>继承选择器的样式</li>
<li>继承一个定义好的<code>placeholder</code></li>
</ul>
</li>
<li>相同之处：都可以給选择器添加一系列属性、而不用重复手写</li>
<li>不同之处：<ul>
<li><code>@extend会</code>合并选择器、共享属性</li>
<li><code>@mixin</code>每个选择器是独立存在的</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="修改伪元素"><a href="#修改伪元素" class="headerlink" title="修改伪元素"></a>修改伪元素</h2><blockquote>
<p>修改伪元素的content的属性值</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// CSS代码</div><div class="line">.red::before &#123;</div><div class="line">    content: attr(data-attr);</div><div class="line">    color: red;</div><div class="line">&#125;</div><div class="line">// HTML代码</div><div class="line">&lt;div class="red" data-attr="red"&gt;内容内容内容内容&lt;/div&gt;</div><div class="line"></div><div class="line">// JacaScript代码</div><div class="line">$('.red').attr('data-attr', 'green');</div></pre></td></tr></table></figure>
<blockquote>
<p>更改伪元素的样式1</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// CSS代码</div><div class="line">.red::after&#123;</div><div class="line">  content:"red",</div><div class="line">  color: red;</div><div class="line">&#125;</div><div class="line">.green::after&#123;</div><div class="line">  content:"green",</div><div class="line">  color: green;</div><div class="line">&#125;</div><div class="line">// HTML代码</div><div class="line">&lt;div class="red"&gt;内容内容内容&lt;/div&gt;</div><div class="line">// jQuery代码</div><div class="line">$(".red").removeClass("red").addClass("green");</div></pre></td></tr></table></figure>
<blockquote>
<p>更改伪元素的样式2</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.styleSheets[<span class="number">0</span>].addRule(<span class="string">'.red::before'</span>,<span class="string">'color: green'</span>); <span class="comment">// 支持IE</span></div><div class="line"><span class="built_in">document</span>.styleSheets[<span class="number">0</span>].insertRule(<span class="string">'.red::before &#123; color: green &#125;'</span>, <span class="number">0</span>);</div><div class="line"><span class="comment">// 支持非IE的现代浏览器</span></div><div class="line"><span class="comment">// styleSheets:返回由网页中所用到的样式表组成的数组，但是不包括直接嵌在元素里的style。</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;style&gt;.red::before&#123;color:green&#125;&lt;/style&gt;'</span>).appendTo(<span class="string">'head'</span>);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css如何居中一个浮动元素]]></title>
      <url>http://ntscshen.com/2016/08/30/%E6%AF%8F%E6%97%A5ES6%20-%20let%E5%92%8Cvar%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
      <content type="html"><![CDATA[<h2 id="let和var的区别"><a href="#let和var的区别" class="headerlink" title="let和var的区别"></a><strong>let和var的区别</strong></h2><ul>
<li>块级作用域：用let定义的变量只在定义它的块中有效</li>
<li>不会变量提升、为声明前使用、直接报错。</li>
<li>let会暂时性死区、一但快内let声明了a、全局变量a将不会起作用</li>
<li>let不允许在相同作用域内、重复声明同一个变量<blockquote>
<p>为什么引进块级作用域？<br>for循环的i变量控制循环、防止泄露<br>在ES6之前 - JS没有块级作用域</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// function要注意的规范</span></div><div class="line"><span class="comment">// 应该避免在块级作用域内声明函数、如果确实需要、也应该写成函数表达式、而不是函数式声明</span></div><div class="line"><span class="comment">// 函数式声明</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="string">"shen"</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 函数表达式</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="string">"yang"</span>;</div><div class="line">  <span class="keyword">let</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css如何居中一个浮动元素]]></title>
      <url>http://ntscshen.com/2016/08/30/css%E5%A6%82%E4%BD%95%E5%B1%85%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0.html</url>
      <content type="html"><![CDATA[<h2 id="如何利用CSS居中一个浮动元素"><a href="#如何利用CSS居中一个浮动元素" class="headerlink" title="如何利用CSS居中一个浮动元素"></a>如何利用CSS居中一个浮动元素</h2><blockquote>
<ul>
<li>居中一个浮动元素 <strong>宽度是必须的</strong></li>
<li>使用相对定位</li>
<li>使用margin</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line">  	position: relative;//相对于父级</div><div class="line">  	left: 50%;</div><div class="line">	top: 50%;</div><div class="line">	float: left;</div><div class="line">  	margin-left: -100px;</div><div class="line">  	margin-top: -100px;</div><div class="line">  	width: 200px;</div><div class="line">  	height: 200px;</div><div class="line">  	background-color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="如何居中div"><a href="#如何居中div" class="headerlink" title="如何居中div"></a>如何居中div</h2><h2 id="css中可以被继承的属性"><a href="#css中可以被继承的属性" class="headerlink" title="css中可以被继承的属性"></a>css中可以被继承的属性</h2><p><code>font-size、font-family、font-size、font-weight、color、text-indent、line-height、text-align、letter-spacing、word-spacing</code></p>
<ul>
<li>文本相关属性<ul>
<li><code>font-size、font-style、font-family、font-weight、font、</code></li>
<li><code>line-height、text-align、</code></li>
<li><code>text-indent首行文本缩进、letter-spacing单个字母间距、word-spacing以空白为分割间距</code></li>
</ul>
</li>
<li>列表相关属性(li)<ul>
<li><code>list-style-type: decimal数字、circle空心圆、默认实心圆</code></li>
<li><code>list-style-position:inside放在文本以内且环绕文本 outside默认</code></li>
<li><code>list-style-image:使用图像来替换列表项的标记</code></li>
<li><code>缩写形式:list-style: decimal outside url(&#39;img/arror.gif&#39;);</code></li>
</ul>
</li>
<li>颜色<code>color</code></li>
<li>若被问到类似的问题<ul>
<li>字体系列<code>font-size\font-family\font-style\font-weight</code></li>
<li>字体颜色<code>color</code></li>
<li>字体间距<code>letter-spacing\word-spacing</code></li>
<li>列表系列<code>list-style-image\type\position</code></li>
<li><code>line-height\text-align\text-indent</code></li>
</ul>
</li>
</ul>
<h2 id="css中的选择器"><a href="#css中的选择器" class="headerlink" title="css中的选择器"></a>css中的选择器</h2><ul>
<li>常规选择器：ID\class\元素\ *通配符</li>
<li>伪类选择器：<ul>
<li>动态伪类选择器<code>:link\:visited\:active\:hover\:focus</code></li>
<li>状态伪类选择器<ul>
<li><code>E:disabled{}</code>匹配所有被禁言的表单元素</li>
<li><code>E:checked{}</code>匹配表单中被选中的单选或复选按钮</li>
<li><code>E:enabled{}</code>匹配被启用的元素(表单元素)checked反面</li>
</ul>
</li>
<li>结构伪类<ul>
<li><code>E:first-child</code>选取特定元素的第一个子元素 OR <code>last-child</code></li>
<li><code>E:first-of-type(){}</code> 和first-child一样、只是指定了元素类型</li>
<li><code>E:nth-child(n)</code>选取特定元素的一个或多个子元素、n虫1开始、也可以是odd(奇数)，even(偶数)。<code>E:nth-last-child(n)</code></li>
<li><code>E:nth-of-type(n){}</code>计算父元素中指定的<code>某种类型的</code>子元素</li>
<li><code>E:root</code>匹配E所在文档的跟元素</li>
<li><code>E::first-line</code>匹配元素的第一行文本、常用于文本排版</li>
<li><code>E::after</code> <code>E::before</code></li>
<li><code>::selection</code>选中的文本背景颜色</li>
</ul>
</li>
</ul>
</li>
<li>关系选择器：<ul>
<li>A &gt; E 直系后代(children)<code>子代选择器</code></li>
<li>A E 后代元素(find)<code>后代选择器</code></li>
<li>E + F 同辈元素且在E后面的元素(next)<code>相邻兄弟元素选择器</code></li>
</ul>
</li>
</ul>
<h2 id="样式的优先级算法-优先级"><a href="#样式的优先级算法-优先级" class="headerlink" title="样式的优先级算法 - 优先级"></a>样式的优先级算法 - <strong>优先级</strong></h2><ul>
<li>内联</li>
<li>ID选择器</li>
<li>伪类选择器<code>e.g: E:first-child{}</code></li>
<li>属性选择器<code>e.g: input[type=&quot;text&quot;]{}</code></li>
<li>类选择器</li>
<li>元素选择器</li>
<li>通配符</li>
<li><code>!important</code>除外</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[抓包工具]]></title>
      <url>http://ntscshen.com/2016/08/22/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7.html</url>
      <content type="html"><![CDATA[<h2 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h2><p><a href="http://www.imooc.com/view/37" target="_blank" rel="external">Win上的抓包 - Fiddler工具使用</a> </p>
<p><a href="https://item.taobao.com/item.htm?spm=a1z10.4-c.w4004-11940565164.17.FWVVGt&amp;id=535920069637" target="_blank" rel="external">Mac上的抓包 - Charles正版购买</a></p>
<p><a href="http://itangqi.me/2016/05/30/tips-for-using-charles/" target="_blank" rel="external">Qi Tang’s Blog站的Charles使用心得</a></p>
<blockquote>
<p>使用Charles、记录安装和使用</p>
</blockquote>
<h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h3><blockquote>
<p>打开VPN之后、Charles将不会工作、因此撤掉VPN</p>
</blockquote>
<h3 id="设置端口并开启代理"><a href="#设置端口并开启代理" class="headerlink" title="设置端口并开启代理"></a>设置端口并开启代理</h3><p><img src="http://ww3.sinaimg.cn/mw690/9c0ebacdjw1f2bd8cgrjsj20kb0frq4d.jpg" alt="端口"></p>
<p>确定工具栏下的 Proxy-&gt;Mac OS X Proxy被勾选上了</p>
<h3 id="安装SSL证书"><a href="#安装SSL证书" class="headerlink" title="安装SSL证书"></a>安装SSL证书</h3><p><img src="http://blog.devtang.com/images/charles-pro-1.png" alt="SSL证书"></p>
<p><img src="https://gitsea.com/wp-content/uploads/2015/11/D13318CA-78BE-47E7-8D82-93B7630DD700.jpg" alt="SSL证书"></p>
<h2 id="手机设置"><a href="#手机设置" class="headerlink" title="手机设置"></a>手机设置</h2><p>手机端和电脑链接在一个网段内，设置HTTP代理</p>
<p><img src="https://gitsea.com/wp-content/uploads/2015/11/7B30A925-1817-4968-BEEE-052EAB0E21DC-352x600.jpg" alt="手机设置代理"></p>
<p>然后打开手机浏览器，输入 <a href="http://www.charlesproxy.com/getssl/进行mac电脑charles" target="_blank" rel="external">http://www.charlesproxy.com/getssl/进行mac电脑charles</a> ssl 根证书安装</p>
<p><img src="https://gitsea.com/wp-content/uploads/2015/11/51BB8CA2FEEC517BB75CEBCFA2B171C7-337x600.png" alt="手机证书安装"></p>
<p>安装成功之后不管是手机内部app还是浏览器浏览https 站点，都可以进行抓包</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSH Key到Github]]></title>
      <url>http://ntscshen.com/2016/08/18/%E6%B7%BB%E5%8A%A0SSH%20Key%E5%88%B0Github.html</url>
      <content type="html"><![CDATA[<h2 id="添加ssh-key到Github"><a href="#添加ssh-key到Github" class="headerlink" title="添加ssh key到Github"></a>添加ssh key到Github</h2><h3 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH?"></a>什么是SSH?</h3><blockquote>
<p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。</p>
<p>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p>
</blockquote>
<p>首先先确认是否已经存在公钥了( SSH Keys )</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al ~<span class="regexp">/.ssh</span></div></pre></td></tr></table></figure>
<ul>
<li>若存在<code>id_rsa</code>或<code>id_rsa.pub</code>。则代表已经生成过Key值、直接将SSH key添加到Github中</li>
</ul>
<h2 id="生成SSH-公钥"><a href="#生成SSH-公钥" class="headerlink" title="生成SSH 公钥"></a>生成SSH 公钥</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"注释内容，一般为邮件地址 xxx@163.com"</span></div></pre></td></tr></table></figure>
<p>接着会显示以下的输出</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/Users/eguchi/.ssh/id_rsa): # &lt;输入Enter键&gt;</div><div class="line">Created directory '/Users/eguchi/.ssh'.</div><div class="line">Enter passphrase (empty for no passphrase): # &lt;输入验证密码&gt;</div><div class="line">Enter same passphrase again: # &lt;再输入一次相同的验证密码&gt;</div><div class="line">Your identification has been saved in /Users/eguchi/.ssh/id_rsa.</div><div class="line">Your public key has been saved in /Users/eguchi/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">57:15:3c:ca:f2:dc:27:6d:c2:9a:88:d0:70:cf:8d:31 xxx@163.com</div><div class="line">The key's randomart image is:</div><div class="line">+--[ RSA 2048]----+</div><div class="line">|             .o. |</div><div class="line">|             .o  |</div><div class="line">|           ... . |</div><div class="line">|      . . E.o    |</div><div class="line">|       +So.O o . |</div><div class="line">|      . ..+ + = +|</div><div class="line">|       . . . o = |</div><div class="line">|        . . o    |</div><div class="line">|                 |</div><div class="line">+-----------------+</div></pre></td></tr></table></figure>
<p>默认会在相应路径下<code>~/.ssh</code>生成<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件</p>
<p>复制id_rsa.pub文件信息<code>cat ~/.ssh/id_rsa.pub</code>。将这些信息复制到Github的Add SSH key页面。</p>
<p>输出实例</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDkkJvxyDVh9a+zH1f7ZQq/JEI79dVjDSG</div><div class="line"><span class="number">4</span>RzttQwfK+sgWEr0aAgfnxdxQeDKxIxqI1SwyTY8oCcWzvpORuPqwbc7UWWPcCvbQ3jlEdN</div><div class="line"><span class="number">5</span>jvwKM82hincEWwI3wzcnVg2Mn8dH86b5m6REDzwRgozQ3lqrgwGVlTvkHDFs6H0b/<span class="number">1</span>PSrM</div><div class="line">XGppOP/QXGEVhZ6Hy4m3b1wMjjrbYwmWIeYklgoGHyrldhAaDYc33y7aUcRyFyq5DubtsLn</div><div class="line"><span class="number">2</span>oj4K+<span class="number">1</span>q36iviCHxCOri0FDmn2dzylRCI4S+A2/P7Y7rVfdT+<span class="number">8</span>OWYKCBUs8lfjujghEtejq</div><div class="line">Qmj9ikyGTEAW1zQCN7hVwYdjL xxx@<span class="number">163.</span>com</div></pre></td></tr></table></figure>
<p>进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key:</p>
<p>Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方<code>Add key</code>绿色按钮即可。</p>
<h2 id="不同的操作系统，均有一些命令，直接将SSH-key从文件拷贝到粘贴板中，如下："><a href="#不同的操作系统，均有一些命令，直接将SSH-key从文件拷贝到粘贴板中，如下：" class="headerlink" title="不同的操作系统，均有一些命令，直接将SSH key从文件拷贝到粘贴板中，如下："></a>不同的操作系统，均有一些命令，直接将SSH key从文件拷贝到粘贴板中，如下：</h2><p><strong>mac</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</div><div class="line"># Copies the contents of the id_rsa.pub file to your clipboard</div></pre></td></tr></table></figure>
<p><strong>windows</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">clip &lt; ~/.ssh/id_rsa.pub</div><div class="line"># Copies the contents of the id_rsa.pub file to your clipboard</div></pre></td></tr></table></figure>
<p><strong>linux</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install xclip</div><div class="line"># Downloads and installs xclip. If you don&apos;t have `apt-get`, you might need to use another installer (like `yum`)</div><div class="line"></div><div class="line">xclip -sel clip &lt; ~/.ssh/id_rsa.pub</div><div class="line"># Copies the contents of the id_rsa.pub file to your clipboard</div></pre></td></tr></table></figure>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>超时报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh: connect to host github.com port 22: Operation timed out</div></pre></td></tr></table></figure>
<p>让SSH走443端口<a href="https://help.github.com/articles/using-ssh-over-the-https-port/" target="_blank" rel="external">解决方案</a></p>
<p>编辑<code>~/.ssh/config</code>文件(若没有、则创建一个)<code>touch config</code></p>
<p><code>vim config</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Host github.com</div><div class="line">User ntscshen@163.com</div><div class="line">Hostname ssh.github.com</div><div class="line">PreferredAuthentications publickey</div><div class="line">IdentityFile ~/.ssh/id_rsa</div><div class="line">Port 443</div><div class="line"></div><div class="line">Host gi.coding.net</div><div class="line">User ntscshen@163.com</div><div class="line">Hostname ssh.github.com</div><div class="line">PreferredAuthentications publickey</div><div class="line">IdentityFile ~/.ssh/id_rsa</div><div class="line">Port 443</div><div class="line"></div><div class="line">Host，SSH 连接名</div><div class="line">HostName，如上所示，可以是通配符，可以是 IP，也可以是域名等</div><div class="line">User，登录的用户名</div><div class="line">IdentifyFile，</div><div class="line">	version 1 协议下默认是 ~/.ssh/identify，</div><div class="line">	version 2 协议下，默认是依次匹配：~/.ssh/id_dsa，~/.ssh/id_ecdsa，~/.ssh/id_rsa，</div><div class="line">	还有 version 2 兼容模式。</div><div class="line">LocalForward 端口的内部跳转</div><div class="line">Port，端口设置，默认 SSH 的端口是 22 // 公司封github 22端口</div><div class="line">Protocal，协议版本号，1 或者 2</div></pre></td></tr></table></figure>
<p><code>:wq</code></p>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><ol>
<li>ssh-keygen 用于为 ssh(1)生成、管理和转换认证密钥，包括 RSA 和 DSA 两种密钥。</li>
<li>密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。</li>
<li>-t type - 指定要创建的密钥类型。可以使用：”rsa1”(SSH-1) “rsa”(SSH-2) “dsa”(SSH-2)</li>
<li>-C comment - 提供一个新注释</li>
</ol>
<h2 id="同时管理多个SSH-Key"><a href="#同时管理多个SSH-Key" class="headerlink" title="同时管理多个SSH Key"></a>同时管理多个SSH Key</h2><blockquote>
<p>曾今只使用一个 <code>SSH key</code> 在github上提交代码,现在工作原因,需要再添加一个 SSH key在公司的gitlab上提交代码,配置如下</p>
</blockquote>
<h4 id="生成并添加第二个SSH-Key"><a href="#生成并添加第二个SSH-Key" class="headerlink" title="生成并添加第二个SSH Key"></a>生成并添加第二个SSH Key</h4><p><code>ssh-keygen -t rsa -C &quot;注释内容，一般为邮件地址 xxx@163.com&quot;</code> </p>
<p>注意此处不要一路回车,否则邮箱将覆盖上一次生成的ssh key,要给这个文件起个名字,例如 <code>id_rsa_GitLab</code> ,默认的是 <code>id_rsa</code> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 在.ssh目录下的 添加gitLab配置项</div><div class="line"># gitLab</div><div class="line">Host xxx.xxx.cn</div><div class="line">User xxx@xxx.com</div><div class="line">Hostname xxx.xxx.cn</div><div class="line">PreferredAuthentications publickey</div><div class="line">IdentityFile ~/.ssh/id_rsa_GitLab</div></pre></td></tr></table></figure>
<h5 id="测试是否连通"><a href="#测试是否连通" class="headerlink" title="测试是否连通"></a>测试是否连通</h5><p><img src="http://occeqxmsk.bkt.clouddn.com/082005.jpg" alt="http://occeqxmsk.bkt.clouddn.com/082005.jpg"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gitflow Workflow工作流]]></title>
      <url>http://ntscshen.com/2016/08/18/Workflow%E5%B7%A5%E4%BD%9C%E6%B5%81.html</url>
      <content type="html"><![CDATA[<h3 id="分支类型和流程"><a href="#分支类型和流程" class="headerlink" title="分支类型和流程"></a>分支类型和流程</h3><p><img src="http://nvie.com/img/git-model@2x.png" alt="http://nvie.com/img/git-model@2x.png"></p>
<h5 id="Commit-message的格式"><a href="#Commit-message的格式" class="headerlink" title="Commit message的格式"></a>Commit message的格式</h5><blockquote>
<p>每次提交,Commit message 都包括三个部分：Header( 必须 )、Body( 可省略 )、Footer( 可省略 )</p>
</blockquote>
<h6 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h6><blockquote>
<p>Header部分只有一行,包含三个字段</p>
<ul>
<li>type( 必须 )：类型<ul>
<li>feat：新功能( <code>feature</code> )</li>
<li>fix：修补Bug</li>
<li>docs：文档( <code>documentation</code> )</li>
<li>style：格式( 不影响代码运行的变动 )</li>
<li>refactor：重构( 即不新增功能、也不是修改Bug的代码变动 )</li>
<li>test：增加测试</li>
<li>chore：构建过程或辅助工具的变动</li>
</ul>
</li>
<li>scope( 可选 )：范围( commit影响的范围，如数据层、控制层、视图层等 )</li>
<li>subject( 必须 )：主题( commit目的的简短描述,不超过50个字符 )<ul>
<li>第一个字母小写</li>
<li>结尾不加句号(.)</li>
<li>以动词开头、使用第一人称现在时</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
